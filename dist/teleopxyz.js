var teleopxyz;(()=>{var __webpack_modules__={924:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar GetIntrinsic = __webpack_require__(210);\n\nvar callBind = __webpack_require__(559);\n\nvar $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));\n\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\tvar intrinsic = GetIntrinsic(name, !!allowMissing);\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBind(intrinsic);\n\t}\n\treturn intrinsic;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLG1CQUFtQixtQkFBTyxDQUFDLEdBQWU7O0FBRTFDLGVBQWUsbUJBQU8sQ0FBQyxHQUFJOztBQUUzQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3RlbGVvcHh5ei8uL25vZGVfbW9kdWxlcy9jYWxsLWJpbmQvY2FsbEJvdW5kLmpzPzU0NWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCcuLycpO1xuXG52YXIgJGluZGV4T2YgPSBjYWxsQmluZChHZXRJbnRyaW5zaWMoJ1N0cmluZy5wcm90b3R5cGUuaW5kZXhPZicpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQm91bmRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdHZhciBpbnRyaW5zaWMgPSBHZXRJbnRyaW5zaWMobmFtZSwgISFhbGxvd01pc3NpbmcpO1xuXHRpZiAodHlwZW9mIGludHJpbnNpYyA9PT0gJ2Z1bmN0aW9uJyAmJiAkaW5kZXhPZihuYW1lLCAnLnByb3RvdHlwZS4nKSA+IC0xKSB7XG5cdFx0cmV0dXJuIGNhbGxCaW5kKGludHJpbnNpYyk7XG5cdH1cblx0cmV0dXJuIGludHJpbnNpYztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///924\n")},559:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar bind = __webpack_require__(612);\nvar GetIntrinsic = __webpack_require__(210);\n\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\nvar $max = GetIntrinsic('%Math.max%');\n\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = null;\n\t}\n}\n\nmodule.exports = function callBind(originalFunction) {\n\tvar func = $reflectApply(bind, $call, arguments);\n\tif ($gOPD && $defineProperty) {\n\t\tvar desc = $gOPD(func, 'length');\n\t\tif (desc.configurable) {\n\t\t\t// original length, plus the receiver, minus any additional arguments (after the receiver)\n\t\t\t$defineProperty(\n\t\t\t\tfunc,\n\t\t\t\t'length',\n\t\t\t\t{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }\n\t\t\t);\n\t\t}\n\t}\n\treturn func;\n};\n\nvar applyBind = function applyBind() {\n\treturn $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTU5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFdBQVcsbUJBQU8sQ0FBQyxHQUFlO0FBQ2xDLG1CQUFtQixtQkFBTyxDQUFDLEdBQWU7O0FBRTFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixTQUFTLFVBQVU7QUFDdkMsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRDQUE0QyxrQkFBa0I7QUFDOUQsRUFBRTtBQUNGLENBQUMsb0JBQW9CO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVsZW9weHl6Ly4vbm9kZV9tb2R1bGVzL2NhbGwtYmluZC9pbmRleC5qcz8zZWIxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJGFwcGx5ID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5JScpO1xudmFyICRjYWxsID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwlJyk7XG52YXIgJHJlZmxlY3RBcHBseSA9IEdldEludHJpbnNpYygnJVJlZmxlY3QuYXBwbHklJywgdHJ1ZSkgfHwgYmluZC5jYWxsKCRjYWxsLCAkYXBwbHkpO1xuXG52YXIgJGdPUEQgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJScsIHRydWUpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IEdldEludHJpbnNpYygnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnLCB0cnVlKTtcbnZhciAkbWF4ID0gR2V0SW50cmluc2ljKCclTWF0aC5tYXglJyk7XG5cbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0dHJ5IHtcblx0XHQkZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyB2YWx1ZTogMSB9KTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIElFIDggaGFzIGEgYnJva2VuIGRlZmluZVByb3BlcnR5XG5cdFx0JGRlZmluZVByb3BlcnR5ID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCaW5kKG9yaWdpbmFsRnVuY3Rpb24pIHtcblx0dmFyIGZ1bmMgPSAkcmVmbGVjdEFwcGx5KGJpbmQsICRjYWxsLCBhcmd1bWVudHMpO1xuXHRpZiAoJGdPUEQgJiYgJGRlZmluZVByb3BlcnR5KSB7XG5cdFx0dmFyIGRlc2MgPSAkZ09QRChmdW5jLCAnbGVuZ3RoJyk7XG5cdFx0aWYgKGRlc2MuY29uZmlndXJhYmxlKSB7XG5cdFx0XHQvLyBvcmlnaW5hbCBsZW5ndGgsIHBsdXMgdGhlIHJlY2VpdmVyLCBtaW51cyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgKGFmdGVyIHRoZSByZWNlaXZlcilcblx0XHRcdCRkZWZpbmVQcm9wZXJ0eShcblx0XHRcdFx0ZnVuYyxcblx0XHRcdFx0J2xlbmd0aCcsXG5cdFx0XHRcdHsgdmFsdWU6IDEgKyAkbWF4KDAsIG9yaWdpbmFsRnVuY3Rpb24ubGVuZ3RoIC0gKGFyZ3VtZW50cy5sZW5ndGggLSAxKSkgfVxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZ1bmM7XG59O1xuXG52YXIgYXBwbHlCaW5kID0gZnVuY3Rpb24gYXBwbHlCaW5kKCkge1xuXHRyZXR1cm4gJHJlZmxlY3RBcHBseShiaW5kLCAkYXBwbHksIGFyZ3VtZW50cyk7XG59O1xuXG5pZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdCRkZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ2FwcGx5JywgeyB2YWx1ZTogYXBwbHlCaW5kIH0pO1xufSBlbHNlIHtcblx0bW9kdWxlLmV4cG9ydHMuYXBwbHkgPSBhcHBseUJpbmQ7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///559\n")},227:(module,exports,__webpack_require__)=>{eval("/* provided dependency */ var process = __webpack_require__(155);\n/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(447)(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///227\n")},447:(module,__unused_webpack_exports,__webpack_require__)=>{eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(824);\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///447\n")},804:module=>{eval("\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toString = Object.prototype.toString;\n\nmodule.exports = function forEach (obj, fn, ctx) {\n    if (toString.call(fn) !== '[object Function]') {\n        throw new TypeError('iterator must be a function');\n    }\n    var l = obj.length;\n    if (l === +l) {\n        for (var i = 0; i < l; i++) {\n            fn.call(ctx, obj[i], i, obj);\n        }\n    } else {\n        for (var k in obj) {\n            if (hasOwn.call(obj, k)) {\n                fn.call(ctx, obj[k], k, obj);\n            }\n        }\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODA0LmpzIiwibWFwcGluZ3MiOiI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWxlb3B4eXovLi9ub2RlX21vZHVsZXMvZm9yZWFjaC9pbmRleC5qcz9iZmFkIl0sInNvdXJjZXNDb250ZW50IjpbIlxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZvckVhY2ggKG9iaiwgZm4sIGN0eCkge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKGZuKSAhPT0gJ1tvYmplY3QgRnVuY3Rpb25dJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpdGVyYXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdmFyIGwgPSBvYmoubGVuZ3RoO1xuICAgIGlmIChsID09PSArbCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgZm4uY2FsbChjdHgsIG9ialtpXSwgaSwgb2JqKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGsgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwob2JqLCBrKSkge1xuICAgICAgICAgICAgICAgIGZuLmNhbGwoY3R4LCBvYmpba10sIGssIG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///804\n")},648:module=>{"use strict";eval("\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                args.concat(slice.call(arguments))\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(\n                that,\n                args.concat(slice.call(arguments))\n            );\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQ4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBOztBQUVBLCtFQUErRSxzQ0FBc0M7O0FBRXJIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVsZW9weHl6Ly4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW1wbGVtZW50YXRpb24uanM/Njg4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBuby1pbnZhbGlkLXRoaXM6IDEgKi9cblxudmFyIEVSUk9SX01FU1NBR0UgPSAnRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnO1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmdW5jVHlwZSA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicgfHwgdG9TdHIuY2FsbCh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUk9SX01FU1NBR0UgKyB0YXJnZXQpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIHZhciBib3VuZDtcbiAgICB2YXIgYmluZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGJvdW5kTGVuZ3RoID0gTWF0aC5tYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJvdW5kQXJncy5wdXNoKCckJyArIGkpO1xuICAgIH1cblxuICAgIGJvdW5kID0gRnVuY3Rpb24oJ2JpbmRlcicsICdyZXR1cm4gZnVuY3Rpb24gKCcgKyBib3VuZEFyZ3Muam9pbignLCcpICsgJyl7IHJldHVybiBiaW5kZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgIGlmICh0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBib3VuZDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///648\n")},612:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar implementation = __webpack_require__(648);\n\nmodule.exports = Function.prototype.bind || implementation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHFCQUFxQixtQkFBTyxDQUFDLEdBQWtCOztBQUUvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlbGVvcHh5ei8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2luZGV4LmpzPzBmN2MiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///612\n")},210:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar undefined;\n\nvar $SyntaxError = SyntaxError;\nvar $Function = Function;\nvar $TypeError = TypeError;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = Object.getOwnPropertyDescriptor;\nif ($gOPD) {\n\ttry {\n\t\t$gOPD({}, '');\n\t} catch (e) {\n\t\t$gOPD = null; // this is IE 8, which has a broken gOPD\n\t}\n}\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = __webpack_require__(405)();\n\nvar getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': EvalError,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': Object,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': RangeError,\n\t'%ReferenceError%': ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet\n};\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = __webpack_require__(612);\nvar hasOwn = __webpack_require__(642);\nvar $concat = bind.call(Function.call, Array.prototype.concat);\nvar $spliceApply = bind.call(Function.apply, Array.prototype.splice);\nvar $replace = bind.call(Function.call, String.prototype.replace);\nvar $strSlice = bind.call(Function.call, String.prototype.slice);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///210\n")},405:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = __webpack_require__(419);\n\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsR0FBUzs7QUFFckM7QUFDQSx5Q0FBeUM7QUFDekMscUNBQXFDO0FBQ3JDLDhDQUE4QztBQUM5QywwQ0FBMEM7O0FBRTFDO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWxlb3B4eXovLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvaW5kZXguanM/NTE1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sO1xudmFyIGhhc1N5bWJvbFNoYW0gPSByZXF1aXJlKCcuL3NoYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzTmF0aXZlU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sKCdmb28nKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sKCdiYXInKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0cmV0dXJuIGhhc1N5bWJvbFNoYW0oKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///405\n")},419:module=>{"use strict";eval("\n\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQSwyRkFBMkY7QUFDM0YsNENBQTRDOztBQUU1QztBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7O0FBRWhDLGtFQUFrRTtBQUNsRSxxRUFBcUU7O0FBRXJFO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0EsdUNBQXVDOztBQUV2QywyREFBMkQ7QUFDM0QsK0RBQStEOztBQUUvRDtBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQywyRUFBMkU7O0FBRTNFLHlHQUF5Rzs7QUFFekc7QUFDQSw2Q0FBNkM7O0FBRTdDLDhEQUE4RDs7QUFFOUQ7QUFDQTtBQUNBLHVFQUF1RTtBQUN2RTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVsZW9weHl6Ly4vbm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL3NoYW1zLmpzPzE2OTYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgY29tcGxleGl0eTogWzIsIDE4XSwgbWF4LXN0YXRlbWVudHM6IFsyLCAzM10gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdHZhciBvYmogPSB7fTtcblx0dmFyIHN5bSA9IFN5bWJvbCgndGVzdCcpO1xuXHR2YXIgc3ltT2JqID0gT2JqZWN0KHN5bSk7XG5cdGlmICh0eXBlb2Ygc3ltID09PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bU9iaikgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvb2JqZWN0LmFzc2lnbi9pc3N1ZXMvMTdcblx0Ly8gaWYgKHN5bSBpbnN0YW5jZW9mIFN5bWJvbCkgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzL2lzc3Vlcy80XG5cdC8vIGlmICghKHN5bU9iaiBpbnN0YW5jZW9mIFN5bWJvbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gaWYgKHR5cGVvZiBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyBpZiAoU3RyaW5nKHN5bSkgIT09IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1WYWwgPSA0Mjtcblx0b2JqW3N5bV0gPSBzeW1WYWw7XG5cdGZvciAoc3ltIGluIG9iaikgeyByZXR1cm4gZmFsc2U7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tdW5yZWFjaGFibGUtbG9vcFxuXHRpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaik7XG5cdGlmIChzeW1zLmxlbmd0aCAhPT0gMSB8fCBzeW1zWzBdICE9PSBzeW0pIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSk7XG5cdFx0aWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHN5bVZhbCB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUgIT09IHRydWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///419\n")},410:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar hasSymbols = __webpack_require__(419);\n\nmodule.exports = function hasToStringTagShams() {\n\treturn hasSymbols() && !!Symbol.toStringTag;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGlCQUFpQixtQkFBTyxDQUFDLEdBQW1COztBQUU1QztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWxlb3B4eXovLi9ub2RlX21vZHVsZXMvaGFzLXRvc3RyaW5ndGFnL3NoYW1zLmpzPzA3YTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzL3NoYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzVG9TdHJpbmdUYWdTaGFtcygpIHtcblx0cmV0dXJuIGhhc1N5bWJvbHMoKSAmJiAhIVN5bWJvbC50b1N0cmluZ1RhZztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///410\n")},642:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar bind = __webpack_require__(612);\n\nmodule.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFdBQVcsbUJBQU8sQ0FBQyxHQUFlOztBQUVsQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlbGVvcHh5ei8uL25vZGVfbW9kdWxlcy9oYXMvc3JjL2luZGV4LmpzP2EwZDMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///642\n")},717:module=>{eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzE3LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWxlb3B4eXovLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcz8zZmI1Il0sInNvdXJjZXNDb250ZW50IjpbImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///717\n")},584:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar hasToStringTag = __webpack_require__(410)();\nvar callBound = __webpack_require__(924);\n\nvar $toString = callBound('Object.prototype.toString');\n\nvar isStandardArguments = function isArguments(value) {\n\tif (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {\n\t\treturn false;\n\t}\n\treturn $toString(value) === '[object Arguments]';\n};\n\nvar isLegacyArguments = function isArguments(value) {\n\tif (isStandardArguments(value)) {\n\t\treturn true;\n\t}\n\treturn value !== null &&\n\t\ttypeof value === 'object' &&\n\t\ttypeof value.length === 'number' &&\n\t\tvalue.length >= 0 &&\n\t\t$toString(value) !== '[object Array]' &&\n\t\t$toString(value.callee) === '[object Function]';\n};\n\nvar supportsStandardArguments = (function () {\n\treturn isStandardArguments(arguments);\n}());\n\nisStandardArguments.isLegacyArguments = isLegacyArguments; // for tests\n\nmodule.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLHFCQUFxQixtQkFBTyxDQUFDLEdBQXVCO0FBQ3BELGdCQUFnQixtQkFBTyxDQUFDLEdBQXFCOztBQUU3Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCwyREFBMkQ7O0FBRTNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVsZW9weHl6Ly4vbm9kZV9tb2R1bGVzL2lzLWFyZ3VtZW50cy9pbmRleC5qcz9lMzljIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZSgnaGFzLXRvc3RyaW5ndGFnL3NoYW1zJykoKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcblxudmFyIGlzU3RhbmRhcmRBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHRpZiAoaGFzVG9TdHJpbmdUYWcgJiYgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuICR0b1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufTtcblxudmFyIGlzTGVnYWN5QXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0aWYgKGlzU3RhbmRhcmRBcmd1bWVudHModmFsdWUpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIHZhbHVlICE9PSBudWxsICYmXG5cdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0dmFsdWUubGVuZ3RoID49IDAgJiZcblx0XHQkdG9TdHJpbmcodmFsdWUpICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0JHRvU3RyaW5nKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgc3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyA9IChmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBpc1N0YW5kYXJkQXJndW1lbnRzKGFyZ3VtZW50cyk7XG59KCkpO1xuXG5pc1N0YW5kYXJkQXJndW1lbnRzLmlzTGVnYWN5QXJndW1lbnRzID0gaXNMZWdhY3lBcmd1bWVudHM7IC8vIGZvciB0ZXN0c1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMgPyBpc1N0YW5kYXJkQXJndW1lbnRzIDogaXNMZWdhY3lBcmd1bWVudHM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///584\n")},662:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar toStr = Object.prototype.toString;\nvar fnToStr = Function.prototype.toString;\nvar isFnRegex = /^\\s*(?:function)?\\*/;\nvar hasToStringTag = __webpack_require__(410)();\nvar getProto = Object.getPrototypeOf;\nvar getGeneratorFunc = function () { // eslint-disable-line consistent-return\n\tif (!hasToStringTag) {\n\t\treturn false;\n\t}\n\ttry {\n\t\treturn Function('return function*() {}')();\n\t} catch (e) {\n\t}\n};\nvar GeneratorFunction;\n\nmodule.exports = function isGeneratorFunction(fn) {\n\tif (typeof fn !== 'function') {\n\t\treturn false;\n\t}\n\tif (isFnRegex.test(fnToStr.call(fn))) {\n\t\treturn true;\n\t}\n\tif (!hasToStringTag) {\n\t\tvar str = toStr.call(fn);\n\t\treturn str === '[object GeneratorFunction]';\n\t}\n\tif (!getProto) {\n\t\treturn false;\n\t}\n\tif (typeof GeneratorFunction === 'undefined') {\n\t\tvar generatorFunc = getGeneratorFunc();\n\t\tGeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;\n\t}\n\treturn getProto(fn) === GeneratorFunction;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjYyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLEdBQXVCO0FBQ3BEO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3RlbGVvcHh5ei8uL25vZGVfbW9kdWxlcy9pcy1nZW5lcmF0b3ItZnVuY3Rpb24vaW5kZXguanM/MGEzZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciBpc0ZuUmVnZXggPSAvXlxccyooPzpmdW5jdGlvbik/XFwqLztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJ2hhcy10b3N0cmluZ3RhZy9zaGFtcycpKCk7XG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgZ2V0R2VuZXJhdG9yRnVuYyA9IGZ1bmN0aW9uICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHRpZiAoIWhhc1RvU3RyaW5nVGFnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHRyeSB7XG5cdFx0cmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gZnVuY3Rpb24qKCkge30nKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdH1cbn07XG52YXIgR2VuZXJhdG9yRnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNHZW5lcmF0b3JGdW5jdGlvbihmbikge1xuXHRpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmIChpc0ZuUmVnZXgudGVzdChmblRvU3RyLmNhbGwoZm4pKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcpIHtcblx0XHR2YXIgc3RyID0gdG9TdHIuY2FsbChmbik7XG5cdFx0cmV0dXJuIHN0ciA9PT0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJztcblx0fVxuXHRpZiAoIWdldFByb3RvKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmICh0eXBlb2YgR2VuZXJhdG9yRnVuY3Rpb24gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0dmFyIGdlbmVyYXRvckZ1bmMgPSBnZXRHZW5lcmF0b3JGdW5jKCk7XG5cdFx0R2VuZXJhdG9yRnVuY3Rpb24gPSBnZW5lcmF0b3JGdW5jID8gZ2V0UHJvdG8oZ2VuZXJhdG9yRnVuYykgOiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gZ2V0UHJvdG8oZm4pID09PSBHZW5lcmF0b3JGdW5jdGlvbjtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///662\n")},692:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar forEach = __webpack_require__(804);\nvar availableTypedArrays = __webpack_require__(83);\nvar callBound = __webpack_require__(924);\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = __webpack_require__(410)();\n\nvar g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;\nvar typedArrays = availableTypedArrays();\n\nvar $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {\n\tfor (var i = 0; i < array.length; i += 1) {\n\t\tif (array[i] === value) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar gOPD = __webpack_require__(882);\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tvar arr = new g[typedArray]();\n\t\tif (Symbol.toStringTag in arr) {\n\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\tif (!descriptor) {\n\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t}\n\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar anyTrue = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!anyTrue) {\n\t\t\ttry {\n\t\t\t\tanyTrue = getter.call(value) === typedArray;\n\t\t\t} catch (e) { /**/ }\n\t\t}\n\t});\n\treturn anyTrue;\n};\n\nmodule.exports = function isTypedArray(value) {\n\tif (!value || typeof value !== 'object') { return false; }\n\tif (!hasToStringTag || !(Symbol.toStringTag in value)) {\n\t\tvar tag = $slice($toString(value), 8, -1);\n\t\treturn $indexOf(typedArrays, tag) > -1;\n\t}\n\tif (!gOPD) { return false; }\n\treturn tryTypedArrays(value);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjkyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGNBQWMsbUJBQU8sQ0FBQyxHQUFTO0FBQy9CLDJCQUEyQixtQkFBTyxDQUFDLEVBQXdCO0FBQzNELGdCQUFnQixtQkFBTyxDQUFDLEdBQXFCOztBQUU3QztBQUNBLHFCQUFxQixtQkFBTyxDQUFDLEdBQXVCOztBQUVwRCw0Q0FBNEMscUJBQU07QUFDbEQ7O0FBRUE7QUFDQSxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG1CQUFPLENBQUMsR0FBOEM7QUFDakUsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLFlBQVk7QUFDakI7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVsZW9weHl6Ly4vbm9kZV9tb2R1bGVzL2lzLXR5cGVkLWFycmF5L2luZGV4LmpzP2Y0ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJ2ZvcmVhY2gnKTtcbnZhciBhdmFpbGFibGVUeXBlZEFycmF5cyA9IHJlcXVpcmUoJ2F2YWlsYWJsZS10eXBlZC1hcnJheXMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJ2hhcy10b3N0cmluZ3RhZy9zaGFtcycpKCk7XG5cbnZhciBnID0gdHlwZW9mIGdsb2JhbFRoaXMgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogZ2xvYmFsVGhpcztcbnZhciB0eXBlZEFycmF5cyA9IGF2YWlsYWJsZVR5cGVkQXJyYXlzKCk7XG5cbnZhciAkaW5kZXhPZiA9IGNhbGxCb3VuZCgnQXJyYXkucHJvdG90eXBlLmluZGV4T2YnLCB0cnVlKSB8fCBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0aWYgKGFycmF5W2ldID09PSB2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIGk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiAtMTtcbn07XG52YXIgJHNsaWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNsaWNlJyk7XG52YXIgdG9TdHJUYWdzID0ge307XG52YXIgZ09QRCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7IC8vIHJlcXVpcmUoJ2dldHByb3RvdHlwZW9mJyk7XG5pZiAoaGFzVG9TdHJpbmdUYWcgJiYgZ09QRCAmJiBnZXRQcm90b3R5cGVPZikge1xuXHRmb3JFYWNoKHR5cGVkQXJyYXlzLCBmdW5jdGlvbiAodHlwZWRBcnJheSkge1xuXHRcdHZhciBhcnIgPSBuZXcgZ1t0eXBlZEFycmF5XSgpO1xuXHRcdGlmIChTeW1ib2wudG9TdHJpbmdUYWcgaW4gYXJyKSB7XG5cdFx0XHR2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGVPZihhcnIpO1xuXHRcdFx0dmFyIGRlc2NyaXB0b3IgPSBnT1BEKHByb3RvLCBTeW1ib2wudG9TdHJpbmdUYWcpO1xuXHRcdFx0aWYgKCFkZXNjcmlwdG9yKSB7XG5cdFx0XHRcdHZhciBzdXBlclByb3RvID0gZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuXHRcdFx0XHRkZXNjcmlwdG9yID0gZ09QRChzdXBlclByb3RvLCBTeW1ib2wudG9TdHJpbmdUYWcpO1xuXHRcdFx0fVxuXHRcdFx0dG9TdHJUYWdzW3R5cGVkQXJyYXldID0gZGVzY3JpcHRvci5nZXQ7XG5cdFx0fVxuXHR9KTtcbn1cblxudmFyIHRyeVR5cGVkQXJyYXlzID0gZnVuY3Rpb24gdHJ5QWxsVHlwZWRBcnJheXModmFsdWUpIHtcblx0dmFyIGFueVRydWUgPSBmYWxzZTtcblx0Zm9yRWFjaCh0b1N0clRhZ3MsIGZ1bmN0aW9uIChnZXR0ZXIsIHR5cGVkQXJyYXkpIHtcblx0XHRpZiAoIWFueVRydWUpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGFueVRydWUgPSBnZXR0ZXIuY2FsbCh2YWx1ZSkgPT09IHR5cGVkQXJyYXk7XG5cdFx0XHR9IGNhdGNoIChlKSB7IC8qKi8gfVxuXHRcdH1cblx0fSk7XG5cdHJldHVybiBhbnlUcnVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1R5cGVkQXJyYXkodmFsdWUpIHtcblx0aWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoIWhhc1RvU3RyaW5nVGFnIHx8ICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbHVlKSkge1xuXHRcdHZhciB0YWcgPSAkc2xpY2UoJHRvU3RyaW5nKHZhbHVlKSwgOCwgLTEpO1xuXHRcdHJldHVybiAkaW5kZXhPZih0eXBlZEFycmF5cywgdGFnKSA+IC0xO1xuXHR9XG5cdGlmICghZ09QRCkgeyByZXR1cm4gZmFsc2U7IH1cblx0cmV0dXJuIHRyeVR5cGVkQXJyYXlzKHZhbHVlKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///692\n")},824:module=>{eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsV0FBVyxRQUFRO0FBQ25CLFlBQVksT0FBTztBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVsZW9weHl6Ly4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzPzE0NjgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB3ID0gZCAqIDc7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbCkpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///824\n")},470:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/* provided dependency */ var process = __webpack_require__(155);\n// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///470\n")},155:module=>{eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///155\n")},384:module=>{eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3RlbGVvcHh5ei8uL25vZGVfbW9kdWxlcy91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzP2Q2MGEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///384\n")},955:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("// Currently in sync with Node.js lib/internal/util/types.js\n// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9\n\n\n\nvar isArgumentsObject = __webpack_require__(584);\nvar isGeneratorFunction = __webpack_require__(662);\nvar whichTypedArray = __webpack_require__(430);\nvar isTypedArray = __webpack_require__(692);\n\nfunction uncurryThis(f) {\n  return f.call.bind(f);\n}\n\nvar BigIntSupported = typeof BigInt !== 'undefined';\nvar SymbolSupported = typeof Symbol !== 'undefined';\n\nvar ObjectToString = uncurryThis(Object.prototype.toString);\n\nvar numberValue = uncurryThis(Number.prototype.valueOf);\nvar stringValue = uncurryThis(String.prototype.valueOf);\nvar booleanValue = uncurryThis(Boolean.prototype.valueOf);\n\nif (BigIntSupported) {\n  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);\n}\n\nif (SymbolSupported) {\n  var symbolValue = uncurryThis(Symbol.prototype.valueOf);\n}\n\nfunction checkBoxedPrimitive(value, prototypeValueOf) {\n  if (typeof value !== 'object') {\n    return false;\n  }\n  try {\n    prototypeValueOf(value);\n    return true;\n  } catch(e) {\n    return false;\n  }\n}\n\nexports.isArgumentsObject = isArgumentsObject;\nexports.isGeneratorFunction = isGeneratorFunction;\nexports.isTypedArray = isTypedArray;\n\n// Taken from here and modified for better browser support\n// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js\nfunction isPromise(input) {\n\treturn (\n\t\t(\n\t\t\ttypeof Promise !== 'undefined' &&\n\t\t\tinput instanceof Promise\n\t\t) ||\n\t\t(\n\t\t\tinput !== null &&\n\t\t\ttypeof input === 'object' &&\n\t\t\ttypeof input.then === 'function' &&\n\t\t\ttypeof input.catch === 'function'\n\t\t)\n\t);\n}\nexports.isPromise = isPromise;\n\nfunction isArrayBufferView(value) {\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    return ArrayBuffer.isView(value);\n  }\n\n  return (\n    isTypedArray(value) ||\n    isDataView(value)\n  );\n}\nexports.isArrayBufferView = isArrayBufferView;\n\n\nfunction isUint8Array(value) {\n  return whichTypedArray(value) === 'Uint8Array';\n}\nexports.isUint8Array = isUint8Array;\n\nfunction isUint8ClampedArray(value) {\n  return whichTypedArray(value) === 'Uint8ClampedArray';\n}\nexports.isUint8ClampedArray = isUint8ClampedArray;\n\nfunction isUint16Array(value) {\n  return whichTypedArray(value) === 'Uint16Array';\n}\nexports.isUint16Array = isUint16Array;\n\nfunction isUint32Array(value) {\n  return whichTypedArray(value) === 'Uint32Array';\n}\nexports.isUint32Array = isUint32Array;\n\nfunction isInt8Array(value) {\n  return whichTypedArray(value) === 'Int8Array';\n}\nexports.isInt8Array = isInt8Array;\n\nfunction isInt16Array(value) {\n  return whichTypedArray(value) === 'Int16Array';\n}\nexports.isInt16Array = isInt16Array;\n\nfunction isInt32Array(value) {\n  return whichTypedArray(value) === 'Int32Array';\n}\nexports.isInt32Array = isInt32Array;\n\nfunction isFloat32Array(value) {\n  return whichTypedArray(value) === 'Float32Array';\n}\nexports.isFloat32Array = isFloat32Array;\n\nfunction isFloat64Array(value) {\n  return whichTypedArray(value) === 'Float64Array';\n}\nexports.isFloat64Array = isFloat64Array;\n\nfunction isBigInt64Array(value) {\n  return whichTypedArray(value) === 'BigInt64Array';\n}\nexports.isBigInt64Array = isBigInt64Array;\n\nfunction isBigUint64Array(value) {\n  return whichTypedArray(value) === 'BigUint64Array';\n}\nexports.isBigUint64Array = isBigUint64Array;\n\nfunction isMapToString(value) {\n  return ObjectToString(value) === '[object Map]';\n}\nisMapToString.working = (\n  typeof Map !== 'undefined' &&\n  isMapToString(new Map())\n);\n\nfunction isMap(value) {\n  if (typeof Map === 'undefined') {\n    return false;\n  }\n\n  return isMapToString.working\n    ? isMapToString(value)\n    : value instanceof Map;\n}\nexports.isMap = isMap;\n\nfunction isSetToString(value) {\n  return ObjectToString(value) === '[object Set]';\n}\nisSetToString.working = (\n  typeof Set !== 'undefined' &&\n  isSetToString(new Set())\n);\nfunction isSet(value) {\n  if (typeof Set === 'undefined') {\n    return false;\n  }\n\n  return isSetToString.working\n    ? isSetToString(value)\n    : value instanceof Set;\n}\nexports.isSet = isSet;\n\nfunction isWeakMapToString(value) {\n  return ObjectToString(value) === '[object WeakMap]';\n}\nisWeakMapToString.working = (\n  typeof WeakMap !== 'undefined' &&\n  isWeakMapToString(new WeakMap())\n);\nfunction isWeakMap(value) {\n  if (typeof WeakMap === 'undefined') {\n    return false;\n  }\n\n  return isWeakMapToString.working\n    ? isWeakMapToString(value)\n    : value instanceof WeakMap;\n}\nexports.isWeakMap = isWeakMap;\n\nfunction isWeakSetToString(value) {\n  return ObjectToString(value) === '[object WeakSet]';\n}\nisWeakSetToString.working = (\n  typeof WeakSet !== 'undefined' &&\n  isWeakSetToString(new WeakSet())\n);\nfunction isWeakSet(value) {\n  return isWeakSetToString(value);\n}\nexports.isWeakSet = isWeakSet;\n\nfunction isArrayBufferToString(value) {\n  return ObjectToString(value) === '[object ArrayBuffer]';\n}\nisArrayBufferToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  isArrayBufferToString(new ArrayBuffer())\n);\nfunction isArrayBuffer(value) {\n  if (typeof ArrayBuffer === 'undefined') {\n    return false;\n  }\n\n  return isArrayBufferToString.working\n    ? isArrayBufferToString(value)\n    : value instanceof ArrayBuffer;\n}\nexports.isArrayBuffer = isArrayBuffer;\n\nfunction isDataViewToString(value) {\n  return ObjectToString(value) === '[object DataView]';\n}\nisDataViewToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  typeof DataView !== 'undefined' &&\n  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))\n);\nfunction isDataView(value) {\n  if (typeof DataView === 'undefined') {\n    return false;\n  }\n\n  return isDataViewToString.working\n    ? isDataViewToString(value)\n    : value instanceof DataView;\n}\nexports.isDataView = isDataView;\n\n// Store a copy of SharedArrayBuffer in case it's deleted elsewhere\nvar SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;\nfunction isSharedArrayBufferToString(value) {\n  return ObjectToString(value) === '[object SharedArrayBuffer]';\n}\nfunction isSharedArrayBuffer(value) {\n  if (typeof SharedArrayBufferCopy === 'undefined') {\n    return false;\n  }\n\n  if (typeof isSharedArrayBufferToString.working === 'undefined') {\n    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());\n  }\n\n  return isSharedArrayBufferToString.working\n    ? isSharedArrayBufferToString(value)\n    : value instanceof SharedArrayBufferCopy;\n}\nexports.isSharedArrayBuffer = isSharedArrayBuffer;\n\nfunction isAsyncFunction(value) {\n  return ObjectToString(value) === '[object AsyncFunction]';\n}\nexports.isAsyncFunction = isAsyncFunction;\n\nfunction isMapIterator(value) {\n  return ObjectToString(value) === '[object Map Iterator]';\n}\nexports.isMapIterator = isMapIterator;\n\nfunction isSetIterator(value) {\n  return ObjectToString(value) === '[object Set Iterator]';\n}\nexports.isSetIterator = isSetIterator;\n\nfunction isGeneratorObject(value) {\n  return ObjectToString(value) === '[object Generator]';\n}\nexports.isGeneratorObject = isGeneratorObject;\n\nfunction isWebAssemblyCompiledModule(value) {\n  return ObjectToString(value) === '[object WebAssembly.Module]';\n}\nexports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;\n\nfunction isNumberObject(value) {\n  return checkBoxedPrimitive(value, numberValue);\n}\nexports.isNumberObject = isNumberObject;\n\nfunction isStringObject(value) {\n  return checkBoxedPrimitive(value, stringValue);\n}\nexports.isStringObject = isStringObject;\n\nfunction isBooleanObject(value) {\n  return checkBoxedPrimitive(value, booleanValue);\n}\nexports.isBooleanObject = isBooleanObject;\n\nfunction isBigIntObject(value) {\n  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);\n}\nexports.isBigIntObject = isBigIntObject;\n\nfunction isSymbolObject(value) {\n  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);\n}\nexports.isSymbolObject = isSymbolObject;\n\nfunction isBoxedPrimitive(value) {\n  return (\n    isNumberObject(value) ||\n    isStringObject(value) ||\n    isBooleanObject(value) ||\n    isBigIntObject(value) ||\n    isSymbolObject(value)\n  );\n}\nexports.isBoxedPrimitive = isBoxedPrimitive;\n\nfunction isAnyArrayBuffer(value) {\n  return typeof Uint8Array !== 'undefined' && (\n    isArrayBuffer(value) ||\n    isSharedArrayBuffer(value)\n  );\n}\nexports.isAnyArrayBuffer = isAnyArrayBuffer;\n\n['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {\n  Object.defineProperty(exports, method, {\n    enumerable: false,\n    value: function() {\n      throw new Error(method + ' is not supported in userland');\n    }\n  });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///955\n")},539:(__unused_webpack_module,exports,__webpack_require__)=>{eval("/* provided dependency */ var process = __webpack_require__(155);\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnvRegex = /^$/;\n\nif (process.env.NODE_DEBUG) {\n  var debugEnv = process.env.NODE_DEBUG;\n  debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\n    .replace(/\\*/g, '.*')\n    .replace(/,/g, '$|^')\n    .toUpperCase();\n  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');\n}\nexports.debuglog = function(set) {\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (debugEnvRegex.test(set)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexports.types = __webpack_require__(955);\n\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\nexports.types.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\nexports.types.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\nexports.types.isNativeError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(384);\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(717);\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },\n            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///539\n")},430:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar forEach = __webpack_require__(804);\nvar availableTypedArrays = __webpack_require__(83);\nvar callBound = __webpack_require__(924);\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = __webpack_require__(410)();\n\nvar g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;\nvar typedArrays = availableTypedArrays();\n\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar gOPD = __webpack_require__(882);\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tif (typeof g[typedArray] === 'function') {\n\t\t\tvar arr = new g[typedArray]();\n\t\t\tif (Symbol.toStringTag in arr) {\n\t\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\t\tif (!descriptor) {\n\t\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t\t}\n\t\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t\t}\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar foundName = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!foundName) {\n\t\t\ttry {\n\t\t\t\tvar name = getter.call(value);\n\t\t\t\tif (name === typedArray) {\n\t\t\t\t\tfoundName = name;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\t\t}\n\t});\n\treturn foundName;\n};\n\nvar isTypedArray = __webpack_require__(692);\n\nmodule.exports = function whichTypedArray(value) {\n\tif (!isTypedArray(value)) { return false; }\n\tif (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }\n\treturn tryTypedArrays(value);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGNBQWMsbUJBQU8sQ0FBQyxHQUFTO0FBQy9CLDJCQUEyQixtQkFBTyxDQUFDLEVBQXdCO0FBQzNELGdCQUFnQixtQkFBTyxDQUFDLEdBQXFCOztBQUU3QztBQUNBLHFCQUFxQixtQkFBTyxDQUFDLEdBQXVCOztBQUVwRCw0Q0FBNEMscUJBQU07QUFDbEQ7O0FBRUE7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyxHQUE4QztBQUNqRSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQSxtQkFBbUIsbUJBQU8sQ0FBQyxHQUFnQjs7QUFFM0M7QUFDQSw2QkFBNkI7QUFDN0IsMERBQTBEO0FBQzFEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWxlb3B4eXovLi9ub2RlX21vZHVsZXMvd2hpY2gtdHlwZWQtYXJyYXkvaW5kZXguanM/ZWRjNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnZm9yZWFjaCcpO1xudmFyIGF2YWlsYWJsZVR5cGVkQXJyYXlzID0gcmVxdWlyZSgnYXZhaWxhYmxlLXR5cGVkLWFycmF5cycpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcblxudmFyICR0b1N0cmluZyA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZycpO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZSgnaGFzLXRvc3RyaW5ndGFnL3NoYW1zJykoKTtcblxudmFyIGcgPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiBnbG9iYWxUaGlzO1xudmFyIHR5cGVkQXJyYXlzID0gYXZhaWxhYmxlVHlwZWRBcnJheXMoKTtcblxudmFyICRzbGljZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zbGljZScpO1xudmFyIHRvU3RyVGFncyA9IHt9O1xudmFyIGdPUEQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2dldE93blByb3BlcnR5RGVzY3JpcHRvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mOyAvLyByZXF1aXJlKCdnZXRwcm90b3R5cGVvZicpO1xuaWYgKGhhc1RvU3RyaW5nVGFnICYmIGdPUEQgJiYgZ2V0UHJvdG90eXBlT2YpIHtcblx0Zm9yRWFjaCh0eXBlZEFycmF5cywgZnVuY3Rpb24gKHR5cGVkQXJyYXkpIHtcblx0XHRpZiAodHlwZW9mIGdbdHlwZWRBcnJheV0gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHZhciBhcnIgPSBuZXcgZ1t0eXBlZEFycmF5XSgpO1xuXHRcdFx0aWYgKFN5bWJvbC50b1N0cmluZ1RhZyBpbiBhcnIpIHtcblx0XHRcdFx0dmFyIHByb3RvID0gZ2V0UHJvdG90eXBlT2YoYXJyKTtcblx0XHRcdFx0dmFyIGRlc2NyaXB0b3IgPSBnT1BEKHByb3RvLCBTeW1ib2wudG9TdHJpbmdUYWcpO1xuXHRcdFx0XHRpZiAoIWRlc2NyaXB0b3IpIHtcblx0XHRcdFx0XHR2YXIgc3VwZXJQcm90byA9IGdldFByb3RvdHlwZU9mKHByb3RvKTtcblx0XHRcdFx0XHRkZXNjcmlwdG9yID0gZ09QRChzdXBlclByb3RvLCBTeW1ib2wudG9TdHJpbmdUYWcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRvU3RyVGFnc1t0eXBlZEFycmF5XSA9IGRlc2NyaXB0b3IuZ2V0O1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbnZhciB0cnlUeXBlZEFycmF5cyA9IGZ1bmN0aW9uIHRyeUFsbFR5cGVkQXJyYXlzKHZhbHVlKSB7XG5cdHZhciBmb3VuZE5hbWUgPSBmYWxzZTtcblx0Zm9yRWFjaCh0b1N0clRhZ3MsIGZ1bmN0aW9uIChnZXR0ZXIsIHR5cGVkQXJyYXkpIHtcblx0XHRpZiAoIWZvdW5kTmFtZSkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dmFyIG5hbWUgPSBnZXR0ZXIuY2FsbCh2YWx1ZSk7XG5cdFx0XHRcdGlmIChuYW1lID09PSB0eXBlZEFycmF5KSB7XG5cdFx0XHRcdFx0Zm91bmROYW1lID0gbmFtZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gZm91bmROYW1lO1xufTtcblxudmFyIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJ2lzLXR5cGVkLWFycmF5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSB7XG5cdGlmICghaXNUeXBlZEFycmF5KHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKCFoYXNUb1N0cmluZ1RhZyB8fCAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSkpIHsgcmV0dXJuICRzbGljZSgkdG9TdHJpbmcodmFsdWUpLCA4LCAtMSk7IH1cblx0cmV0dXJuIHRyeVR5cGVkQXJyYXlzKHZhbHVlKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///430\n")},391:function(__unused_webpack_module,exports,__webpack_require__){eval("(function() {\n  var MarkedYAMLError, events, nodes;\n\n  events = __webpack_require__(63);\n\n  ({MarkedYAMLError} = __webpack_require__(372));\n\n  nodes = __webpack_require__(914);\n\n  /*\n  Thrown for errors encountered during composing.\n  */\n  this.ComposerError = class ComposerError extends MarkedYAMLError {};\n\n  /*\n  The composer class handles the construction of representation trees from events.\n\n  This uses the methods from {Parser} to process the event stream, and provides a similar stream-like\n  interface to representation trees via {Composer#check_node}, {Composer#get_node}, and\n  {Composer#get_single_node}.\n  */\n  this.Composer = (function() {\n    var ctor;\n\n    class Composer {\n      constructor() {\n        return ctor.apply(this, arguments);\n      }\n\n      /*\n      Initialise a `Composer` instance.\n      */\n      initialise() {\n        // @property {Object} A mapping from anchor names to nodes.\n        return this.anchors = {};\n      }\n\n      /*\n      Checks if a document can be composed from the event stream.\n\n      So long as the event stream hasn't ended (no [StreamEndEvent]), another document can be composed.\n\n      @return {Boolean} True if a document can be composed, false otherwise.\n      */\n      check_node() {\n        if (this.check_event(events.StreamStartEvent)) {\n          // Drop the STREAM-START event.\n          this.get_event();\n        }\n        // Are there more documents available?\n        return !this.check_event(events.StreamEndEvent);\n      }\n\n      /*\n      Compose a document from the remaining event stream.\n\n      {Composer#check_node} must be called before calling this method.\n\n      @return {Node} The next document in the stream. Returns `undefined` if the event stream has ended.\n      */\n      get_node() {\n        if (!this.check_event(events.StreamEndEvent)) {\n          return this.compose_document();\n        }\n      }\n\n      /*\n      Compose a single document from the entire event stream.\n\n      @throw {ComposerError} if there's more than one document is in the stream.\n\n      @return {Node} The single document in the stream.\n      */\n      get_single_node() {\n        var document, event;\n        // Drop the STREAM-START event.\n        this.get_event();\n        // Compose a document if the stream is not empty.\n        document = null;\n        if (!this.check_event(events.StreamEndEvent)) {\n          document = this.compose_document();\n        }\n        // Ensure that the stream contains no more documents.\n        if (!this.check_event(events.StreamEndEvent)) {\n          event = this.get_event();\n          throw new exports.ComposerError('expected a single document in the stream', document.start_mark, 'but found another document', event.start_mark);\n        }\n        // Drop the STREAM-END event.\n        this.get_event();\n        return document;\n      }\n\n      /*\n      Compose a document node from the event stream.\n\n      A 'document' node is any single {Node} subclass.  {DocumentStart} and {DocumentEnd} events delimit\n      the events used for composition.\n\n      @private\n\n      @return {Node} The document node.\n      */\n      compose_document() {\n        var node;\n        // Drop the DOCUMENT-START event.\n        this.get_event();\n        // Compose the root node.\n        node = this.compose_node();\n        // Drop the DOCUMENT-END node.\n        this.get_event();\n        // Reset the anchors\n        this.anchors = {};\n        return node;\n      }\n\n      /*\n      Compose a node from the event stream.\n\n      Composes a {ScalarNode}, {SequenceNode}, or {MappingNode} from the event stream, depending on the\n      first event encountered ({ScalarEvent}, {SequenceStartEvent}, or {MappingStartEvent}\n      respectively).\n\n      @private\n\n      @param parent {Node} The parent of the new node.\n      @param index {Number} The index of the new node within the parent's children.\n      @throw {ComposerError} if an alias is encountered for an undefined anchor.\n      @throw {ComposerError} if a duplicate anchor is envountered.\n      @return {Node} The composed node.\n      */\n      compose_node(parent, index) {\n        var anchor, event, node;\n        if (this.check_event(events.AliasEvent)) {\n          event = this.get_event();\n          anchor = event.anchor;\n          if (!(anchor in this.anchors)) {\n            throw new exports.ComposerError(null, null, `found undefined alias ${anchor}`, event.start_mark);\n          }\n          return this.anchors[anchor];\n        }\n        event = this.peek_event();\n        anchor = event.anchor;\n        if (anchor !== null && anchor in this.anchors) {\n          throw new exports.ComposerError(`found duplicate anchor ${anchor}; first occurence`, this.anchors[anchor].start_mark, 'second occurrence', event.start_mark);\n        }\n        this.descend_resolver(parent, index);\n        if (this.check_event(events.ScalarEvent)) {\n          node = this.compose_scalar_node(anchor);\n        } else if (this.check_event(events.SequenceStartEvent)) {\n          node = this.compose_sequence_node(anchor);\n        } else if (this.check_event(events.MappingStartEvent)) {\n          node = this.compose_mapping_node(anchor);\n        }\n        this.ascend_resolver();\n        return node;\n      }\n\n      /*\n      Compose a {ScalarNode} from the event stream.\n\n      @private\n\n      @param anchor {String} The anchor name for the node (if any).\n      @return {ScalarNode} The node composed from a {ScalarEvent}.\n      */\n      compose_scalar_node(anchor) {\n        var event, node, tag;\n        event = this.get_event();\n        tag = event.tag;\n        if (tag === null || tag === '!') {\n          tag = this.resolve(nodes.ScalarNode, event.value, event.implicit);\n        }\n        node = new nodes.ScalarNode(tag, event.value, event.start_mark, event.end_mark, event.style);\n        if (anchor !== null) {\n          this.anchors[anchor] = node;\n        }\n        return node;\n      }\n\n      /*\n      Compose a {SequenceNode} from the event stream.\n\n      The contents of the node are composed from events between a {SequenceStartEvent} and a\n      {SequenceEndEvent}.\n\n      @private\n\n      @param anchor {String} The anchor name for the node (if any).\n      @return {SequenceNode} The composed node.\n      */\n      compose_sequence_node(anchor) {\n        var end_event, index, node, start_event, tag;\n        start_event = this.get_event();\n        tag = start_event.tag;\n        if (tag === null || tag === '!') {\n          tag = this.resolve(nodes.SequenceNode, null, start_event.implicit);\n        }\n        node = new nodes.SequenceNode(tag, [], start_event.start_mark, null, start_event.flow_style);\n        if (anchor !== null) {\n          this.anchors[anchor] = node;\n        }\n        index = 0;\n        while (!this.check_event(events.SequenceEndEvent)) {\n          node.value.push(this.compose_node(node, index));\n          index++;\n        }\n        end_event = this.get_event();\n        node.end_mark = end_event.end_mark;\n        return node;\n      }\n\n      /*\n      Compose a {MappingNode} from the event stream.\n\n      The contents of the node are composed from events between a {MappingStartEvent} and a\n      {MappingEndEvent}.\n\n      @private\n\n      @param anchor {String} The anchor name for the node (if any).\n      @return {MappingNode} The composed node.\n      */\n      compose_mapping_node(anchor) {\n        var end_event, item_key, item_value, node, start_event, tag;\n        start_event = this.get_event();\n        tag = start_event.tag;\n        if (tag === null || tag === '!') {\n          tag = this.resolve(nodes.MappingNode, null, start_event.implicit);\n        }\n        node = new nodes.MappingNode(tag, [], start_event.start_mark, null, start_event.flow_style);\n        if (anchor !== null) {\n          this.anchors[anchor] = node;\n        }\n        while (!this.check_event(events.MappingEndEvent)) {\n          item_key = this.compose_node(node);\n          item_value = this.compose_node(node, item_key);\n          node.value.push([item_key, item_value]);\n        }\n        end_event = this.get_event();\n        node.end_mark = end_event.end_mark;\n        return node;\n      }\n\n    };\n\n    ctor = Composer.prototype.initialise;\n\n    return Composer;\n\n  }).call(this);\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///391\n")},574:function(__unused_webpack_module,exports,__webpack_require__){eval("(function() {\n  var MarkedYAMLError, nodes, util,\n    indexOf = [].indexOf;\n\n  ({MarkedYAMLError} = __webpack_require__(372));\n\n  nodes = __webpack_require__(914);\n\n  util = __webpack_require__(823);\n\n  /*\n  Thrown for errors encountered during construction.\n  */\n  this.ConstructorError = class ConstructorError extends MarkedYAMLError {};\n\n  /*\n  The constructor class handles the construction of Javascript objects from representation trees\n  ({Node}s).\n\n  This uses the methods from {Composer} to process the representation stream, and provides a similar\n  stream-like interface to Javascript objects via {BaseConstructor#check_node},\n  {BaseConstructor#get_node}, and {BaseConstructor#get_single_node}.\n  */\n  this.BaseConstructor = (function() {\n    var ctor;\n\n    class BaseConstructor {\n      constructor() {\n        return ctor.apply(this, arguments);\n      }\n\n      /*\n      Add a constructor function for a specific tag.\n\n      The constructor will be used to turn {Node Nodes} with the given tag into a Javascript object.\n\n      @param tag {String} The tag for which the constructor should apply.\n      @param constructor {Function<Node,any>} A function that turns a {Node} with the given tag into a\n        Javascript object.\n      @return {Function<Node,Any>} Returns the supplied `constructor`.\n      */\n      static add_constructor(tag, constructor) {\n        if (!this.prototype.hasOwnProperty('yaml_constructors')) {\n          this.prototype.yaml_constructors = util.extend({}, this.prototype.yaml_constructors);\n        }\n        return this.prototype.yaml_constructors[tag] = constructor;\n      }\n\n      /*\n      Add a constructor function for a tag prefix.\n\n      The constructor will be used to turn {Node Nodes} with the given tag prefix into a Javascript\n      object.\n\n      @param tag_prefix {String} The tag prefix for which the constructor should apply.\n      @param multi_constructor {Function<Node,any>} A function that turns a {Node} with the given tag\n      prefix into a Javascript object.\n      @return {Function<Node,Any>} Returns the supplied `multi_constructor`.\n      */\n      static add_multi_constructor(tag_prefix, multi_constructor) {\n        if (!this.prototype.hasOwnProperty('yaml_multi_constructors')) {\n          this.prototype.yaml_multi_constructors = util.extend({}, this.prototype.yaml_multi_constructors);\n        }\n        return this.prototype.yaml_multi_constructors[tag_prefix] = multi_constructor;\n      }\n\n      /*\n      Initialise a new instance.\n      */\n      initialise() {\n        // @param {Object} A map from {Node#unique_id} to the constructed Javascript object for the node.\n        this.constructed_objects = {};\n        // @param {Array<String>} An array of {Node#unique_id}s that are being constructed.\n        this.constructing_nodes = [];\n        // @param {Function<any>} An array of functions to be exectied after docmuent construction.\n        return this.deferred_constructors = [];\n      }\n\n      /*\n      Checks if a document can be constructed from the representation stream.\n\n      So long as the representation stream hasn't ended, another document can be constructed.\n\n      @return {Boolean} True if a document can be constructed, false otherwise.\n      */\n      check_data() {\n        return this.check_node();\n      }\n\n      /*\n      Construct a document from the remaining representation stream.\n\n      {Constructor#check_data} must be called before calling this method.\n\n      @return {any} The next document in the stream. Returns `undefined` if the stream has ended.\n      */\n      get_data() {\n        if (this.check_node()) {\n          return this.construct_document(this.get_node());\n        }\n      }\n\n      /*\n      Construct a single document from the entire representation stream.\n\n      @throw {ComposerError} if there's more than one document is in the stream.\n\n      @return {Node} The single document in the stream.\n      */\n      get_single_data() {\n        var node;\n        node = this.get_single_node();\n        if (node != null) {\n          return this.construct_document(node);\n        }\n        return null;\n      }\n\n      /*\n      Construct a document node\n\n      @private\n      */\n      construct_document(node) {\n        var data;\n        data = this.construct_object(node);\n        while (!util.is_empty(this.deferred_constructors)) {\n          this.deferred_constructors.pop()();\n        }\n        return data;\n      }\n\n      defer(f) {\n        return this.deferred_constructors.push(f);\n      }\n\n      construct_object(node) {\n        var constructor, object, ref, tag_prefix, tag_suffix;\n        if (node.unique_id in this.constructed_objects) {\n          return this.constructed_objects[node.unique_id];\n        }\n        if (ref = node.unique_id, indexOf.call(this.constructing_nodes, ref) >= 0) {\n          throw new exports.ConstructorError(null, null, 'found unconstructable recursive node', node.start_mark);\n        }\n        this.constructing_nodes.push(node.unique_id);\n        constructor = null;\n        tag_suffix = null;\n        if (node.tag in this.yaml_constructors) {\n          constructor = this.yaml_constructors[node.tag];\n        } else {\n          for (tag_prefix in this.yaml_multi_constructors) {\n            if (node.tag.indexOf(tag_prefix === 0)) {\n              tag_suffix = node.tag.slice(tag_prefix.length);\n              constructor = this.yaml_multi_constructors[tag_prefix];\n              break;\n            }\n          }\n          if (constructor == null) {\n            if (null in this.yaml_multi_constructors) {\n              tag_suffix = node.tag;\n              constructor = this.yaml_multi_constructors[null];\n            } else if (null in this.yaml_constructors) {\n              constructor = this.yaml_constructors[null];\n            } else if (node instanceof nodes.ScalarNode) {\n              constructor = this.construct_scalar;\n            } else if (node instanceof nodes.SequenceNode) {\n              constructor = this.construct_sequence;\n            } else if (node instanceof nodes.MappingNode) {\n              constructor = this.construct_mapping;\n            }\n          }\n        }\n        object = constructor.call(this, tag_suffix != null ? tag_suffix : node, node);\n        this.constructed_objects[node.unique_id] = object;\n        this.constructing_nodes.pop();\n        return object;\n      }\n\n      construct_scalar(node) {\n        if (!(node instanceof nodes.ScalarNode)) {\n          throw new exports.ConstructorError(null, null, `expected a scalar node but found ${node.id}`, node.start_mark);\n        }\n        return node.value;\n      }\n\n      construct_sequence(node) {\n        var child, i, len, ref, results;\n        if (!(node instanceof nodes.SequenceNode)) {\n          throw new exports.ConstructorError(null, null, `expected a sequence node but found ${node.id}`, node.start_mark);\n        }\n        ref = node.value;\n        results = [];\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          results.push(this.construct_object(child));\n        }\n        return results;\n      }\n\n      construct_mapping(node) {\n        var i, key, key_node, len, mapping, ref, value, value_node;\n        if (!(node instanceof nodes.MappingNode)) {\n          throw new ConstructorError(null, null, `expected a mapping node but found ${node.id}`, node.start_mark);\n        }\n        mapping = {};\n        ref = node.value;\n        for (i = 0, len = ref.length; i < len; i++) {\n          [key_node, value_node] = ref[i];\n          key = this.construct_object(key_node);\n          if (typeof key === 'object') {\n            throw new exports.ConstructorError('while constructing a mapping', node.start_mark, 'found unhashable key', key_node.start_mark);\n          }\n          value = this.construct_object(value_node);\n          mapping[key] = value;\n        }\n        return mapping;\n      }\n\n      construct_pairs(node) {\n        var i, key, key_node, len, pairs, ref, value, value_node;\n        if (!(node instanceof nodes.MappingNode)) {\n          throw new exports.ConstructorError(null, null, `expected a mapping node but found ${node.id}`, node.start_mark);\n        }\n        pairs = [];\n        ref = node.value;\n        for (i = 0, len = ref.length; i < len; i++) {\n          [key_node, value_node] = ref[i];\n          key = this.construct_object(key_node);\n          value = this.construct_object(value_node);\n          pairs.push([key, value]);\n        }\n        return pairs;\n      }\n\n    };\n\n    /*\n    @property {Object} A map from a YAML tag to a constructor function for data with that tag.\n    @private\n    */\n    BaseConstructor.prototype.yaml_constructors = {};\n\n    /*\n    @property {Object} A map from a YAML tag prefix to a constructor function for data with that tag\n                       prefix.\n    @private\n    */\n    BaseConstructor.prototype.yaml_multi_constructors = {};\n\n    ctor = BaseConstructor.prototype.initialise;\n\n    return BaseConstructor;\n\n  }).call(this);\n\n  this.Constructor = (function() {\n    var BOOL_VALUES, TIMESTAMP_PARTS, TIMESTAMP_REGEX;\n\n    class Constructor extends this.BaseConstructor {\n      construct_scalar(node) {\n        var i, key_node, len, ref, value_node;\n        if (node instanceof nodes.MappingNode) {\n          ref = node.value;\n          for (i = 0, len = ref.length; i < len; i++) {\n            [key_node, value_node] = ref[i];\n            if (key_node.tag === 'tag:yaml.org,2002:value') {\n              return this.construct_scalar(value_node);\n            }\n          }\n        }\n        return super.construct_scalar(node);\n      }\n\n      flatten_mapping(node) {\n        var i, index, j, key_node, len, len1, merge, ref, submerge, subnode, value, value_node;\n        merge = [];\n        index = 0;\n        while (index < node.value.length) {\n          [key_node, value_node] = node.value[index];\n          if (key_node.tag === 'tag:yaml.org,2002:merge') {\n            node.value.splice(index, 1);\n            //delete node.value[index]\n            if (value_node instanceof nodes.MappingNode) {\n              this.flatten_mapping(value_node);\n              merge = merge.concat(value_node.value);\n            } else if (value_node instanceof nodes.SequenceNode) {\n              submerge = [];\n              ref = value_node.value;\n              for (i = 0, len = ref.length; i < len; i++) {\n                subnode = ref[i];\n                if (!(subnode instanceof nodes.MappingNode)) {\n                  throw new exports.ConstructorError('while constructing a mapping', node.start_mark, `expected a mapping for merging, but found ${subnode.id}`, subnode.start_mark);\n                }\n                this.flatten_mapping(subnode);\n                submerge.push(subnode.value);\n              }\n              submerge.reverse();\n              for (j = 0, len1 = submerge.length; j < len1; j++) {\n                value = submerge[j];\n                merge = merge.concat(value);\n              }\n            } else {\n              throw new exports.ConstructorError('while constructing a mapping', node.start_mark, `expected a mapping or list of mappings for merging but found ${value_node.id}`, value_node.start_mark);\n            }\n          } else if (key_node.tag === 'tag:yaml.org,2002:value') {\n            key_node.tag = 'tag:yaml.org,2002:str';\n            index++;\n          } else {\n            index++;\n          }\n        }\n        if (merge.length) {\n          return node.value = merge.concat(node.value);\n        }\n      }\n\n      construct_mapping(node) {\n        if (node instanceof nodes.MappingNode) {\n          this.flatten_mapping(node);\n        }\n        return super.construct_mapping(node);\n      }\n\n      construct_yaml_null(node) {\n        this.construct_scalar(node);\n        return null;\n      }\n\n      construct_yaml_bool(node) {\n        var value;\n        value = this.construct_scalar(node);\n        return BOOL_VALUES[value.toLowerCase()];\n      }\n\n      construct_yaml_int(node) {\n        var base, digit, digits, i, len, part, ref, sign, value;\n        value = this.construct_scalar(node);\n        value = value.replace(/_/g, '');\n        sign = value[0] === '-' ? -1 : 1;\n        if (ref = value[0], indexOf.call('+-', ref) >= 0) {\n          value = value.slice(1);\n        }\n        if (value === '0') {\n          return 0;\n        } else if (value.indexOf('0b') === 0) {\n          return sign * parseInt(value.slice(2), 2);\n        } else if (value.indexOf('0x') === 0) {\n          return sign * parseInt(value.slice(2), 16);\n        } else if (value.indexOf('0o') === 0) {\n          return sign * parseInt(value.slice(2), 8);\n        } else if (value[0] === '0') {\n          return sign * parseInt(value, 8);\n        } else if (indexOf.call(value, ':') >= 0) {\n          digits = (function() {\n            var i, len, ref1, results;\n            ref1 = value.split(/:/g);\n            results = [];\n            for (i = 0, len = ref1.length; i < len; i++) {\n              part = ref1[i];\n              results.push(parseInt(part));\n            }\n            return results;\n          })();\n          digits.reverse();\n          base = 1;\n          value = 0;\n          for (i = 0, len = digits.length; i < len; i++) {\n            digit = digits[i];\n            value += digit * base;\n            base *= 60;\n          }\n          return sign * value;\n        } else {\n          return sign * parseInt(value);\n        }\n      }\n\n      construct_yaml_float(node) {\n        var base, digit, digits, i, len, part, ref, sign, value;\n        value = this.construct_scalar(node);\n        value = value.replace(/_/g, '').toLowerCase();\n        sign = value[0] === '-' ? -1 : 1;\n        if (ref = value[0], indexOf.call('+-', ref) >= 0) {\n          value = value.slice(1);\n        }\n        if (value === '.inf') {\n          return sign * 2e308;\n        } else if (value === '.nan') {\n          return 0/0;\n        } else if (indexOf.call(value, ':') >= 0) {\n          digits = (function() {\n            var i, len, ref1, results;\n            ref1 = value.split(/:/g);\n            results = [];\n            for (i = 0, len = ref1.length; i < len; i++) {\n              part = ref1[i];\n              results.push(parseFloat(part));\n            }\n            return results;\n          })();\n          digits.reverse();\n          base = 1;\n          value = 0.0;\n          for (i = 0, len = digits.length; i < len; i++) {\n            digit = digits[i];\n            value += digit * base;\n            base *= 60;\n          }\n          return sign * value;\n        } else {\n          return sign * parseFloat(value);\n        }\n      }\n\n      construct_yaml_binary(node) {\n        var error, value;\n        value = this.construct_scalar(node);\n        try {\n          if (typeof window !== \"undefined\" && window !== null) {\n            return atob(value);\n          }\n          return new Buffer(value, 'base64').toString('ascii');\n        } catch (error1) {\n          error = error1;\n          throw new exports.ConstructorError(null, null, `failed to decode base64 data: ${error}`, node.start_mark);\n        }\n      }\n\n      construct_yaml_timestamp(node) {\n        var date, day, fraction, hour, index, key, match, millisecond, minute, month, second, tz_hour, tz_minute, tz_sign, value, values, year;\n        value = this.construct_scalar(node);\n        match = node.value.match(TIMESTAMP_REGEX);\n        values = {};\n        for (key in TIMESTAMP_PARTS) {\n          index = TIMESTAMP_PARTS[key];\n          values[key] = match[index];\n        }\n        year = parseInt(values.year);\n        month = parseInt(values.month) - 1;\n        day = parseInt(values.day);\n        if (!values.hour) {\n          return new Date(Date.UTC(year, month, day));\n        }\n        hour = parseInt(values.hour);\n        minute = parseInt(values.minute);\n        second = parseInt(values.second);\n        millisecond = 0;\n        if (values.fraction) {\n          fraction = values.fraction.slice(0, 6);\n          while (fraction.length < 6) {\n            fraction += '0';\n          }\n          fraction = parseInt(fraction);\n          millisecond = Math.round(fraction / 1000);\n        }\n        if (values.tz_sign) {\n          tz_sign = values.tz_sign === '-' ? 1 : -1;\n          if (tz_hour = parseInt(values.tz_hour)) {\n            hour += tz_sign * tz_hour;\n          }\n          if (tz_minute = parseInt(values.tz_minute)) {\n            minute += tz_sign * tz_minute;\n          }\n        }\n        date = new Date(Date.UTC(year, month, day, hour, minute, second, millisecond));\n        return date;\n      }\n\n      construct_yaml_pair_list(type, node) {\n        var list;\n        list = [];\n        if (!(node instanceof nodes.SequenceNode)) {\n          throw new exports.ConstructorError(`while constructing ${type}`, node.start_mark, `expected a sequence but found ${node.id}`, node.start_mark);\n        }\n        this.defer(() => {\n          var i, key, key_node, len, ref, results, subnode, value, value_node;\n          ref = node.value;\n          results = [];\n          for (i = 0, len = ref.length; i < len; i++) {\n            subnode = ref[i];\n            if (!(subnode instanceof nodes.MappingNode)) {\n              throw new exports.ConstructorError(`while constructing ${type}`, node.start_mark, `expected a mapping of length 1 but found ${subnode.id}`, subnode.start_mark);\n            }\n            if (subnode.value.length !== 1) {\n              throw new exports.ConstructorError(`while constructing ${type}`, node.start_mark, `expected a mapping of length 1 but found ${subnode.id}`, subnode.start_mark);\n            }\n            [key_node, value_node] = subnode.value[0];\n            key = this.construct_object(key_node);\n            value = this.construct_object(value_node);\n            results.push(list.push([key, value]));\n          }\n          return results;\n        });\n        return list;\n      }\n\n      construct_yaml_omap(node) {\n        return this.construct_yaml_pair_list('an ordered map', node);\n      }\n\n      construct_yaml_pairs(node) {\n        return this.construct_yaml_pair_list('pairs', node);\n      }\n\n      construct_yaml_set(node) {\n        var data;\n        data = [];\n        this.defer(() => {\n          var item, results;\n          results = [];\n          for (item in this.construct_mapping(node)) {\n            results.push(data.push(item));\n          }\n          return results;\n        });\n        return data;\n      }\n\n      construct_yaml_str(node) {\n        return this.construct_scalar(node);\n      }\n\n      construct_yaml_seq(node) {\n        var data;\n        data = [];\n        this.defer(() => {\n          var i, item, len, ref, results;\n          ref = this.construct_sequence(node);\n          results = [];\n          for (i = 0, len = ref.length; i < len; i++) {\n            item = ref[i];\n            results.push(data.push(item));\n          }\n          return results;\n        });\n        return data;\n      }\n\n      construct_yaml_map(node) {\n        var data;\n        data = {};\n        this.defer(() => {\n          var key, ref, results, value;\n          ref = this.construct_mapping(node);\n          results = [];\n          for (key in ref) {\n            value = ref[key];\n            results.push(data[key] = value);\n          }\n          return results;\n        });\n        return data;\n      }\n\n      construct_yaml_object(node, klass) {\n        var data;\n        data = new klass;\n        this.defer(() => {\n          var key, ref, results, value;\n          ref = this.construct_mapping(node, true);\n          results = [];\n          for (key in ref) {\n            value = ref[key];\n            results.push(data[key] = value);\n          }\n          return results;\n        });\n        return data;\n      }\n\n      construct_undefined(node) {\n        throw new exports.ConstructorError(null, null, `could not determine a constructor for the tag ${node.tag}`, node.start_mark);\n      }\n\n    };\n\n    BOOL_VALUES = {\n      on: true,\n      off: false,\n      true: true,\n      false: false,\n      yes: true,\n      no: false\n    };\n\n    TIMESTAMP_REGEX = /^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:(?:[Tt]|[\\x20\\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[\\x20\\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?)?$/; //  1: year\n    //  2: month\n    //  3: day\n    //  4: hour\n    //  5: minute\n    //  6: second\n    //  7: fraction\n    //  9: tz_sign\n    // 10: tz_hour\n    // 11: tz_minute\n    //  8: tz\n\n    TIMESTAMP_PARTS = {\n      year: 1,\n      month: 2,\n      day: 3,\n      hour: 4,\n      minute: 5,\n      second: 6,\n      fraction: 7,\n      tz: 8,\n      tz_sign: 9,\n      tz_hour: 10,\n      tz_minute: 11\n    };\n\n    return Constructor;\n\n  }).call(this);\n\n  this.Constructor.add_constructor('tag:yaml.org,2002:null', this.Constructor.prototype.construct_yaml_null);\n\n  this.Constructor.add_constructor('tag:yaml.org,2002:bool', this.Constructor.prototype.construct_yaml_bool);\n\n  this.Constructor.add_constructor('tag:yaml.org,2002:int', this.Constructor.prototype.construct_yaml_int);\n\n  this.Constructor.add_constructor('tag:yaml.org,2002:float', this.Constructor.prototype.construct_yaml_float);\n\n  this.Constructor.add_constructor('tag:yaml.org,2002:binary', this.Constructor.prototype.construct_yaml_binary);\n\n  this.Constructor.add_constructor('tag:yaml.org,2002:timestamp', this.Constructor.prototype.construct_yaml_timestamp);\n\n  this.Constructor.add_constructor('tag:yaml.org,2002:omap', this.Constructor.prototype.construct_yaml_omap);\n\n  this.Constructor.add_constructor('tag:yaml.org,2002:pairs', this.Constructor.prototype.construct_yaml_pairs);\n\n  this.Constructor.add_constructor('tag:yaml.org,2002:set', this.Constructor.prototype.construct_yaml_set);\n\n  this.Constructor.add_constructor('tag:yaml.org,2002:str', this.Constructor.prototype.construct_yaml_str);\n\n  this.Constructor.add_constructor('tag:yaml.org,2002:seq', this.Constructor.prototype.construct_yaml_seq);\n\n  this.Constructor.add_constructor('tag:yaml.org,2002:map', this.Constructor.prototype.construct_yaml_map);\n\n  this.Constructor.add_constructor(null, this.Constructor.prototype.construct_undefined);\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///574\n")},190:function(__unused_webpack_module,__unused_webpack_exports,__webpack_require__){eval("(function() {\n  var emitter, representer, resolver, serializer, util;\n\n  util = __webpack_require__(823);\n\n  emitter = __webpack_require__(320);\n\n  serializer = __webpack_require__(472);\n\n  representer = __webpack_require__(832);\n\n  resolver = __webpack_require__(579);\n\n  this.make_dumper = function(Emitter = emitter.Emitter, Serializer = serializer.Serializer, Representer = representer.Representer, Resolver = resolver.Resolver) {\n    var Dumper, components;\n    components = [Emitter, Serializer, Representer, Resolver];\n    return Dumper = (function() {\n      var component;\n\n      class Dumper {\n        constructor(stream, options = {}) {\n          var i, len, ref;\n          components[0].prototype.initialise.call(this, stream, options);\n          ref = components.slice(1);\n          for (i = 0, len = ref.length; i < len; i++) {\n            component = ref[i];\n            component.prototype.initialise.call(this, options);\n          }\n        }\n\n      };\n\n      util.extend(Dumper.prototype, ...((function() {\n        var i, len, results;\n        results = [];\n        for (i = 0, len = components.length; i < len; i++) {\n          component = components[i];\n          results.push(component.prototype);\n        }\n        return results;\n      })()));\n\n      return Dumper;\n\n    }).call(this);\n  };\n\n  this.Dumper = this.make_dumper();\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkwLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUEsU0FBUyxtQkFBTyxDQUFDLEdBQVE7O0FBRXpCLFlBQVksbUJBQU8sQ0FBQyxHQUFXOztBQUUvQixlQUFlLG1CQUFPLENBQUMsR0FBYzs7QUFFckMsZ0JBQWdCLG1CQUFPLENBQUMsR0FBZTs7QUFFdkMsYUFBYSxtQkFBTyxDQUFDLEdBQVk7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFNBQVM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFNBQVM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQOztBQUVBLEtBQUs7QUFDTDs7QUFFQTs7QUFFQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVsZW9weHl6Ly4vbm9kZV9tb2R1bGVzL3lhbWwtanMvbGliL2R1bXBlci5qcz9iYzI4Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcbiAgdmFyIGVtaXR0ZXIsIHJlcHJlc2VudGVyLCByZXNvbHZlciwgc2VyaWFsaXplciwgdXRpbDtcblxuICB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbiAgZW1pdHRlciA9IHJlcXVpcmUoJy4vZW1pdHRlcicpO1xuXG4gIHNlcmlhbGl6ZXIgPSByZXF1aXJlKCcuL3NlcmlhbGl6ZXInKTtcblxuICByZXByZXNlbnRlciA9IHJlcXVpcmUoJy4vcmVwcmVzZW50ZXInKTtcblxuICByZXNvbHZlciA9IHJlcXVpcmUoJy4vcmVzb2x2ZXInKTtcblxuICB0aGlzLm1ha2VfZHVtcGVyID0gZnVuY3Rpb24oRW1pdHRlciA9IGVtaXR0ZXIuRW1pdHRlciwgU2VyaWFsaXplciA9IHNlcmlhbGl6ZXIuU2VyaWFsaXplciwgUmVwcmVzZW50ZXIgPSByZXByZXNlbnRlci5SZXByZXNlbnRlciwgUmVzb2x2ZXIgPSByZXNvbHZlci5SZXNvbHZlcikge1xuICAgIHZhciBEdW1wZXIsIGNvbXBvbmVudHM7XG4gICAgY29tcG9uZW50cyA9IFtFbWl0dGVyLCBTZXJpYWxpemVyLCBSZXByZXNlbnRlciwgUmVzb2x2ZXJdO1xuICAgIHJldHVybiBEdW1wZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY29tcG9uZW50O1xuXG4gICAgICBjbGFzcyBEdW1wZXIge1xuICAgICAgICBjb25zdHJ1Y3RvcihzdHJlYW0sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICAgIHZhciBpLCBsZW4sIHJlZjtcbiAgICAgICAgICBjb21wb25lbnRzWzBdLnByb3RvdHlwZS5pbml0aWFsaXNlLmNhbGwodGhpcywgc3RyZWFtLCBvcHRpb25zKTtcbiAgICAgICAgICByZWYgPSBjb21wb25lbnRzLnNsaWNlKDEpO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29tcG9uZW50ID0gcmVmW2ldO1xuICAgICAgICAgICAgY29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXNlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIH07XG5cbiAgICAgIHV0aWwuZXh0ZW5kKER1bXBlci5wcm90b3R5cGUsIC4uLigoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpLCBsZW4sIHJlc3VsdHM7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gY29tcG9uZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGNvbXBvbmVudCA9IGNvbXBvbmVudHNbaV07XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKGNvbXBvbmVudC5wcm90b3R5cGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSkoKSkpO1xuXG4gICAgICByZXR1cm4gRHVtcGVyO1xuXG4gICAgfSkuY2FsbCh0aGlzKTtcbiAgfTtcblxuICB0aGlzLkR1bXBlciA9IHRoaXMubWFrZV9kdW1wZXIoKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///190\n")},320:function(__unused_webpack_module,exports,__webpack_require__){eval("(function() {\n  var ScalarAnalysis, YAMLError, events, util,\n    hasProp = {}.hasOwnProperty,\n    indexOf = [].indexOf;\n\n  events = __webpack_require__(63);\n\n  util = __webpack_require__(823);\n\n  ({YAMLError} = __webpack_require__(372));\n\n  this.EmitterError = class EmitterError extends YAMLError {};\n\n  /*\n  Emitter expects events obeying the following grammar:\n\n  stream   ::= STREAM-START document* STREAM-END\n  document ::= DOCUMENT-START node DOCUMENT-END\n  node     ::= SCALA | sequence | mapping\n  sequence ::= SEQUENCE-START node* SEQUENCE-END\n  mapping  ::= MAPPING-START (node node)* MAPPING-END\n  */\n  this.Emitter = (function() {\n    var C_WHITESPACE, DEFAULT_TAG_PREFIXES, ESCAPE_REPLACEMENTS, ctor;\n\n    class Emitter {\n      constructor() {\n        return ctor.apply(this, arguments);\n      }\n\n      initialise(stream, options) {\n        var ref;\n        this.stream = stream;\n        // Encoding can be overriden by STREAM-START\n        this.encoding = null;\n        // Emitter is a state machine with a stack of states to handle nested structures.\n        this.states = [];\n        this.state = this.expect_stream_start;\n        // Current event and the event queue\n        this.events = [];\n        this.event = null;\n        // The current indentation level and the stack of previous indents.\n        this.indents = [];\n        this.indent = null;\n        // Flow level.\n        this.flow_level = 0;\n        // Contexts.\n        this.root_context = false;\n        this.sequence_context = false;\n        this.mapping_context = false;\n        this.simple_key_context = false;\n        // Characteristics of the last emitted character:\n        // - current position.\n        // - is it a whitespace?\n        // - is it an indentation character (indentation space, '-', '?', or ':')?\n        this.line = 0;\n        this.column = 0;\n        this.whitespace = true;\n        this.indentation = true;\n        // Whether the document requires an explicit document indicator.\n        this.open_ended = false;\n        // Formatting details\n        ({canonical: this.canonical, allow_unicode: this.allow_unicode} = options);\n        if (this.canonical == null) {\n          this.canonical = false;\n        }\n        if (this.allow_unicode == null) {\n          this.allow_unicode = true;\n        }\n        this.best_indent = 1 < options.indent && options.indent < 10 ? options.indent : 2;\n        this.best_width = options.width > this.indent * 2 ? options.width : 80;\n        this.best_line_break = (ref = options.line_break) === '\\r' || ref === '\\n' || ref === '\\r\\n' ? options.line_break : '\\n';\n        // Tag prefixes.\n        this.tag_prefixes = null;\n        // Prepared anchor and tag\n        this.prepared_anchor = null;\n        this.prepared_tag = null;\n        // Scalar analysis and style.\n        this.analysis = null;\n        return this.style = null;\n      }\n\n      /*\n      Reset the state attributes (to clear self-references)\n      */\n      dispose() {\n        this.states = [];\n        return this.state = null;\n      }\n\n      emit(event) {\n        var results;\n        this.events.push(event);\n        results = [];\n        while (!this.need_more_events()) {\n          this.event = this.events.shift();\n          this.state();\n          results.push(this.event = null);\n        }\n        return results;\n      }\n\n      /*\n      In some cases, we wait for a few next events before emitting.\n      */\n      need_more_events() {\n        var event;\n        if (this.events.length === 0) {\n          return true;\n        }\n        event = this.events[0];\n        if (event instanceof events.DocumentStartEvent) {\n          return this.need_events(1);\n        } else if (event instanceof events.SequenceStartEvent) {\n          return this.need_events(2);\n        } else if (event instanceof events.MappingStartEvent) {\n          return this.need_events(3);\n        } else {\n          return false;\n        }\n      }\n\n      need_events(count) {\n        var event, i, len, level, ref;\n        level = 0;\n        ref = this.events.slice(1);\n        for (i = 0, len = ref.length; i < len; i++) {\n          event = ref[i];\n          if (event instanceof events.DocumentStartEvent || event instanceof events.CollectionStartEvent) {\n            level++;\n          } else if (event instanceof events.DocumentEndEvent || event instanceof events.CollectionEndEvent) {\n            level--;\n          } else if (event instanceof events.StreamEndEvent) {\n            level = -1;\n          }\n          if (level < 0) {\n            return false;\n          }\n        }\n        return this.events.length < count + 1;\n      }\n\n      increase_indent(options = {}) {\n        this.indents.push(this.indent);\n        if (this.indent == null) {\n          return this.indent = options.flow ? this.best_indent : 0;\n        } else if (!options.indentless) {\n          return this.indent += this.best_indent;\n        }\n      }\n\n      // Stream states\n      expect_stream_start() {\n        if (this.event instanceof events.StreamStartEvent) {\n          if (this.event.encoding && !('encoding' in this.stream)) {\n            this.encoding = this.event.encoding;\n          }\n          this.write_stream_start();\n          return this.state = this.expect_first_document_start;\n        } else {\n          return this.error('expected StreamStartEvent, but got', this.event);\n        }\n      }\n\n      expect_nothing() {\n        return this.error('expected nothing, but got', this.event);\n      }\n\n      // Document states\n      expect_first_document_start() {\n        return this.expect_document_start(true);\n      }\n\n      expect_document_start(first = false) {\n        var explicit, handle, i, k, len, prefix, ref;\n        if (this.event instanceof events.DocumentStartEvent) {\n          if ((this.event.version || this.event.tags) && this.open_ended) {\n            this.write_indicator('...', true);\n            this.write_indent();\n          }\n          if (this.event.version) {\n            this.write_version_directive(this.prepare_version(this.event.version));\n          }\n          this.tag_prefixes = util.clone(DEFAULT_TAG_PREFIXES);\n          if (this.event.tags) {\n            ref = ((function() {\n              var ref, results;\n              ref = this.event.tags;\n              results = [];\n              for (k in ref) {\n                if (!hasProp.call(ref, k)) continue;\n                results.push(k);\n              }\n              return results;\n            }).call(this)).sort();\n            for (i = 0, len = ref.length; i < len; i++) {\n              handle = ref[i];\n              prefix = this.event.tags[handle];\n              this.tag_prefixes[prefix] = handle;\n              this.write_tag_directive(this.prepare_tag_handle(handle), this.prepare_tag_prefix(prefix));\n            }\n          }\n          explicit = !first || this.event.explicit || this.canonical || this.event.version || this.event.tags || this.check_empty_document();\n          if (explicit) {\n            this.write_indent();\n            this.write_indicator('---', true);\n            if (this.canonical) {\n              this.write_indent();\n            }\n          }\n          return this.state = this.expect_document_root;\n        } else if (this.event instanceof events.StreamEndEvent) {\n          if (this.open_ended) {\n            this.write_indicator('...', true);\n            this.write_indent();\n          }\n          this.write_stream_end();\n          return this.state = this.expect_nothing;\n        } else {\n          return this.error('expected DocumentStartEvent, but got', this.event);\n        }\n      }\n\n      expect_document_end() {\n        if (this.event instanceof events.DocumentEndEvent) {\n          this.write_indent();\n          if (this.event.explicit) {\n            this.write_indicator('...', true);\n            this.write_indent();\n          }\n          this.flush_stream();\n          return this.state = this.expect_document_start;\n        } else {\n          return this.error('expected DocumentEndEvent, but got', this.event);\n        }\n      }\n\n      expect_document_root() {\n        this.states.push(this.expect_document_end);\n        return this.expect_node({\n          root: true\n        });\n      }\n\n      // Node states\n      expect_node(expect = {}) {\n        this.root_context = !!expect.root;\n        this.sequence_context = !!expect.sequence;\n        this.mapping_context = !!expect.mapping;\n        this.simple_key_context = !!expect.simple_key;\n        if (this.event instanceof events.AliasEvent) {\n          return this.expect_alias();\n        } else if (this.event instanceof events.ScalarEvent || this.event instanceof events.CollectionStartEvent) {\n          this.process_anchor('&');\n          this.process_tag();\n          if (this.event instanceof events.ScalarEvent) {\n            return this.expect_scalar();\n          } else if (this.event instanceof events.SequenceStartEvent) {\n            if (this.flow_level || this.canonical || this.event.flow_style || this.check_empty_sequence()) {\n              return this.expect_flow_sequence();\n            } else {\n              return this.expect_block_sequence();\n            }\n          } else if (this.event instanceof events.MappingStartEvent) {\n            if (this.flow_level || this.canonical || this.event.flow_style || this.check_empty_mapping()) {\n              return this.expect_flow_mapping();\n            } else {\n              return this.expect_block_mapping();\n            }\n          }\n        } else {\n          return this.error('expected NodeEvent, but got', this.event);\n        }\n      }\n\n      expect_alias() {\n        if (!this.event.anchor) {\n          this.error('anchor is not specified for alias');\n        }\n        this.process_anchor('*');\n        return this.state = this.states.pop();\n      }\n\n      expect_scalar() {\n        this.increase_indent({\n          flow: true\n        });\n        this.process_scalar();\n        this.indent = this.indents.pop();\n        return this.state = this.states.pop();\n      }\n\n      // Flow sequence states\n      expect_flow_sequence() {\n        this.write_indicator('[', true, {\n          whitespace: true\n        });\n        this.flow_level++;\n        this.increase_indent({\n          flow: true\n        });\n        return this.state = this.expect_first_flow_sequence_item;\n      }\n\n      expect_first_flow_sequence_item() {\n        if (this.event instanceof events.SequenceEndEvent) {\n          this.indent = this.indents.pop();\n          this.flow_level--;\n          this.write_indicator(']', false);\n          return this.state = this.states.pop();\n        } else {\n          if (this.canonical || this.column > this.best_width) {\n            this.write_indent();\n          }\n          this.states.push(this.expect_flow_sequence_item);\n          return this.expect_node({\n            sequence: true\n          });\n        }\n      }\n\n      expect_flow_sequence_item() {\n        if (this.event instanceof events.SequenceEndEvent) {\n          this.indent = this.indents.pop();\n          this.flow_level--;\n          if (this.canonical) {\n            this.write_indicator(',', false);\n            this.write_indent();\n          }\n          this.write_indicator(']', false);\n          return this.state = this.states.pop();\n        } else {\n          this.write_indicator(',', false);\n          if (this.canonical || this.column > this.best_width) {\n            this.write_indent();\n          }\n          this.states.push(this.expect_flow_sequence_item);\n          return this.expect_node({\n            sequence: true\n          });\n        }\n      }\n\n      // Flow mapping states\n      expect_flow_mapping() {\n        this.write_indicator('{', true, {\n          whitespace: true\n        });\n        this.flow_level++;\n        this.increase_indent({\n          flow: true\n        });\n        return this.state = this.expect_first_flow_mapping_key;\n      }\n\n      expect_first_flow_mapping_key() {\n        if (this.event instanceof events.MappingEndEvent) {\n          this.indent = this.indents.pop();\n          this.flow_level--;\n          this.write_indicator('}', false);\n          return this.state = this.states.pop();\n        } else {\n          if (this.canonical || this.column > this.best_width) {\n            this.write_indent();\n          }\n          if (!this.canonical && this.check_simple_key()) {\n            this.states.push(this.expect_flow_mapping_simple_value);\n            return this.expect_node({\n              mapping: true,\n              simple_key: true\n            });\n          } else {\n            this.write_indicator('?', true);\n            this.states.push(this.expect_flow_mapping_value);\n            return this.expect_node({\n              mapping: true\n            });\n          }\n        }\n      }\n\n      expect_flow_mapping_key() {\n        if (this.event instanceof events.MappingEndEvent) {\n          this.indent = this.indents.pop();\n          this.flow_level--;\n          if (this.canonical) {\n            this.write_indicator(',', false);\n            this.write_indent();\n          }\n          this.write_indicator('}', false);\n          return this.state = this.states.pop();\n        } else {\n          this.write_indicator(',', false);\n          if (this.canonical || this.column > this.best_width) {\n            this.write_indent();\n          }\n          if (!this.canonical && this.check_simple_key()) {\n            this.states.push(this.expect_flow_mapping_simple_value);\n            return this.expect_node({\n              mapping: true,\n              simple_key: true\n            });\n          } else {\n            this.write_indicator('?', true);\n            this.states.push(this.expect_flow_mapping_value);\n            return this.expect_node({\n              mapping: true\n            });\n          }\n        }\n      }\n\n      expect_flow_mapping_simple_value() {\n        this.write_indicator(':', false);\n        this.states.push(this.expect_flow_mapping_key);\n        return this.expect_node({\n          mapping: true\n        });\n      }\n\n      expect_flow_mapping_value() {\n        if (this.canonical || this.column > this.best_width) {\n          this.write_indent();\n        }\n        this.write_indicator(':', true);\n        this.states.push(this.expect_flow_mapping_key);\n        return this.expect_node({\n          mapping: true\n        });\n      }\n\n      // Block sequence states\n      expect_block_sequence() {\n        var indentless;\n        indentless = this.mapping_context && !this.indentation;\n        this.increase_indent({indentless});\n        return this.state = this.expect_first_block_sequence_item;\n      }\n\n      expect_first_block_sequence_item() {\n        return this.expect_block_sequence_item(true);\n      }\n\n      expect_block_sequence_item(first = false) {\n        if (!first && this.event instanceof events.SequenceEndEvent) {\n          this.indent = this.indents.pop();\n          return this.state = this.states.pop();\n        } else {\n          this.write_indent();\n          this.write_indicator('-', true, {\n            indentation: true\n          });\n          this.states.push(this.expect_block_sequence_item);\n          return this.expect_node({\n            sequence: true\n          });\n        }\n      }\n\n      // Block mapping states\n      expect_block_mapping() {\n        this.increase_indent();\n        return this.state = this.expect_first_block_mapping_key;\n      }\n\n      expect_first_block_mapping_key() {\n        return this.expect_block_mapping_key(true);\n      }\n\n      expect_block_mapping_key(first = false) {\n        if (!first && this.event instanceof events.MappingEndEvent) {\n          this.indent = this.indents.pop();\n          return this.state = this.states.pop();\n        } else {\n          this.write_indent();\n          if (this.check_simple_key()) {\n            this.states.push(this.expect_block_mapping_simple_value);\n            return this.expect_node({\n              mapping: true,\n              simple_key: true\n            });\n          } else {\n            this.write_indicator('?', true, {\n              indentation: true\n            });\n            this.states.push(this.expect_block_mapping_value);\n            return this.expect_node({\n              mapping: true\n            });\n          }\n        }\n      }\n\n      expect_block_mapping_simple_value() {\n        this.write_indicator(':', false);\n        this.states.push(this.expect_block_mapping_key);\n        return this.expect_node({\n          mapping: true\n        });\n      }\n\n      expect_block_mapping_value() {\n        this.write_indent();\n        this.write_indicator(':', true, {\n          indentation: true\n        });\n        this.states.push(this.expect_block_mapping_key);\n        return this.expect_node({\n          mapping: true\n        });\n      }\n\n      // Checkers\n      check_empty_document() {\n        var event;\n        if (!(this.event instanceof events.DocumentStartEvent) || this.events.length === 0) {\n          return false;\n        }\n        event = this.events[0];\n        return event instanceof events.ScalarEvent && (event.anchor == null) && (event.tag == null) && event.implicit && event.value === '';\n      }\n\n      check_empty_sequence() {\n        return this.event instanceof events.SequenceStartEvent && this.events[0] instanceof events.SequenceEndEvent;\n      }\n\n      check_empty_mapping() {\n        return this.event instanceof events.MappingStartEvent && this.events[0] instanceof events.MappingEndEvent;\n      }\n\n      check_simple_key() {\n        var length;\n        length = 0;\n        if (this.event instanceof events.NodeEvent && (this.event.anchor != null)) {\n          if (this.prepared_anchor == null) {\n            this.prepared_anchor = this.prepare_anchor(this.event.anchor);\n          }\n          length += this.prepared_anchor.length;\n        }\n        if ((this.event.tag != null) && (this.event instanceof events.ScalarEvent || this.event instanceof events.CollectionStartEvent)) {\n          if (this.prepared_tag == null) {\n            this.prepared_tag = this.prepare_tag(this.event.tag);\n          }\n          length += this.prepared_tag.length;\n        }\n        if (this.event instanceof events.ScalarEvent) {\n          if (this.analysis == null) {\n            this.analysis = this.analyze_scalar(this.event.value);\n          }\n          length += this.analysis.scalar.length;\n        }\n        return length < 128 && (this.event instanceof events.AliasEvent || (this.event instanceof events.ScalarEvent && !this.analysis.empty && !this.analysis.multiline) || this.check_empty_sequence() || this.check_empty_mapping());\n      }\n\n      // Anchor, Tag and Scalar processors\n      process_anchor(indicator) {\n        if (this.event.anchor == null) {\n          this.prepared_anchor = null;\n          return;\n        }\n        if (this.prepared_anchor == null) {\n          this.prepared_anchor = this.prepare_anchor(this.event.anchor);\n        }\n        if (this.prepared_anchor) {\n          this.write_indicator(`${indicator}${this.prepared_anchor}`, true);\n        }\n        return this.prepared_anchor = null;\n      }\n\n      process_tag() {\n        var tag;\n        tag = this.event.tag;\n        if (this.event instanceof events.ScalarEvent) {\n          if (this.style == null) {\n            this.style = this.choose_scalar_style();\n          }\n          if ((!this.canonical || (tag == null)) && ((this.style === '' && this.event.implicit[0]) || (this.style !== '' && this.event.implicit[1]))) {\n            this.prepared_tag = null;\n            return;\n          }\n          if (this.event.implicit[0] && (tag == null)) {\n            tag = '!';\n            this.prepared_tag = null;\n          }\n        } else if ((!this.canonical || (tag == null)) && this.event.implicit) {\n          this.prepared_tag = null;\n          return;\n        }\n        if (tag == null) {\n          this.error('tag is not specified');\n        }\n        if (this.prepared_tag == null) {\n          this.prepared_tag = this.prepare_tag(tag);\n        }\n        this.write_indicator(this.prepared_tag, true);\n        return this.prepared_tag = null;\n      }\n\n      process_scalar() {\n        var split;\n        if (this.analysis == null) {\n          this.analysis = this.analyze_scalar(this.event.value);\n        }\n        if (this.style == null) {\n          this.style = this.choose_scalar_style();\n        }\n        split = !this.simple_key_context;\n        switch (this.style) {\n          case '\"':\n            this.write_double_quoted(this.analysis.scalar, split);\n            break;\n          case \"'\":\n            this.write_single_quoted(this.analysis.scalar, split);\n            break;\n          case '>':\n            this.write_folded(this.analysis.scalar);\n            break;\n          case '|':\n            this.write_literal(this.analysis.scalar);\n            break;\n          default:\n            this.write_plain(this.analysis.scalar, split);\n        }\n        this.analysis = null;\n        return this.style = null;\n      }\n\n      choose_scalar_style() {\n        var ref;\n        if (this.analysis == null) {\n          this.analysis = this.analyze_scalar(this.event.value);\n        }\n        if (this.event.style === '\"' || this.canonical) {\n          return '\"';\n        }\n        if (!this.event.style && this.event.implicit[0] && !(this.simple_key_context && (this.analysis.empty || this.analysis.multiline)) && ((this.flow_level && this.analysis.allow_flow_plain) || (!this.flow_level && this.analysis.allow_block_plain))) {\n          return '';\n        }\n        if (this.event.style && (ref = this.event.style, indexOf.call('|>', ref) >= 0) && !this.flow_level && !this.simple_key_context && this.analysis.allow_block) {\n          return this.event.style;\n        }\n        if ((!this.event.style || this.event.style === \"'\") && this.analysis.allow_single_quoted && !(this.simple_key_context && this.analysis.multiline)) {\n          return \"'\";\n        }\n        return '\"';\n      }\n\n      // Analyzers\n      prepare_version([major, minor]) {\n        var version;\n        version = `${major}.${minor}`;\n        if (major === 1) {\n          return version;\n        } else {\n          return this.error('unsupported YAML version', version);\n        }\n      }\n\n      prepare_tag_handle(handle) {\n        var char, i, len, ref;\n        if (!handle) {\n          this.error('tag handle must not be empty');\n        }\n        if (handle[0] !== '!' || handle.slice(-1) !== '!') {\n          this.error(\"tag handle must start and end with '!':\", handle);\n        }\n        ref = handle.slice(1, -1);\n        for (i = 0, len = ref.length; i < len; i++) {\n          char = ref[i];\n          if (!(('0' <= char && char <= '9') || ('A' <= char && char <= 'Z') || ('a' <= char && char <= 'z') || indexOf.call('-_', char) >= 0)) {\n            this.error(`invalid character '${char}' in the tag handle:`, handle);\n          }\n        }\n        return handle;\n      }\n\n      prepare_tag_prefix(prefix) {\n        var char, chunks, end, start;\n        if (!prefix) {\n          this.error('tag prefix must not be empty');\n        }\n        chunks = [];\n        start = 0;\n        end = +(prefix[0] === '!');\n        while (end < prefix.length) {\n          char = prefix[end];\n          if (('0' <= char && char <= '9') || ('A' <= char && char <= 'Z') || ('a' <= char && char <= 'z') || indexOf.call('-;/?!:@&=+$,_.~*\\'()[]', char) >= 0) {\n            end++;\n          } else {\n            if (start < end) {\n              chunks.push(prefix.slice(start, end));\n            }\n            start = end = end + 1;\n            chunks.push(char);\n          }\n        }\n        if (start < end) {\n          chunks.push(prefix.slice(start, end));\n        }\n        return chunks.join('');\n      }\n\n      prepare_tag(tag) {\n        var char, chunks, end, handle, i, k, len, prefix, ref, start, suffix, suffix_text;\n        if (!tag) {\n          this.error('tag must not be empty');\n        }\n        if (tag === '!') {\n          return tag;\n        }\n        handle = null;\n        suffix = tag;\n        ref = ((function() {\n          var ref, results;\n          ref = this.tag_prefixes;\n          results = [];\n          for (k in ref) {\n            if (!hasProp.call(ref, k)) continue;\n            results.push(k);\n          }\n          return results;\n        }).call(this)).sort();\n        for (i = 0, len = ref.length; i < len; i++) {\n          prefix = ref[i];\n          if (tag.indexOf(prefix) === 0 && (prefix === '!' || prefix.length < tag.length)) {\n            handle = this.tag_prefixes[prefix];\n            suffix = tag.slice(prefix.length);\n          }\n        }\n        chunks = [];\n        start = end = 0;\n        while (end < suffix.length) {\n          char = suffix[end];\n          if (('0' <= char && char <= '9') || ('A' <= char && char <= 'Z') || ('a' <= char && char <= 'z') || indexOf.call('-;/?!:@&=+$,_.~*\\'()[]', char) >= 0 || (char === '!' && handle !== '!')) {\n            end++;\n          } else {\n            if (start < end) {\n              chunks.push(suffix.slice(start, end));\n            }\n            start = end = end + 1;\n            chunks.push(char);\n          }\n        }\n        if (start < end) {\n          chunks.push(suffix.slice(start, end));\n        }\n        suffix_text = chunks.join('');\n        if (handle) {\n          return `${handle}${suffix_text}`;\n        } else {\n          return `!<${suffix_text}>`;\n        }\n      }\n\n      prepare_anchor(anchor) {\n        var char, i, len;\n        if (!anchor) {\n          this.error('anchor must not be empty');\n        }\n        for (i = 0, len = anchor.length; i < len; i++) {\n          char = anchor[i];\n          if (!(('0' <= char && char <= '9') || ('A' <= char && char <= 'Z') || ('a' <= char && char <= 'z') || indexOf.call('-_', char) >= 0)) {\n            this.error(`invalid character '${char}' in the anchor:`, anchor);\n          }\n        }\n        return anchor;\n      }\n\n      analyze_scalar(scalar) {\n        var allow_block, allow_block_plain, allow_double_quoted, allow_flow_plain, allow_single_quoted, block_indicators, break_space, char, flow_indicators, followed_by_whitespace, i, index, leading_break, leading_space, len, line_breaks, preceded_by_whitespace, previous_break, previous_space, ref, ref1, space_break, special_characters, trailing_break, trailing_space, unicode_characters;\n        // Empty scalar is a special case.\n        if (!scalar) {\n          new ScalarAnalysis(scalar, true, false, false, true, true, true, false);\n        }\n        // Indicators and special characters.\n        block_indicators = false;\n        flow_indicators = false;\n        line_breaks = false;\n        special_characters = false;\n        unicode_characters = false;\n        // Important whitespace combinations\n        leading_space = false;\n        leading_break = false;\n        trailing_space = false;\n        trailing_break = false;\n        break_space = false;\n        space_break = false;\n        // Check document indicators.\n        if (scalar.indexOf('---') === 0 || scalar.indexOf('...') === 0) {\n          block_indicators = true;\n          flow_indicators = true;\n        }\n        // First character or preceded by a whitespace.\n        preceded_by_whitespace = true;\n        // Last character or followed by a whitespace.\n        followed_by_whitespace = scalar.length === 1 || (ref = scalar[1], indexOf.call('\\0 \\t\\r\\n\\x85\\u2028\\u2029', ref) >= 0);\n        // The previous character is a space.\n        previous_space = false;\n        // The previous character is a break\n        previous_break = false;\n        index = 0;\n        for (index = i = 0, len = scalar.length; i < len; index = ++i) {\n          char = scalar[index];\n          // Check for indicators.\n          if (index === 0) {\n            // Leading indicators are special characters.\n            if (indexOf.call('#,[]{}&*!|>\\'\"%@`', char) >= 0 || (char === '-' && followed_by_whitespace)) {\n              flow_indicators = true;\n              block_indicators = true;\n            } else if (indexOf.call('?:', char) >= 0) {\n              flow_indicators = true;\n              if (followed_by_whitespace) {\n                block_indicators = true;\n              }\n            }\n          } else {\n            // Some indicators cannot appear within a scalar as well.\n            if (indexOf.call(',?[]{}', char) >= 0) {\n              flow_indicators = true;\n            } else if (char === ':') {\n              flow_indicators = true;\n              if (followed_by_whitespace) {\n                block_indicators = true;\n              }\n            } else if (char === '#' && preceded_by_whitespace) {\n              flow_indicators = true;\n              block_indicators = true;\n            }\n          }\n          // Check for line breaks, special, and unicode characters.\n          if (indexOf.call('\\n\\x85\\u2028\\u2029', char) >= 0) {\n            line_breaks = true;\n          }\n          if (!(char === '\\n' || ('\\x20' <= char && char <= '\\x7e'))) {\n            if (char !== '\\uFEFF' && (char === '\\x85' || ('\\xA0' <= char && char <= '\\uD7FF') || ('\\uE000' <= char && char <= '\\uFFFD'))) {\n              unicode_characters = true;\n              if (!this.allow_unicode) {\n                special_characters = true;\n              }\n            } else {\n              special_characters = true;\n            }\n          }\n          // Detect important whitespace combinations.\n          if (char === ' ') {\n            if (index === 0) {\n              leading_space = true;\n            }\n            if (index === scalar.length - 1) {\n              trailing_space = true;\n            }\n            if (previous_break) {\n              break_space = true;\n            }\n            previous_break = false;\n            previous_space = true;\n          } else if (indexOf.call('\\n\\x85\\u2028\\u2029', char) >= 0) {\n            if (index === 0) {\n              leading_break = true;\n            }\n            if (index === scalar.length - 1) {\n              trailing_break = true;\n            }\n            if (previous_space) {\n              space_break = true;\n            }\n            previous_break = true;\n            previous_space = false;\n          } else {\n            previous_break = false;\n            previous_space = false;\n          }\n          // Prepare for the next character.\n          preceded_by_whitespace = indexOf.call(C_WHITESPACE, char) >= 0;\n          followed_by_whitespace = index + 2 >= scalar.length || (ref1 = scalar[index + 2], indexOf.call(C_WHITESPACE, ref1) >= 0);\n        }\n        // Let's decide what styles are allowed.\n        allow_flow_plain = true;\n        allow_block_plain = true;\n        allow_single_quoted = true;\n        allow_double_quoted = true;\n        allow_block = true;\n        // Leading and trailing whitespaces are bad for plain scalars.\n        if (leading_space || leading_break || trailing_space || trailing_break) {\n          allow_flow_plain = allow_block_plain = false;\n        }\n        // We do not permit trailing spaces for block scalars.\n        if (trailing_space) {\n          allow_block = false;\n        }\n        // Spaces at the beginning of a new line are only acceptable for block scalars.\n        if (break_space) {\n          allow_flow_plain = allow_block_plain = allow_single_quoted = false;\n        }\n        // Spaces followed by breaks, as well as special character are only allowed for double quoted\n        // scalars.\n        if (space_break || special_characters) {\n          allow_flow_plain = allow_block_plain = allow_single_quoted = allow_block = false;\n        }\n        // Although the plain scalar writer supports breaks, we never emit multiline plain scalars.\n        if (line_breaks) {\n          allow_flow_plain = allow_block_plain = false;\n        }\n        // Flow indicators are forbidden for flow plain scalars.\n        if (flow_indicators) {\n          allow_flow_plain = false;\n        }\n        // Block indicators are forbidden for block plain scalars.\n        if (block_indicators) {\n          allow_block_plain = false;\n        }\n        return new ScalarAnalysis(scalar, false, line_breaks, allow_flow_plain, allow_block_plain, allow_single_quoted, allow_double_quoted, allow_block);\n      }\n\n      // Writers\n      /*\n      Write BOM if needed.\n      */\n      write_stream_start() {\n        if (this.encoding && this.encoding.indexOf('utf-16') === 0) {\n          return this.stream.write('\\uFEFF', this.encoding);\n        }\n      }\n\n      write_stream_end() {\n        return this.flush_stream();\n      }\n\n      write_indicator(indicator, need_whitespace, options = {}) {\n        var data;\n        data = this.whitespace || !need_whitespace ? indicator : ' ' + indicator;\n        this.whitespace = !!options.whitespace;\n        this.indentation && (this.indentation = !!options.indentation);\n        this.column += data.length;\n        this.open_ended = false;\n        return this.stream.write(data, this.encoding);\n      }\n\n      write_indent() {\n        var data, indent, ref;\n        indent = (ref = this.indent) != null ? ref : 0;\n        if (!this.indentation || this.column > indent || (this.column === indent && !this.whitespace)) {\n          this.write_line_break();\n        }\n        if (this.column < indent) {\n          this.whitespace = true;\n          data = new Array(indent - this.column + 1).join(' ');\n          this.column = indent;\n          return this.stream.write(data, this.encoding);\n        }\n      }\n\n      write_line_break(data) {\n        this.whitespace = true;\n        this.indentation = true;\n        this.line += 1;\n        this.column = 0;\n        return this.stream.write(data != null ? data : this.best_line_break, this.encoding);\n      }\n\n      write_version_directive(version_text) {\n        this.stream.write(`%YAML ${version_text}`, this.encoding);\n        return this.write_line_break();\n      }\n\n      write_tag_directive(handle_text, prefix_text) {\n        this.stream.write(`%TAG ${handle_text} ${prefix_text}`, this.encoding);\n        return this.write_line_break();\n      }\n\n      write_single_quoted(text, split = true) {\n        var br, breaks, char, data, end, i, len, ref, spaces, start;\n        this.write_indicator(\"'\", true);\n        spaces = false;\n        breaks = false;\n        start = end = 0;\n        while (end <= text.length) {\n          char = text[end];\n          if (spaces) {\n            if ((char == null) || char !== ' ') {\n              if (start + 1 === end && this.column > this.best_width && split && start !== 0 && end !== text.length) {\n                this.write_indent();\n              } else {\n                data = text.slice(start, end);\n                this.column += data.length;\n                this.stream.write(data, this.encoding);\n              }\n              start = end;\n            }\n          } else if (breaks) {\n            if ((char == null) || indexOf.call('\\n\\x85\\u2028\\u2029', char) < 0) {\n              if (text[start] === '\\n') {\n                this.write_line_break();\n              }\n              ref = text.slice(start, end);\n              for (i = 0, len = ref.length; i < len; i++) {\n                br = ref[i];\n                if (br === '\\n') {\n                  this.write_line_break();\n                } else {\n                  this.write_line_break(br);\n                }\n              }\n              this.write_indent();\n              start = end;\n            }\n          } else if (((char == null) || indexOf.call(' \\n\\x85\\u2028\\u2029', char) >= 0 || char === \"'\") && start < end) {\n            data = text.slice(start, end);\n            this.column += data.length;\n            this.stream.write(data, this.encoding);\n            start = end;\n          }\n          if (char === \"'\") {\n            this.column += 2;\n            this.stream.write(\"''\", this.encoding);\n            start = end + 1;\n          }\n          if (char != null) {\n            spaces = char === ' ';\n            breaks = indexOf.call('\\n\\x85\\u2028\\u2029', char) >= 0;\n          }\n          end++;\n        }\n        return this.write_indicator(\"'\", false);\n      }\n\n      write_double_quoted(text, split = true) {\n        var char, data, end, start;\n        this.write_indicator('\"', true);\n        start = end = 0;\n        while (end <= text.length) {\n          char = text[end];\n          if ((char == null) || indexOf.call('\"\\\\\\x85\\u2028\\u2029\\uFEFF', char) >= 0 || !(('\\x20' <= char && char <= '\\x7E') || (this.allow_unicode && (('\\xA0' <= char && char <= '\\uD7FF') || ('\\uE000' <= char && char <= '\\uFFFD'))))) {\n            if (start < end) {\n              data = text.slice(start, end);\n              this.column += data.length;\n              this.stream.write(data, this.encoding);\n              start = end;\n            }\n            if (char != null) {\n              data = char in ESCAPE_REPLACEMENTS ? '\\\\' + ESCAPE_REPLACEMENTS[char] : char <= '\\xFF' ? `\\\\x${util.pad_left(util.to_hex(char), '0', 2)}` : char <= '\\uFFFF' ? `\\\\u${util.pad_left(util.to_hex(char), '0', 4)}` : `\\\\U${util.pad_left(util.to_hex(char), '0', 16)}`;\n              this.column += data.length;\n              this.stream.write(data, this.encoding);\n              start = end + 1;\n            }\n          }\n          if (split && (0 < end && end < text.length - 1) && (char === ' ' || start >= end) && this.column + (end - start) > this.best_width) {\n            data = `${text.slice(start, end)}\\\\`;\n            if (start < end) {\n              start = end;\n            }\n            this.column += data.length;\n            this.stream.write(data, this.encoding);\n            this.write_indent();\n            this.whitespace = false;\n            this.indentation = false;\n            if (text[start] === ' ') {\n              data = '\\\\';\n              this.column += data.length;\n              this.stream.write(data, this.encoding);\n            }\n          }\n          end++;\n        }\n        return this.write_indicator('\"', false);\n      }\n\n      write_folded(text) {\n        var br, breaks, char, data, end, hints, i, leading_space, len, ref, results, spaces, start;\n        hints = this.determine_block_hints(text);\n        this.write_indicator(`>${hints}`, true);\n        if (hints.slice(-1) === '+') {\n          this.open_ended = true;\n        }\n        this.write_line_break();\n        leading_space = true;\n        breaks = true;\n        spaces = false;\n        start = end = 0;\n        results = [];\n        while (end <= text.length) {\n          char = text[end];\n          if (breaks) {\n            if ((char == null) || indexOf.call('\\n\\x85\\u2028\\u2029', char) < 0) {\n              if (!leading_space && (char != null) && char !== ' ' && text[start] === '\\n') {\n                this.write_line_break();\n              }\n              leading_space = char === ' ';\n              ref = text.slice(start, end);\n              for (i = 0, len = ref.length; i < len; i++) {\n                br = ref[i];\n                if (br === '\\n') {\n                  this.write_line_break();\n                } else {\n                  this.write_line_break(br);\n                }\n              }\n              if (char != null) {\n                this.write_indent();\n              }\n              start = end;\n            }\n          } else if (spaces) {\n            if (char !== ' ') {\n              if (start + 1 === end && this.column > this.best_width) {\n                this.write_indent();\n              } else {\n                data = text.slice(start, end);\n                this.column += data.length;\n                this.stream.write(data, this.encoding);\n              }\n              start = end;\n            }\n          } else if ((char == null) || indexOf.call(' \\n\\x85\\u2028\\u2029', char) >= 0) {\n            data = text.slice(start, end);\n            this.column += data.length;\n            this.stream.write(data, this.encoding);\n            if (char == null) {\n              this.write_line_break();\n            }\n            start = end;\n          }\n          if (char != null) {\n            breaks = indexOf.call('\\n\\x85\\u2028\\u2029', char) >= 0;\n            spaces = char === ' ';\n          }\n          results.push(end++);\n        }\n        return results;\n      }\n\n      write_literal(text) {\n        var br, breaks, char, data, end, hints, i, len, ref, results, start;\n        hints = this.determine_block_hints(text);\n        this.write_indicator(`|${hints}`, true);\n        if (hints.slice(-1) === '+') {\n          this.open_ended = true;\n        }\n        this.write_line_break();\n        breaks = true;\n        start = end = 0;\n        results = [];\n        while (end <= text.length) {\n          char = text[end];\n          if (breaks) {\n            if ((char == null) || indexOf.call('\\n\\x85\\u2028\\u2029', char) < 0) {\n              ref = text.slice(start, end);\n              for (i = 0, len = ref.length; i < len; i++) {\n                br = ref[i];\n                if (br === '\\n') {\n                  this.write_line_break();\n                } else {\n                  this.write_line_break(br);\n                }\n              }\n              if (char != null) {\n                this.write_indent();\n              }\n              start = end;\n            }\n          } else {\n            if ((char == null) || indexOf.call('\\n\\x85\\u2028\\u2029', char) >= 0) {\n              data = text.slice(start, end);\n              this.stream.write(data, this.encoding);\n              if (char == null) {\n                this.write_line_break();\n              }\n              start = end;\n            }\n          }\n          if (char != null) {\n            breaks = indexOf.call('\\n\\x85\\u2028\\u2029', char) >= 0;\n          }\n          results.push(end++);\n        }\n        return results;\n      }\n\n      write_plain(text, split = true) {\n        var br, breaks, char, data, end, i, len, ref, results, spaces, start;\n        if (!text) {\n          return;\n        }\n        if (this.root_context) {\n          this.open_ended = true;\n        }\n        if (!this.whitespace) {\n          data = ' ';\n          this.column += data.length;\n          this.stream.write(data, this.encoding);\n        }\n        this.whitespace = false;\n        this.indentation = false;\n        spaces = false;\n        breaks = false;\n        start = end = 0;\n        results = [];\n        while (end <= text.length) {\n          char = text[end];\n          if (spaces) {\n            if (char !== ' ') {\n              if (start + 1 === end && this.column > this.best_width && split) {\n                this.write_indent();\n                this.whitespace = false;\n                this.indentation = false;\n              } else {\n                data = text.slice(start, end);\n                this.column += data.length;\n                this.stream.write(data, this.encoding);\n              }\n              start = end;\n            }\n          } else if (breaks) {\n            if (indexOf.call('\\n\\x85\\u2028\\u2029', char) < 0) {\n              if (text[start] === '\\n') {\n                this.write_line_break();\n              }\n              ref = text.slice(start, end);\n              for (i = 0, len = ref.length; i < len; i++) {\n                br = ref[i];\n                if (br === '\\n') {\n                  this.write_line_break();\n                } else {\n                  this.write_line_break(br);\n                }\n              }\n              this.write_indent();\n              this.whitespace = false;\n              this.indentation = false;\n              start = end;\n            }\n          } else {\n            if ((char == null) || indexOf.call(' \\n\\x85\\u2028\\u2029', char) >= 0) {\n              data = text.slice(start, end);\n              this.column += data.length;\n              this.stream.write(data, this.encoding);\n              start = end;\n            }\n          }\n          if (char != null) {\n            spaces = char === ' ';\n            breaks = indexOf.call('\\n\\x85\\u2028\\u2029', char) >= 0;\n          }\n          results.push(end++);\n        }\n        return results;\n      }\n\n      determine_block_hints(text) {\n        var first, hints, i, last, penultimate;\n        hints = '';\n        first = text[0], i = text.length - 2, penultimate = text[i++], last = text[i++];\n        if (indexOf.call(' \\n\\x85\\u2028\\u2029', first) >= 0) {\n          hints += this.best_indent;\n        }\n        if (indexOf.call('\\n\\x85\\u2028\\u2029', last) < 0) {\n          hints += '-';\n        } else if (text.length === 1 || indexOf.call('\\n\\x85\\u2028\\u2029', penultimate) >= 0) {\n          hints += '+';\n        }\n        return hints;\n      }\n\n      flush_stream() {\n        var base;\n        return typeof (base = this.stream).flush === \"function\" ? base.flush() : void 0;\n      }\n\n      /*\n      Helper for common error pattern.\n      */\n      error(message, context) {\n        var ref, ref1;\n        if (context) {\n          context = (ref = context != null ? (ref1 = context.constructor) != null ? ref1.name : void 0 : void 0) != null ? ref : util.inspect(context);\n        }\n        throw new exports.EmitterError(`${message}${(context ? ` ${context}` : '')}`);\n      }\n\n    };\n\n    C_WHITESPACE = '\\0 \\t\\r\\n\\x85\\u2028\\u2029';\n\n    DEFAULT_TAG_PREFIXES = {\n      '!': '!',\n      'tag:yaml.org,2002:': '!!'\n    };\n\n    ESCAPE_REPLACEMENTS = {\n      '\\0': '0',\n      '\\x07': 'a',\n      '\\x08': 'b',\n      '\\x09': 't',\n      '\\x0A': 'n',\n      '\\x0B': 'v',\n      '\\x0C': 'f',\n      '\\x0D': 'r',\n      '\\x1B': 'e',\n      '\"': '\"',\n      '\\\\': '\\\\',\n      '\\x85': 'N',\n      '\\xA0': '_',\n      '\\u2028': 'L',\n      '\\u2029': 'P'\n    };\n\n    ctor = Emitter.prototype.initialise;\n\n    return Emitter;\n\n  }).call(this);\n\n  ScalarAnalysis = class ScalarAnalysis {\n    constructor(scalar1, empty, multiline, allow_flow_plain1, allow_block_plain1, allow_single_quoted1, allow_double_quoted1, allow_block1) {\n      this.scalar = scalar1;\n      this.empty = empty;\n      this.multiline = multiline;\n      this.allow_flow_plain = allow_flow_plain1;\n      this.allow_block_plain = allow_block_plain1;\n      this.allow_single_quoted = allow_single_quoted1;\n      this.allow_double_quoted = allow_double_quoted1;\n      this.allow_block = allow_block1;\n    }\n\n  };\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///320\n")},372:function(){eval("(function() {\n  var indexOf = [].indexOf;\n\n  this.Mark = class Mark {\n    constructor(line, column, buffer, pointer) {\n      this.line = line;\n      this.column = column;\n      this.buffer = buffer;\n      this.pointer = pointer;\n    }\n\n    get_snippet(indent = 4, max_length = 75) {\n      var break_chars, end, head, ref, ref1, start, tail;\n      if (this.buffer == null) {\n        return null;\n      }\n      break_chars = '\\x00\\r\\n\\x85\\u2028\\u2029';\n      head = '';\n      start = this.pointer;\n      while (start > 0 && (ref = this.buffer[start - 1], indexOf.call(break_chars, ref) < 0)) {\n        start--;\n        if (this.pointer - start > max_length / 2 - 1) {\n          head = ' ... ';\n          start += 5;\n          break;\n        }\n      }\n      tail = '';\n      end = this.pointer;\n      while (end < this.buffer.length && (ref1 = this.buffer[end], indexOf.call(break_chars, ref1) < 0)) {\n        end++;\n        if (end - this.pointer > max_length / 2 - 1) {\n          tail = ' ... ';\n          end -= 5;\n          break;\n        }\n      }\n      return `${(new Array(indent)).join(' ')}${head}${this.buffer.slice(start, end)}${tail}\\n${(new Array(indent + this.pointer - start + head.length)).join(' ')}^`;\n    }\n\n    toString() {\n      var snippet, where;\n      snippet = this.get_snippet();\n      where = `  on line ${this.line + 1}, column ${this.column + 1}`;\n      if (snippet) {\n        return where;\n      } else {\n        return `${where}:\\n${snippet}`;\n      }\n    }\n\n  };\n\n  this.YAMLError = class YAMLError extends Error {\n    constructor(message) {\n      super(message);\n      // Hack to get the stack on the error somehow\n      Object.defineProperty(this, 'stack', {\n        get: function() {\n          return this.toString() + '\\n' + (new Error).stack.split('\\n').slice(1).join('\\n');\n        }\n      });\n    }\n\n    toString() {\n      return this.message;\n    }\n\n  };\n\n  this.MarkedYAMLError = class MarkedYAMLError extends this.YAMLError {\n    constructor(context, context_mark, problem, problem_mark, note) {\n      super();\n      this.context = context;\n      this.context_mark = context_mark;\n      this.problem = problem;\n      this.problem_mark = problem_mark;\n      this.note = note;\n    }\n\n    toString() {\n      var lines;\n      lines = [];\n      if (this.context != null) {\n        lines.push(this.context);\n      }\n      if ((this.context_mark != null) && ((this.problem == null) || (this.problem_mark == null) || this.context_mark.line !== this.problem_mark.line || this.context_mark.column !== this.problem_mark.column)) {\n        lines.push(this.context_mark.toString());\n      }\n      if (this.problem != null) {\n        lines.push(this.problem);\n      }\n      if (this.problem_mark != null) {\n        lines.push(this.problem_mark.toString());\n      }\n      if (this.note != null) {\n        lines.push(this.note);\n      }\n      return lines.join('\\n');\n    }\n\n  };\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4QkFBOEIsRUFBRSxLQUFLLEVBQUUsOEJBQThCLEVBQUUsS0FBSyxJQUFJLG1FQUFtRTtBQUNuSzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsY0FBYyxXQUFXLGdCQUFnQjtBQUNwRTtBQUNBO0FBQ0EsUUFBUTtBQUNSLGtCQUFrQixNQUFNLEtBQUssUUFBUTtBQUNyQztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWxlb3B4eXovLi9ub2RlX21vZHVsZXMveWFtbC1qcy9saWIvZXJyb3JzLmpzPzUwMmEiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCkge1xuICB2YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbiAgdGhpcy5NYXJrID0gY2xhc3MgTWFyayB7XG4gICAgY29uc3RydWN0b3IobGluZSwgY29sdW1uLCBidWZmZXIsIHBvaW50ZXIpIHtcbiAgICAgIHRoaXMubGluZSA9IGxpbmU7XG4gICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgdGhpcy5wb2ludGVyID0gcG9pbnRlcjtcbiAgICB9XG5cbiAgICBnZXRfc25pcHBldChpbmRlbnQgPSA0LCBtYXhfbGVuZ3RoID0gNzUpIHtcbiAgICAgIHZhciBicmVha19jaGFycywgZW5kLCBoZWFkLCByZWYsIHJlZjEsIHN0YXJ0LCB0YWlsO1xuICAgICAgaWYgKHRoaXMuYnVmZmVyID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBicmVha19jaGFycyA9ICdcXHgwMFxcclxcblxceDg1XFx1MjAyOFxcdTIwMjknO1xuICAgICAgaGVhZCA9ICcnO1xuICAgICAgc3RhcnQgPSB0aGlzLnBvaW50ZXI7XG4gICAgICB3aGlsZSAoc3RhcnQgPiAwICYmIChyZWYgPSB0aGlzLmJ1ZmZlcltzdGFydCAtIDFdLCBpbmRleE9mLmNhbGwoYnJlYWtfY2hhcnMsIHJlZikgPCAwKSkge1xuICAgICAgICBzdGFydC0tO1xuICAgICAgICBpZiAodGhpcy5wb2ludGVyIC0gc3RhcnQgPiBtYXhfbGVuZ3RoIC8gMiAtIDEpIHtcbiAgICAgICAgICBoZWFkID0gJyAuLi4gJztcbiAgICAgICAgICBzdGFydCArPSA1O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0YWlsID0gJyc7XG4gICAgICBlbmQgPSB0aGlzLnBvaW50ZXI7XG4gICAgICB3aGlsZSAoZW5kIDwgdGhpcy5idWZmZXIubGVuZ3RoICYmIChyZWYxID0gdGhpcy5idWZmZXJbZW5kXSwgaW5kZXhPZi5jYWxsKGJyZWFrX2NoYXJzLCByZWYxKSA8IDApKSB7XG4gICAgICAgIGVuZCsrO1xuICAgICAgICBpZiAoZW5kIC0gdGhpcy5wb2ludGVyID4gbWF4X2xlbmd0aCAvIDIgLSAxKSB7XG4gICAgICAgICAgdGFpbCA9ICcgLi4uICc7XG4gICAgICAgICAgZW5kIC09IDU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBgJHsobmV3IEFycmF5KGluZGVudCkpLmpvaW4oJyAnKX0ke2hlYWR9JHt0aGlzLmJ1ZmZlci5zbGljZShzdGFydCwgZW5kKX0ke3RhaWx9XFxuJHsobmV3IEFycmF5KGluZGVudCArIHRoaXMucG9pbnRlciAtIHN0YXJ0ICsgaGVhZC5sZW5ndGgpKS5qb2luKCcgJyl9XmA7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICB2YXIgc25pcHBldCwgd2hlcmU7XG4gICAgICBzbmlwcGV0ID0gdGhpcy5nZXRfc25pcHBldCgpO1xuICAgICAgd2hlcmUgPSBgICBvbiBsaW5lICR7dGhpcy5saW5lICsgMX0sIGNvbHVtbiAke3RoaXMuY29sdW1uICsgMX1gO1xuICAgICAgaWYgKHNuaXBwZXQpIHtcbiAgICAgICAgcmV0dXJuIHdoZXJlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGAke3doZXJlfTpcXG4ke3NuaXBwZXR9YDtcbiAgICAgIH1cbiAgICB9XG5cbiAgfTtcblxuICB0aGlzLllBTUxFcnJvciA9IGNsYXNzIFlBTUxFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgIC8vIEhhY2sgdG8gZ2V0IHRoZSBzdGFjayBvbiB0aGUgZXJyb3Igc29tZWhvd1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzdGFjaycsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpICsgJ1xcbicgKyAobmV3IEVycm9yKS5zdGFjay5zcGxpdCgnXFxuJykuc2xpY2UoMSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZTtcbiAgICB9XG5cbiAgfTtcblxuICB0aGlzLk1hcmtlZFlBTUxFcnJvciA9IGNsYXNzIE1hcmtlZFlBTUxFcnJvciBleHRlbmRzIHRoaXMuWUFNTEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjb250ZXh0X21hcmssIHByb2JsZW0sIHByb2JsZW1fbWFyaywgbm90ZSkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICB0aGlzLmNvbnRleHRfbWFyayA9IGNvbnRleHRfbWFyaztcbiAgICAgIHRoaXMucHJvYmxlbSA9IHByb2JsZW07XG4gICAgICB0aGlzLnByb2JsZW1fbWFyayA9IHByb2JsZW1fbWFyaztcbiAgICAgIHRoaXMubm90ZSA9IG5vdGU7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICB2YXIgbGluZXM7XG4gICAgICBsaW5lcyA9IFtdO1xuICAgICAgaWYgKHRoaXMuY29udGV4dCAhPSBudWxsKSB7XG4gICAgICAgIGxpbmVzLnB1c2godGhpcy5jb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIGlmICgodGhpcy5jb250ZXh0X21hcmsgIT0gbnVsbCkgJiYgKCh0aGlzLnByb2JsZW0gPT0gbnVsbCkgfHwgKHRoaXMucHJvYmxlbV9tYXJrID09IG51bGwpIHx8IHRoaXMuY29udGV4dF9tYXJrLmxpbmUgIT09IHRoaXMucHJvYmxlbV9tYXJrLmxpbmUgfHwgdGhpcy5jb250ZXh0X21hcmsuY29sdW1uICE9PSB0aGlzLnByb2JsZW1fbWFyay5jb2x1bW4pKSB7XG4gICAgICAgIGxpbmVzLnB1c2godGhpcy5jb250ZXh0X21hcmsudG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wcm9ibGVtICE9IG51bGwpIHtcbiAgICAgICAgbGluZXMucHVzaCh0aGlzLnByb2JsZW0pO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucHJvYmxlbV9tYXJrICE9IG51bGwpIHtcbiAgICAgICAgbGluZXMucHVzaCh0aGlzLnByb2JsZW1fbWFyay50b1N0cmluZygpKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5vdGUgIT0gbnVsbCkge1xuICAgICAgICBsaW5lcy5wdXNoKHRoaXMubm90ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGluZXMuam9pbignXFxuJyk7XG4gICAgfVxuXG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///372\n")},63:function(){eval("(function() {\n  this.Event = class Event {\n    constructor(start_mark1, end_mark1) {\n      this.start_mark = start_mark1;\n      this.end_mark = end_mark1;\n    }\n\n  };\n\n  this.NodeEvent = class NodeEvent extends this.Event {\n    constructor(anchor1, start_mark, end_mark) {\n      super(start_mark, end_mark);\n      this.anchor = anchor1;\n    }\n\n  };\n\n  this.CollectionStartEvent = class CollectionStartEvent extends this.NodeEvent {\n    constructor(anchor, tag, implicit, start_mark, end_mark, flow_style) {\n      super(anchor, start_mark, end_mark);\n      this.tag = tag;\n      this.implicit = implicit;\n      this.flow_style = flow_style;\n    }\n\n  };\n\n  this.CollectionEndEvent = class CollectionEndEvent extends this.Event {};\n\n  this.StreamStartEvent = class StreamStartEvent extends this.Event {\n    constructor(start_mark, end_mark, encoding) {\n      super(start_mark, end_mark);\n      this.encoding = encoding;\n    }\n\n  };\n\n  this.StreamEndEvent = class StreamEndEvent extends this.Event {};\n\n  this.DocumentStartEvent = class DocumentStartEvent extends this.Event {\n    constructor(start_mark, end_mark, explicit, version, tags) {\n      super(start_mark, end_mark);\n      this.explicit = explicit;\n      this.version = version;\n      this.tags = tags;\n    }\n\n  };\n\n  this.DocumentEndEvent = class DocumentEndEvent extends this.Event {\n    constructor(start_mark, end_mark, explicit) {\n      super(start_mark, end_mark);\n      this.explicit = explicit;\n    }\n\n  };\n\n  this.AliasEvent = class AliasEvent extends this.NodeEvent {};\n\n  this.ScalarEvent = class ScalarEvent extends this.NodeEvent {\n    constructor(anchor, tag, implicit, value, start_mark, end_mark, style) {\n      super(anchor, start_mark, end_mark);\n      this.tag = tag;\n      this.implicit = implicit;\n      this.value = value;\n      this.style = style;\n    }\n\n  };\n\n  this.SequenceStartEvent = class SequenceStartEvent extends this.CollectionStartEvent {};\n\n  this.SequenceEndEvent = class SequenceEndEvent extends this.CollectionEndEvent {};\n\n  this.MappingStartEvent = class MappingStartEvent extends this.CollectionStartEvent {};\n\n  this.MappingEndEvent = class MappingEndEvent extends this.CollectionEndEvent {};\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlbGVvcHh5ei8uL25vZGVfbW9kdWxlcy95YW1sLWpzL2xpYi9ldmVudHMuanM/MTNmMCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG4gIHRoaXMuRXZlbnQgPSBjbGFzcyBFdmVudCB7XG4gICAgY29uc3RydWN0b3Ioc3RhcnRfbWFyazEsIGVuZF9tYXJrMSkge1xuICAgICAgdGhpcy5zdGFydF9tYXJrID0gc3RhcnRfbWFyazE7XG4gICAgICB0aGlzLmVuZF9tYXJrID0gZW5kX21hcmsxO1xuICAgIH1cblxuICB9O1xuXG4gIHRoaXMuTm9kZUV2ZW50ID0gY2xhc3MgTm9kZUV2ZW50IGV4dGVuZHMgdGhpcy5FdmVudCB7XG4gICAgY29uc3RydWN0b3IoYW5jaG9yMSwgc3RhcnRfbWFyaywgZW5kX21hcmspIHtcbiAgICAgIHN1cGVyKHN0YXJ0X21hcmssIGVuZF9tYXJrKTtcbiAgICAgIHRoaXMuYW5jaG9yID0gYW5jaG9yMTtcbiAgICB9XG5cbiAgfTtcblxuICB0aGlzLkNvbGxlY3Rpb25TdGFydEV2ZW50ID0gY2xhc3MgQ29sbGVjdGlvblN0YXJ0RXZlbnQgZXh0ZW5kcyB0aGlzLk5vZGVFdmVudCB7XG4gICAgY29uc3RydWN0b3IoYW5jaG9yLCB0YWcsIGltcGxpY2l0LCBzdGFydF9tYXJrLCBlbmRfbWFyaywgZmxvd19zdHlsZSkge1xuICAgICAgc3VwZXIoYW5jaG9yLCBzdGFydF9tYXJrLCBlbmRfbWFyayk7XG4gICAgICB0aGlzLnRhZyA9IHRhZztcbiAgICAgIHRoaXMuaW1wbGljaXQgPSBpbXBsaWNpdDtcbiAgICAgIHRoaXMuZmxvd19zdHlsZSA9IGZsb3dfc3R5bGU7XG4gICAgfVxuXG4gIH07XG5cbiAgdGhpcy5Db2xsZWN0aW9uRW5kRXZlbnQgPSBjbGFzcyBDb2xsZWN0aW9uRW5kRXZlbnQgZXh0ZW5kcyB0aGlzLkV2ZW50IHt9O1xuXG4gIHRoaXMuU3RyZWFtU3RhcnRFdmVudCA9IGNsYXNzIFN0cmVhbVN0YXJ0RXZlbnQgZXh0ZW5kcyB0aGlzLkV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzdGFydF9tYXJrLCBlbmRfbWFyaywgZW5jb2RpbmcpIHtcbiAgICAgIHN1cGVyKHN0YXJ0X21hcmssIGVuZF9tYXJrKTtcbiAgICAgIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgICB9XG5cbiAgfTtcblxuICB0aGlzLlN0cmVhbUVuZEV2ZW50ID0gY2xhc3MgU3RyZWFtRW5kRXZlbnQgZXh0ZW5kcyB0aGlzLkV2ZW50IHt9O1xuXG4gIHRoaXMuRG9jdW1lbnRTdGFydEV2ZW50ID0gY2xhc3MgRG9jdW1lbnRTdGFydEV2ZW50IGV4dGVuZHMgdGhpcy5FdmVudCB7XG4gICAgY29uc3RydWN0b3Ioc3RhcnRfbWFyaywgZW5kX21hcmssIGV4cGxpY2l0LCB2ZXJzaW9uLCB0YWdzKSB7XG4gICAgICBzdXBlcihzdGFydF9tYXJrLCBlbmRfbWFyayk7XG4gICAgICB0aGlzLmV4cGxpY2l0ID0gZXhwbGljaXQ7XG4gICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgdGhpcy50YWdzID0gdGFncztcbiAgICB9XG5cbiAgfTtcblxuICB0aGlzLkRvY3VtZW50RW5kRXZlbnQgPSBjbGFzcyBEb2N1bWVudEVuZEV2ZW50IGV4dGVuZHMgdGhpcy5FdmVudCB7XG4gICAgY29uc3RydWN0b3Ioc3RhcnRfbWFyaywgZW5kX21hcmssIGV4cGxpY2l0KSB7XG4gICAgICBzdXBlcihzdGFydF9tYXJrLCBlbmRfbWFyayk7XG4gICAgICB0aGlzLmV4cGxpY2l0ID0gZXhwbGljaXQ7XG4gICAgfVxuXG4gIH07XG5cbiAgdGhpcy5BbGlhc0V2ZW50ID0gY2xhc3MgQWxpYXNFdmVudCBleHRlbmRzIHRoaXMuTm9kZUV2ZW50IHt9O1xuXG4gIHRoaXMuU2NhbGFyRXZlbnQgPSBjbGFzcyBTY2FsYXJFdmVudCBleHRlbmRzIHRoaXMuTm9kZUV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihhbmNob3IsIHRhZywgaW1wbGljaXQsIHZhbHVlLCBzdGFydF9tYXJrLCBlbmRfbWFyaywgc3R5bGUpIHtcbiAgICAgIHN1cGVyKGFuY2hvciwgc3RhcnRfbWFyaywgZW5kX21hcmspO1xuICAgICAgdGhpcy50YWcgPSB0YWc7XG4gICAgICB0aGlzLmltcGxpY2l0ID0gaW1wbGljaXQ7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgfVxuXG4gIH07XG5cbiAgdGhpcy5TZXF1ZW5jZVN0YXJ0RXZlbnQgPSBjbGFzcyBTZXF1ZW5jZVN0YXJ0RXZlbnQgZXh0ZW5kcyB0aGlzLkNvbGxlY3Rpb25TdGFydEV2ZW50IHt9O1xuXG4gIHRoaXMuU2VxdWVuY2VFbmRFdmVudCA9IGNsYXNzIFNlcXVlbmNlRW5kRXZlbnQgZXh0ZW5kcyB0aGlzLkNvbGxlY3Rpb25FbmRFdmVudCB7fTtcblxuICB0aGlzLk1hcHBpbmdTdGFydEV2ZW50ID0gY2xhc3MgTWFwcGluZ1N0YXJ0RXZlbnQgZXh0ZW5kcyB0aGlzLkNvbGxlY3Rpb25TdGFydEV2ZW50IHt9O1xuXG4gIHRoaXMuTWFwcGluZ0VuZEV2ZW50ID0gY2xhc3MgTWFwcGluZ0VuZEV2ZW50IGV4dGVuZHMgdGhpcy5Db2xsZWN0aW9uRW5kRXZlbnQge307XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///63\n")},696:function(__unused_webpack_module,__unused_webpack_exports,__webpack_require__){eval("(function() {\n  var composer, constructor, parser, reader, resolver, scanner, util;\n\n  util = __webpack_require__(823);\n\n  reader = __webpack_require__(26);\n\n  scanner = __webpack_require__(265);\n\n  parser = __webpack_require__(806);\n\n  composer = __webpack_require__(391);\n\n  resolver = __webpack_require__(579);\n\n  constructor = __webpack_require__(574);\n\n  this.make_loader = function(Reader = reader.Reader, Scanner = scanner.Scanner, Parser = parser.Parser, Composer = composer.Composer, Resolver = resolver.Resolver, Constructor = constructor.Constructor) {\n    var Loader, components;\n    components = [Reader, Scanner, Parser, Composer, Resolver, Constructor];\n    return Loader = (function() {\n      var component;\n\n      class Loader {\n        constructor(stream) {\n          var i, len, ref;\n          components[0].prototype.initialise.call(this, stream);\n          ref = components.slice(1);\n          for (i = 0, len = ref.length; i < len; i++) {\n            component = ref[i];\n            component.prototype.initialise.call(this);\n          }\n        }\n\n      };\n\n      util.extend(Loader.prototype, ...((function() {\n        var i, len, results;\n        results = [];\n        for (i = 0, len = components.length; i < len; i++) {\n          component = components[i];\n          results.push(component.prototype);\n        }\n        return results;\n      })()));\n\n      return Loader;\n\n    }).call(this);\n  };\n\n  this.Loader = this.make_loader();\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk2LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUEsU0FBUyxtQkFBTyxDQUFDLEdBQVE7O0FBRXpCLFdBQVcsbUJBQU8sQ0FBQyxFQUFVOztBQUU3QixZQUFZLG1CQUFPLENBQUMsR0FBVzs7QUFFL0IsV0FBVyxtQkFBTyxDQUFDLEdBQVU7O0FBRTdCLGFBQWEsbUJBQU8sQ0FBQyxHQUFZOztBQUVqQyxhQUFhLG1CQUFPLENBQUMsR0FBWTs7QUFFakMsZ0JBQWdCLG1CQUFPLENBQUMsR0FBZTs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFNBQVM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFNBQVM7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQOztBQUVBLEtBQUs7QUFDTDs7QUFFQTs7QUFFQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVsZW9weHl6Ly4vbm9kZV9tb2R1bGVzL3lhbWwtanMvbGliL2xvYWRlci5qcz85OWFiIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcbiAgdmFyIGNvbXBvc2VyLCBjb25zdHJ1Y3RvciwgcGFyc2VyLCByZWFkZXIsIHJlc29sdmVyLCBzY2FubmVyLCB1dGlsO1xuXG4gIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuICByZWFkZXIgPSByZXF1aXJlKCcuL3JlYWRlcicpO1xuXG4gIHNjYW5uZXIgPSByZXF1aXJlKCcuL3NjYW5uZXInKTtcblxuICBwYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlcicpO1xuXG4gIGNvbXBvc2VyID0gcmVxdWlyZSgnLi9jb21wb3NlcicpO1xuXG4gIHJlc29sdmVyID0gcmVxdWlyZSgnLi9yZXNvbHZlcicpO1xuXG4gIGNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9jb25zdHJ1Y3RvcicpO1xuXG4gIHRoaXMubWFrZV9sb2FkZXIgPSBmdW5jdGlvbihSZWFkZXIgPSByZWFkZXIuUmVhZGVyLCBTY2FubmVyID0gc2Nhbm5lci5TY2FubmVyLCBQYXJzZXIgPSBwYXJzZXIuUGFyc2VyLCBDb21wb3NlciA9IGNvbXBvc2VyLkNvbXBvc2VyLCBSZXNvbHZlciA9IHJlc29sdmVyLlJlc29sdmVyLCBDb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yLkNvbnN0cnVjdG9yKSB7XG4gICAgdmFyIExvYWRlciwgY29tcG9uZW50cztcbiAgICBjb21wb25lbnRzID0gW1JlYWRlciwgU2Nhbm5lciwgUGFyc2VyLCBDb21wb3NlciwgUmVzb2x2ZXIsIENvbnN0cnVjdG9yXTtcbiAgICByZXR1cm4gTG9hZGVyID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbXBvbmVudDtcblxuICAgICAgY2xhc3MgTG9hZGVyIHtcbiAgICAgICAgY29uc3RydWN0b3Ioc3RyZWFtKSB7XG4gICAgICAgICAgdmFyIGksIGxlbiwgcmVmO1xuICAgICAgICAgIGNvbXBvbmVudHNbMF0ucHJvdG90eXBlLmluaXRpYWxpc2UuY2FsbCh0aGlzLCBzdHJlYW0pO1xuICAgICAgICAgIHJlZiA9IGNvbXBvbmVudHMuc2xpY2UoMSk7XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb21wb25lbnQgPSByZWZbaV07XG4gICAgICAgICAgICBjb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgfTtcblxuICAgICAgdXRpbC5leHRlbmQoTG9hZGVyLnByb3RvdHlwZSwgLi4uKChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGksIGxlbiwgcmVzdWx0cztcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBjb21wb25lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgY29tcG9uZW50ID0gY29tcG9uZW50c1tpXTtcbiAgICAgICAgICByZXN1bHRzLnB1c2goY29tcG9uZW50LnByb3RvdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9KSgpKSk7XG5cbiAgICAgIHJldHVybiBMb2FkZXI7XG5cbiAgICB9KS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIHRoaXMuTG9hZGVyID0gdGhpcy5tYWtlX2xvYWRlcigpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///696\n")},914:function(){eval("(function() {\n  var unique_id;\n\n  unique_id = 0;\n\n  this.Node = class Node {\n    constructor(tag1, value1, start_mark1, end_mark1) {\n      this.tag = tag1;\n      this.value = value1;\n      this.start_mark = start_mark1;\n      this.end_mark = end_mark1;\n      this.unique_id = `node_${unique_id++}`;\n    }\n\n  };\n\n  this.ScalarNode = (function() {\n    class ScalarNode extends this.Node {\n      constructor(tag, value, start_mark, end_mark, style) {\n        super(tag, value, start_mark, end_mark);\n        this.style = style;\n      }\n\n    };\n\n    ScalarNode.prototype.id = 'scalar';\n\n    return ScalarNode;\n\n  }).call(this);\n\n  this.CollectionNode = class CollectionNode extends this.Node {\n    constructor(tag, value, start_mark, end_mark, flow_style) {\n      super(tag, value, start_mark, end_mark);\n      this.flow_style = flow_style;\n    }\n\n  };\n\n  this.SequenceNode = (function() {\n    class SequenceNode extends this.CollectionNode {};\n\n    SequenceNode.prototype.id = 'sequence';\n\n    return SequenceNode;\n\n  }).call(this);\n\n  this.MappingNode = (function() {\n    class MappingNode extends this.CollectionNode {};\n\n    MappingNode.prototype.id = 'mapping';\n\n    return MappingNode;\n\n  }).call(this);\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTE0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFlBQVk7QUFDM0M7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxHQUFHOztBQUVILENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWxlb3B4eXovLi9ub2RlX21vZHVsZXMveWFtbC1qcy9saWIvbm9kZXMuanM/MzIxNSJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG4gIHZhciB1bmlxdWVfaWQ7XG5cbiAgdW5pcXVlX2lkID0gMDtcblxuICB0aGlzLk5vZGUgPSBjbGFzcyBOb2RlIHtcbiAgICBjb25zdHJ1Y3Rvcih0YWcxLCB2YWx1ZTEsIHN0YXJ0X21hcmsxLCBlbmRfbWFyazEpIHtcbiAgICAgIHRoaXMudGFnID0gdGFnMTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTE7XG4gICAgICB0aGlzLnN0YXJ0X21hcmsgPSBzdGFydF9tYXJrMTtcbiAgICAgIHRoaXMuZW5kX21hcmsgPSBlbmRfbWFyazE7XG4gICAgICB0aGlzLnVuaXF1ZV9pZCA9IGBub2RlXyR7dW5pcXVlX2lkKyt9YDtcbiAgICB9XG5cbiAgfTtcblxuICB0aGlzLlNjYWxhck5vZGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgY2xhc3MgU2NhbGFyTm9kZSBleHRlbmRzIHRoaXMuTm9kZSB7XG4gICAgICBjb25zdHJ1Y3Rvcih0YWcsIHZhbHVlLCBzdGFydF9tYXJrLCBlbmRfbWFyaywgc3R5bGUpIHtcbiAgICAgICAgc3VwZXIodGFnLCB2YWx1ZSwgc3RhcnRfbWFyaywgZW5kX21hcmspO1xuICAgICAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2NhbGFyTm9kZS5wcm90b3R5cGUuaWQgPSAnc2NhbGFyJztcblxuICAgIHJldHVybiBTY2FsYXJOb2RlO1xuXG4gIH0pLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5Db2xsZWN0aW9uTm9kZSA9IGNsYXNzIENvbGxlY3Rpb25Ob2RlIGV4dGVuZHMgdGhpcy5Ob2RlIHtcbiAgICBjb25zdHJ1Y3Rvcih0YWcsIHZhbHVlLCBzdGFydF9tYXJrLCBlbmRfbWFyaywgZmxvd19zdHlsZSkge1xuICAgICAgc3VwZXIodGFnLCB2YWx1ZSwgc3RhcnRfbWFyaywgZW5kX21hcmspO1xuICAgICAgdGhpcy5mbG93X3N0eWxlID0gZmxvd19zdHlsZTtcbiAgICB9XG5cbiAgfTtcblxuICB0aGlzLlNlcXVlbmNlTm9kZSA9IChmdW5jdGlvbigpIHtcbiAgICBjbGFzcyBTZXF1ZW5jZU5vZGUgZXh0ZW5kcyB0aGlzLkNvbGxlY3Rpb25Ob2RlIHt9O1xuXG4gICAgU2VxdWVuY2VOb2RlLnByb3RvdHlwZS5pZCA9ICdzZXF1ZW5jZSc7XG5cbiAgICByZXR1cm4gU2VxdWVuY2VOb2RlO1xuXG4gIH0pLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5NYXBwaW5nTm9kZSA9IChmdW5jdGlvbigpIHtcbiAgICBjbGFzcyBNYXBwaW5nTm9kZSBleHRlbmRzIHRoaXMuQ29sbGVjdGlvbk5vZGUge307XG5cbiAgICBNYXBwaW5nTm9kZS5wcm90b3R5cGUuaWQgPSAnbWFwcGluZyc7XG5cbiAgICByZXR1cm4gTWFwcGluZ05vZGU7XG5cbiAgfSkuY2FsbCh0aGlzKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///914\n")},806:function(__unused_webpack_module,exports,__webpack_require__){eval("(function() {\n  var MarkedYAMLError, events, tokens,\n    hasProp = {}.hasOwnProperty;\n\n  events = __webpack_require__(63);\n\n  ({MarkedYAMLError} = __webpack_require__(372));\n\n  tokens = __webpack_require__(902);\n\n  this.ParserError = class ParserError extends MarkedYAMLError {};\n\n  this.Parser = (function() {\n    var DEFAULT_TAGS, ctor;\n\n    class Parser {\n      constructor() {\n        return ctor.apply(this, arguments);\n      }\n\n      initialise() {\n        this.current_event = null;\n        this.yaml_version = null;\n        this.tag_handles = {};\n        this.states = [];\n        this.marks = [];\n        return this.state = 'parse_stream_start';\n      }\n\n      /*\n      Reset the state attributes.\n      */\n      dispose() {\n        this.states = [];\n        return this.state = null;\n      }\n\n      /*\n      Check the type of the next event.\n      */\n      check_event(...choices) {\n        var choice, i, len;\n        if (this.current_event === null) {\n          if (this.state != null) {\n            this.current_event = this[this.state]();\n          }\n        }\n        if (this.current_event !== null) {\n          if (choices.length === 0) {\n            return true;\n          }\n          for (i = 0, len = choices.length; i < len; i++) {\n            choice = choices[i];\n            if (this.current_event instanceof choice) {\n              return true;\n            }\n          }\n        }\n        return false;\n      }\n\n      /*\n      Get the next event.\n      */\n      peek_event() {\n        if (this.current_event === null && (this.state != null)) {\n          this.current_event = this[this.state]();\n        }\n        return this.current_event;\n      }\n\n      /*\n      Get the event and proceed further.\n      */\n      get_event() {\n        var event;\n        if (this.current_event === null && (this.state != null)) {\n          this.current_event = this[this.state]();\n        }\n        event = this.current_event;\n        this.current_event = null;\n        return event;\n      }\n\n      // stream ::= STREAM-START implicit_document? explicit_document* STREAM-END\n      // implicit_document ::= block_node DOCUMENT-END*\n      // explicit_document ::= DIRECTIVE* DOCUMENT-START block_node? DOCUMENT-END*\n      /*\n      Parse the stream start.\n      */\n      parse_stream_start() {\n        var event, token;\n        token = this.get_token();\n        event = new events.StreamStartEvent(token.start_mark, token.end_mark);\n        // Prepare the next state,\n        this.state = 'parse_implicit_document_start';\n        return event;\n      }\n\n      /*\n      Parse an implicit document.\n      */\n      parse_implicit_document_start() {\n        var end_mark, event, start_mark, token;\n        if (!this.check_token(tokens.DirectiveToken, tokens.DocumentStartToken, tokens.StreamEndToken)) {\n          this.tag_handles = DEFAULT_TAGS;\n          token = this.peek_token();\n          start_mark = end_mark = token.start_mark;\n          event = new events.DocumentStartEvent(start_mark, end_mark, false);\n          // Prepare the next state\n          this.states.push('parse_document_end');\n          this.state = 'parse_block_node';\n          return event;\n        } else {\n          return this.parse_document_start();\n        }\n      }\n\n      /*\n      Parse an explicit document.\n      */\n      parse_document_start() {\n        var end_mark, event, start_mark, tags, token, version;\n        while (this.check_token(tokens.DocumentEndToken)) {\n          // Parse any extra document end indicators\n          this.get_token();\n        }\n        if (!this.check_token(tokens.StreamEndToken)) {\n          start_mark = this.peek_token().start_mark;\n          [version, tags] = this.process_directives();\n          if (!this.check_token(tokens.DocumentStartToken)) {\n            throw new exports.ParserError(`expected '<document start>', but found ${(this.peek_token().id)}`, this.peek_token().start_mark);\n          }\n          token = this.get_token();\n          end_mark = token.end_mark;\n          event = new events.DocumentStartEvent(start_mark, end_mark, true, version, tags);\n          this.states.push('parse_document_end');\n          this.state = 'parse_document_content';\n        } else {\n          // Parse the end of the stream.\n          token = this.get_token();\n          event = new events.StreamEndEvent(token.start_mark, token.end_mark);\n          if (this.states.length !== 0) {\n            throw new Error('assertion error, states should be empty');\n          }\n          if (this.marks.length !== 0) {\n            throw new Error('assertion error, marks should be empty');\n          }\n          this.state = null;\n        }\n        return event;\n      }\n\n      /*\n      Parse the document end.\n      */\n      parse_document_end() {\n        var end_mark, event, explicit, start_mark, token;\n        token = this.peek_token();\n        start_mark = end_mark = token.start_mark;\n        explicit = false;\n        if (this.check_token(tokens.DocumentEndToken)) {\n          token = this.get_token();\n          end_mark = token.end_mark;\n          explicit = true;\n        }\n        event = new events.DocumentEndEvent(start_mark, end_mark, explicit);\n        // Prepare next state.\n        this.state = 'parse_document_start';\n        return event;\n      }\n\n      parse_document_content() {\n        var event;\n        if (this.check_token(tokens.DirectiveToken, tokens.DocumentStartToken, tokens.DocumentEndToken, tokens.StreamEndToken)) {\n          event = this.process_empty_scalar(this.peek_token().start_mark);\n          this.state = this.states.pop();\n          return event;\n        } else {\n          return this.parse_block_node();\n        }\n      }\n\n      process_directives() {\n        var handle, major, minor, prefix, ref, tag_handles_copy, token, value;\n        this.yaml_version = null;\n        this.tag_handles = {};\n        while (this.check_token(tokens.DirectiveToken)) {\n          token = this.get_token();\n          if (token.name === 'YAML') {\n            if (this.yaml_version !== null) {\n              throw new exports.ParserError(null, null, 'found duplicate YAML directive', token.start_mark);\n            }\n            [major, minor] = token.value;\n            if (major !== 1) {\n              throw new exports.ParserError(null, null, 'found incompatible YAML document (version 1.* is required)', token.start_mark);\n            }\n            this.yaml_version = token.value;\n          } else if (token.name === 'TAG') {\n            [handle, prefix] = token.value;\n            if (handle in this.tag_handles) {\n              throw new exports.ParserError(null, null, `duplicate tag handle ${handle}`, token.start_mark);\n            }\n            this.tag_handles[handle] = prefix;\n          }\n        }\n        tag_handles_copy = null;\n        ref = this.tag_handles;\n        for (handle in ref) {\n          if (!hasProp.call(ref, handle)) continue;\n          prefix = ref[handle];\n          if (tag_handles_copy == null) {\n            tag_handles_copy = {};\n          }\n          tag_handles_copy[handle] = prefix;\n        }\n        value = [this.yaml_version, tag_handles_copy];\n        for (handle in DEFAULT_TAGS) {\n          if (!hasProp.call(DEFAULT_TAGS, handle)) continue;\n          prefix = DEFAULT_TAGS[handle];\n          if (!(prefix in this.tag_handles)) {\n            this.tag_handles[handle] = prefix;\n          }\n        }\n        return value;\n      }\n\n      // block_node_or_indentless_sequence ::= ALIAS\n      //   | properties (block_content | indentless_sequence)?\n      //   | block_content\n      //   | indentless_block_sequence\n      // block_node ::= ALIAS\n      //   | properties block_content?\n      //   | block_content\n      // flow_node ::= ALIAS\n      //   | properties flow_content?\n      //   | flow_content\n      // properties ::= TAG ANCHOR? | ANCHOR TAG?\n      // block_content ::= block_collection | flow_collection | SCALAR\n      // flow_content ::= flow_collection | SCALAR\n      // block_collection ::= block_sequence | block_mapping\n      // flow_collection ::= flow_sequence | flow_mapping\n      parse_block_node() {\n        return this.parse_node(true);\n      }\n\n      parse_flow_node() {\n        return this.parse_node();\n      }\n\n      parse_block_node_or_indentless_sequence() {\n        return this.parse_node(true, true);\n      }\n\n      parse_node(block = false, indentless_sequence = false) {\n        var anchor, end_mark, event, handle, implicit, node, start_mark, suffix, tag, tag_mark, token;\n        if (this.check_token(tokens.AliasToken)) {\n          token = this.get_token();\n          event = new events.AliasEvent(token.value, token.start_mark, token.end_mark);\n          this.state = this.states.pop();\n        } else {\n          anchor = null;\n          tag = null;\n          start_mark = end_mark = tag_mark = null;\n          if (this.check_token(tokens.AnchorToken)) {\n            token = this.get_token();\n            start_mark = token.start_mark;\n            end_mark = token.end_mark;\n            anchor = token.value;\n            if (this.check_token(tokens.TagToken)) {\n              token = this.get_token();\n              tag_mark = token.start_mark;\n              end_mark = token.end_mark;\n              tag = token.value;\n            }\n          } else if (this.check_token(tokens.TagToken)) {\n            token = this.get_token();\n            start_mark = tag_mark = token.start_mark;\n            end_mark = token.end_mark;\n            tag = token.value;\n            if (this.check_token(tokens.AnchorToken)) {\n              token = this.get_token();\n              end_mark = token.end_mark;\n              anchor = token.value;\n            }\n          }\n          if (tag !== null) {\n            [handle, suffix] = tag;\n            if (handle !== null) {\n              if (!(handle in this.tag_handles)) {\n                throw new exports.ParserError('while parsing a node', start_mark, `found undefined tag handle ${handle}`, tag_mark);\n              }\n              tag = this.tag_handles[handle] + suffix;\n            } else {\n              tag = suffix;\n            }\n          }\n          if (start_mark === null) {\n            start_mark = end_mark = this.peek_token().start_mark;\n          }\n          event = null;\n          implicit = tag === null || tag === '!';\n          if (indentless_sequence && this.check_token(tokens.BlockEntryToken)) {\n            end_mark = this.peek_token().end_mark;\n            event = new events.SequenceStartEvent(anchor, tag, implicit, start_mark, end_mark);\n            this.state = 'parse_indentless_sequence_entry';\n          } else {\n            if (this.check_token(tokens.ScalarToken)) {\n              token = this.get_token();\n              end_mark = token.end_mark;\n              if ((token.plain && tag === null) || tag === '!') {\n                implicit = [true, false];\n              } else if (tag === null) {\n                implicit = [false, true];\n              } else {\n                implicit = [false, false];\n              }\n              event = new events.ScalarEvent(anchor, tag, implicit, token.value, start_mark, end_mark, token.style);\n              this.state = this.states.pop();\n            } else if (this.check_token(tokens.FlowSequenceStartToken)) {\n              end_mark = this.peek_token().end_mark;\n              event = new events.SequenceStartEvent(anchor, tag, implicit, start_mark, end_mark, true);\n              this.state = 'parse_flow_sequence_first_entry';\n            } else if (this.check_token(tokens.FlowMappingStartToken)) {\n              end_mark = this.peek_token().end_mark;\n              event = new events.MappingStartEvent(anchor, tag, implicit, start_mark, end_mark, true);\n              this.state = 'parse_flow_mapping_first_key';\n            } else if (block && this.check_token(tokens.BlockSequenceStartToken)) {\n              end_mark = this.peek_token().end_mark;\n              event = new events.SequenceStartEvent(anchor, tag, implicit, start_mark, end_mark, false);\n              this.state = 'parse_block_sequence_first_entry';\n            } else if (block && this.check_token(tokens.BlockMappingStartToken)) {\n              end_mark = this.peek_token().end_mark;\n              event = new events.MappingStartEvent(anchor, tag, implicit, start_mark, end_mark, false);\n              this.state = 'parse_block_mapping_first_key';\n            } else if (anchor !== null || tag !== null) {\n              // Empty scalars are allowed even if a tag or an anchor is specified.\n              event = new events.ScalarEvent(anchor, tag, [implicit, false], '', start_mark, end_mark);\n              this.state = this.states.pop();\n            } else {\n              if (block) {\n                node = 'block';\n              } else {\n                node = 'flow';\n              }\n              token = this.peek_token();\n              throw new exports.ParserError(`while parsing a ${node} node`, start_mark, `expected the node content, but found ${token.id}`, token.start_mark);\n            }\n          }\n        }\n        return event;\n      }\n\n      // block_sequence ::= BLOCK-SEQUENCE-START (BLOCK-ENTRY block_node?)*\n      //   BLOCK-END\n      parse_block_sequence_first_entry() {\n        var token;\n        token = this.get_token();\n        this.marks.push(token.start_mark);\n        return this.parse_block_sequence_entry();\n      }\n\n      parse_block_sequence_entry() {\n        var event, token;\n        if (this.check_token(tokens.BlockEntryToken)) {\n          token = this.get_token();\n          if (!this.check_token(tokens.BlockEntryToken, tokens.BlockEndToken)) {\n            this.states.push('parse_block_sequence_entry');\n            return this.parse_block_node();\n          } else {\n            this.state = 'parse_block_sequence_entry';\n            return this.process_empty_scalar(token.end_mark);\n          }\n        }\n        if (!this.check_token(tokens.BlockEndToken)) {\n          token = this.peek_token();\n          throw new exports.ParserError('while parsing a block collection', this.marks.slice(-1)[0], `expected <block end>, but found ${token.id}`, token.start_mark);\n        }\n        token = this.get_token();\n        event = new events.SequenceEndEvent(token.start_mark, token.end_mark);\n        this.state = this.states.pop();\n        this.marks.pop();\n        return event;\n      }\n\n      // indentless_sequence ::= (BLOCK-ENTRY block_node?)+\n      parse_indentless_sequence_entry() {\n        var event, token;\n        if (this.check_token(tokens.BlockEntryToken)) {\n          token = this.get_token();\n          if (!this.check_token(tokens.BlockEntryToken, tokens.KeyToken, tokens.ValueToken, tokens.BlockEndToken)) {\n            this.states.push('parse_indentless_sequence_entry');\n            return this.parse_block_node();\n          } else {\n            this.state = 'parse_indentless_sequence_entry';\n            return this.process_empty_scalar(token.end_mark);\n          }\n        }\n        token = this.peek_token();\n        event = new events.SequenceEndEvent(token.start_mark, token.start_mark);\n        this.state = this.states.pop();\n        return event;\n      }\n\n      // block_mapping ::= BLOCK-MAPPING-START\n      //   ((KEY block_node_or_indentless_sequence?)?\n      //   (VALUE block_node_or_indentless_sequence?)?)* BLOCK-END\n      parse_block_mapping_first_key() {\n        var token;\n        token = this.get_token();\n        this.marks.push(token.start_mark);\n        return this.parse_block_mapping_key();\n      }\n\n      parse_block_mapping_key() {\n        var event, token;\n        if (this.check_token(tokens.KeyToken)) {\n          token = this.get_token();\n          if (!this.check_token(tokens.KeyToken, tokens.ValueToken, tokens.BlockEndToken)) {\n            this.states.push('parse_block_mapping_value');\n            return this.parse_block_node_or_indentless_sequence();\n          } else {\n            this.state = 'parse_block_mapping_value';\n            return this.process_empty_scalar(token.end_mark);\n          }\n        }\n        if (!this.check_token(tokens.BlockEndToken)) {\n          token = this.peek_token();\n          throw new exports.ParserError('while parsing a block mapping', this.marks.slice(-1)[0], `expected <block end>, but found ${token.id}`, token.start_mark);\n        }\n        token = this.get_token();\n        event = new events.MappingEndEvent(token.start_mark, token.end_mark);\n        this.state = this.states.pop();\n        this.marks.pop();\n        return event;\n      }\n\n      parse_block_mapping_value() {\n        var token;\n        if (this.check_token(tokens.ValueToken)) {\n          token = this.get_token();\n          if (!this.check_token(tokens.KeyToken, tokens.ValueToken, tokens.BlockEndToken)) {\n            this.states.push('parse_block_mapping_key');\n            return this.parse_block_node_or_indentless_sequence();\n          } else {\n            this.state = 'parse_block_mapping_key';\n            return this.process_empty_scalar(token.end_mark);\n          }\n        } else {\n          this.state = 'parse_block_mapping_key';\n          token = this.peek_token();\n          return this.process_empty_scalar(token.start_mark);\n        }\n      }\n\n      // flow_sequence ::= FLOW-SEQUENCE-START\n      //   (flow_sequence_entry FLOW-ENTRY)* flow_sequence_entry? FLOW-SEQUENCE-END\n      // flow_sequence_entry ::= flow_node | KEY flow_node? (VALUE flow_node?)?\n\n      // Note that while production rules for both flow_sequence_entry and\n      // flow_mapping_entry are equal, their interpretations are different.  For\n      // `flow_sequence_entry`, the part `KEY flow_node? (VALUE flow_node?)?`\n      // generate an inline mapping (set syntax).\n      parse_flow_sequence_first_entry() {\n        var token;\n        token = this.get_token();\n        this.marks.push(token.start_mark);\n        return this.parse_flow_sequence_entry(true);\n      }\n\n      parse_flow_sequence_entry(first = false) {\n        var event, token;\n        if (!this.check_token(tokens.FlowSequenceEndToken)) {\n          if (!first) {\n            if (this.check_token(tokens.FlowEntryToken)) {\n              this.get_token();\n            } else {\n              token = this.peek_token();\n              throw new exports.ParserError('while parsing a flow sequence', this.marks.slice(-1)[0], `expected ',' or ']', but got ${token.id}`, token.start_mark);\n            }\n          }\n          if (this.check_token(tokens.KeyToken)) {\n            token = this.peek_token();\n            event = new events.MappingStartEvent(null, null, true, token.start_mark, token.end_mark, true);\n            this.state = 'parse_flow_sequence_entry_mapping_key';\n            return event;\n          } else if (!this.check_token(tokens.FlowSequenceEndToken)) {\n            this.states.push('parse_flow_sequence_entry');\n            return this.parse_flow_node();\n          }\n        }\n        token = this.get_token();\n        event = new events.SequenceEndEvent(token.start_mark, token.end_mark);\n        this.state = this.states.pop();\n        this.marks.pop();\n        return event;\n      }\n\n      parse_flow_sequence_entry_mapping_key() {\n        var token;\n        token = this.get_token();\n        if (!this.check_token(tokens.ValueToken, tokens.FlowEntryToken, tokens.FlowSequenceEndToken)) {\n          this.states.push('parse_flow_sequence_entry_mapping_value');\n          return this.parse_flow_node();\n        } else {\n          this.state = 'parse_flow_sequence_entry_mapping_value';\n          return this.process_empty_scalar(token.end_mark);\n        }\n      }\n\n      parse_flow_sequence_entry_mapping_value() {\n        var token;\n        if (this.check_token(tokens.ValueToken)) {\n          token = this.get_token();\n          if (!this.check_token(tokens.FlowEntryToken, tokens.FlowSequenceEndToken)) {\n            this.states.push('parse_flow_sequence_entry_mapping_end');\n            return this.parse_flow_node();\n          } else {\n            this.state = 'parse_flow_sequence_entry_mapping_end';\n            return this.process_empty_scalar(token.end_mark);\n          }\n        } else {\n          this.state = 'parse_flow_sequence_entry_mapping_end';\n          token = this.peek_token();\n          return this.process_empty_scalar(token.start_mark);\n        }\n      }\n\n      parse_flow_sequence_entry_mapping_end() {\n        var token;\n        this.state = 'parse_flow_sequence_entry';\n        token = this.peek_token();\n        return new events.MappingEndEvent(token.start_mark, token.start_mark);\n      }\n\n      // flow_mapping ::= FLOW-MAPPING-START (flow_mapping_entry FLOW-ENTRY)*\n      //   flow_mapping_entry? FLOW-MAPPING-END\n      // flow_mapping_entry ::= flow_node | KEY flow_node? (VALUE flow_node?)?\n      parse_flow_mapping_first_key() {\n        var token;\n        token = this.get_token();\n        this.marks.push(token.start_mark);\n        return this.parse_flow_mapping_key(true);\n      }\n\n      parse_flow_mapping_key(first = false) {\n        var event, token;\n        if (!this.check_token(tokens.FlowMappingEndToken)) {\n          if (!first) {\n            if (this.check_token(tokens.FlowEntryToken)) {\n              this.get_token();\n            } else {\n              token = this.peek_token();\n              throw new exports.ParserError('while parsing a flow mapping', this.marks.slice(-1)[0], `expected ',' or '}', but got ${token.id}`, token.start_mark);\n            }\n          }\n          if (this.check_token(tokens.KeyToken)) {\n            token = this.get_token();\n            if (!this.check_token(tokens.ValueToken, tokens.FlowEntryToken, tokens.FlowMappingEndToken)) {\n              this.states.push('parse_flow_mapping_value');\n              return this.parse_flow_node();\n            } else {\n              this.state = 'parse_flow_mapping_value';\n              return this.process_empty_scalar(token.end_mark);\n            }\n          } else if (!this.check_token(tokens.FlowMappingEndToken)) {\n            this.states.push('parse_flow_mapping_empty_value');\n            return this.parse_flow_node();\n          }\n        }\n        token = this.get_token();\n        event = new events.MappingEndEvent(token.start_mark, token.end_mark);\n        this.state = this.states.pop();\n        this.marks.pop();\n        return event;\n      }\n\n      parse_flow_mapping_value() {\n        var token;\n        if (this.check_token(tokens.ValueToken)) {\n          token = this.get_token();\n          if (!this.check_token(tokens.FlowEntryToken, tokens.FlowMappingEndToken)) {\n            this.states.push('parse_flow_mapping_key');\n            return this.parse_flow_node();\n          } else {\n            this.state = 'parse_flow_mapping_key';\n            return this.process_empty_scalar(token.end_mark);\n          }\n        } else {\n          this.state = 'parse_flow_mapping_key';\n          token = this.peek_token();\n          return this.process_empty_scalar(token.start_mark);\n        }\n      }\n\n      parse_flow_mapping_empty_value() {\n        this.state = 'parse_flow_mapping_key';\n        return this.process_empty_scalar(this.peek_token().start_mark);\n      }\n\n      process_empty_scalar(mark) {\n        return new events.ScalarEvent(null, null, [true, false], '', mark, mark);\n      }\n\n    };\n\n    DEFAULT_TAGS = {\n      '!': '!',\n      '!!': 'tag:yaml.org,2002:'\n    };\n\n    ctor = Parser.prototype.initialise;\n\n    return Parser;\n\n  }).call(this);\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///806\n")},26:function(__unused_webpack_module,exports,__webpack_require__){eval("(function() {\n  var Mark, YAMLError,\n    indexOf = [].indexOf;\n\n  ({Mark, YAMLError} = __webpack_require__(372));\n\n  this.ReaderError = class ReaderError extends YAMLError {\n    constructor(position1, character1, reason) {\n      super();\n      this.position = position1;\n      this.character = character1;\n      this.reason = reason;\n    }\n\n    toString() {\n      return `unacceptable character #${this.character.charCodeAt(0).toString(16)}: ${this.reason}\\n  position ${this.position}`;\n    }\n\n  };\n\n  /*\n  Reader:\n    checks if characters are within the allowed range\n    add '\\x00' to the end\n  */\n  this.Reader = (function() {\n    var NON_PRINTABLE, ctor;\n\n    class Reader {\n      constructor() {\n        return ctor.apply(this, arguments);\n      }\n\n      initialise(string) {\n        this.string = string;\n        this.line = 0;\n        this.column = 0;\n        this.index = 0;\n        this.check_printable();\n        return this.string += '\\x00';\n      }\n\n      peek(index = 0) {\n        return this.string[this.index + index];\n      }\n\n      prefix(length = 1) {\n        return this.string.slice(this.index, this.index + length);\n      }\n\n      forward(length = 1) {\n        var char, results;\n        results = [];\n        while (length) {\n          char = this.string[this.index];\n          this.index++;\n          if (indexOf.call('\\n\\x85\\u2082\\u2029', char) >= 0 || (char === '\\r' && this.string[this.index] !== '\\n')) {\n            this.line++;\n            this.column = 0;\n          } else {\n            this.column++;\n          }\n          results.push(length--);\n        }\n        return results;\n      }\n\n      get_mark() {\n        return new Mark(this.line, this.column, this.string, this.index);\n      }\n\n      check_printable() {\n        var character, match, position;\n        match = NON_PRINTABLE.exec(this.string);\n        if (match) {\n          character = match[0];\n          position = (this.string.length - this.index) + match.index;\n          throw new exports.ReaderError(position, character, 'special characters are not allowed');\n        }\n      }\n\n    };\n\n    NON_PRINTABLE = /[^\\x09\\x0A\\x0D\\x20-\\x7E\\x85\\xA0-\\uFFFD]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/; // Invalid single characters\n    // Missing or invalid low surrogate\n    // Missing or invalid high surrogate\n\n    ctor = Reader.prototype.initialise;\n\n    return Reader;\n\n  }).call(this);\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBLElBQUksaUJBQWlCLEVBQUUsbUJBQU8sQ0FBQyxHQUFVOztBQUV6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdDQUF3QywwQ0FBMEMsSUFBSSxZQUFZLGVBQWUsY0FBYztBQUMvSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHdJQUF3STtBQUN4STtBQUNBOztBQUVBOztBQUVBOztBQUVBLEdBQUc7O0FBRUgsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RlbGVvcHh5ei8uL25vZGVfbW9kdWxlcy95YW1sLWpzL2xpYi9yZWFkZXIuanM/YzM1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG4gIHZhciBNYXJrLCBZQU1MRXJyb3IsXG4gICAgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbiAgKHtNYXJrLCBZQU1MRXJyb3J9ID0gcmVxdWlyZSgnLi9lcnJvcnMnKSk7XG5cbiAgdGhpcy5SZWFkZXJFcnJvciA9IGNsYXNzIFJlYWRlckVycm9yIGV4dGVuZHMgWUFNTEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3NpdGlvbjEsIGNoYXJhY3RlcjEsIHJlYXNvbikge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjE7XG4gICAgICB0aGlzLmNoYXJhY3RlciA9IGNoYXJhY3RlcjE7XG4gICAgICB0aGlzLnJlYXNvbiA9IHJlYXNvbjtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBgdW5hY2NlcHRhYmxlIGNoYXJhY3RlciAjJHt0aGlzLmNoYXJhY3Rlci5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KX06ICR7dGhpcy5yZWFzb259XFxuICBwb3NpdGlvbiAke3RoaXMucG9zaXRpb259YDtcbiAgICB9XG5cbiAgfTtcblxuICAvKlxuICBSZWFkZXI6XG4gICAgY2hlY2tzIGlmIGNoYXJhY3RlcnMgYXJlIHdpdGhpbiB0aGUgYWxsb3dlZCByYW5nZVxuICAgIGFkZCAnXFx4MDAnIHRvIHRoZSBlbmRcbiAgKi9cbiAgdGhpcy5SZWFkZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIE5PTl9QUklOVEFCTEUsIGN0b3I7XG5cbiAgICBjbGFzcyBSZWFkZXIge1xuICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHJldHVybiBjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIGluaXRpYWxpc2Uoc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc3RyaW5nID0gc3RyaW5nO1xuICAgICAgICB0aGlzLmxpbmUgPSAwO1xuICAgICAgICB0aGlzLmNvbHVtbiA9IDA7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmNoZWNrX3ByaW50YWJsZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJpbmcgKz0gJ1xceDAwJztcbiAgICAgIH1cblxuICAgICAgcGVlayhpbmRleCA9IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaW5nW3RoaXMuaW5kZXggKyBpbmRleF07XG4gICAgICB9XG5cbiAgICAgIHByZWZpeChsZW5ndGggPSAxKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmluZy5zbGljZSh0aGlzLmluZGV4LCB0aGlzLmluZGV4ICsgbGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgZm9yd2FyZChsZW5ndGggPSAxKSB7XG4gICAgICAgIHZhciBjaGFyLCByZXN1bHRzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIHdoaWxlIChsZW5ndGgpIHtcbiAgICAgICAgICBjaGFyID0gdGhpcy5zdHJpbmdbdGhpcy5pbmRleF07XG4gICAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgICAgIGlmIChpbmRleE9mLmNhbGwoJ1xcblxceDg1XFx1MjA4MlxcdTIwMjknLCBjaGFyKSA+PSAwIHx8IChjaGFyID09PSAnXFxyJyAmJiB0aGlzLnN0cmluZ1t0aGlzLmluZGV4XSAhPT0gJ1xcbicpKSB7XG4gICAgICAgICAgICB0aGlzLmxpbmUrKztcbiAgICAgICAgICAgIHRoaXMuY29sdW1uID0gMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb2x1bW4rKztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKGxlbmd0aC0tKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH1cblxuICAgICAgZ2V0X21hcmsoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWFyayh0aGlzLmxpbmUsIHRoaXMuY29sdW1uLCB0aGlzLnN0cmluZywgdGhpcy5pbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGNoZWNrX3ByaW50YWJsZSgpIHtcbiAgICAgICAgdmFyIGNoYXJhY3RlciwgbWF0Y2gsIHBvc2l0aW9uO1xuICAgICAgICBtYXRjaCA9IE5PTl9QUklOVEFCTEUuZXhlYyh0aGlzLnN0cmluZyk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIGNoYXJhY3RlciA9IG1hdGNoWzBdO1xuICAgICAgICAgIHBvc2l0aW9uID0gKHRoaXMuc3RyaW5nLmxlbmd0aCAtIHRoaXMuaW5kZXgpICsgbWF0Y2guaW5kZXg7XG4gICAgICAgICAgdGhyb3cgbmV3IGV4cG9ydHMuUmVhZGVyRXJyb3IocG9zaXRpb24sIGNoYXJhY3RlciwgJ3NwZWNpYWwgY2hhcmFjdGVycyBhcmUgbm90IGFsbG93ZWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfTtcblxuICAgIE5PTl9QUklOVEFCTEUgPSAvW15cXHgwOVxceDBBXFx4MERcXHgyMC1cXHg3RVxceDg1XFx4QTAtXFx1RkZGRF18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0vOyAvLyBJbnZhbGlkIHNpbmdsZSBjaGFyYWN0ZXJzXG4gICAgLy8gTWlzc2luZyBvciBpbnZhbGlkIGxvdyBzdXJyb2dhdGVcbiAgICAvLyBNaXNzaW5nIG9yIGludmFsaWQgaGlnaCBzdXJyb2dhdGVcblxuICAgIGN0b3IgPSBSZWFkZXIucHJvdG90eXBlLmluaXRpYWxpc2U7XG5cbiAgICByZXR1cm4gUmVhZGVyO1xuXG4gIH0pLmNhbGwodGhpcyk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///26\n")},832:function(__unused_webpack_module,exports,__webpack_require__){eval("(function() {\n  var YAMLError, nodes,\n    hasProp = {}.hasOwnProperty;\n\n  nodes = __webpack_require__(914);\n\n  ({YAMLError} = __webpack_require__(372));\n\n  this.RepresenterError = class RepresenterError extends YAMLError {};\n\n  this.BaseRepresenter = (function() {\n    var ctor;\n\n    class BaseRepresenter {\n      constructor() {\n        return ctor.apply(this, arguments);\n      }\n\n      static add_representer(data_type, handler) {\n        if (!this.prototype.hasOwnProperty('yaml_representers_types')) {\n          this.prototype.yaml_representers_types = [].concat(this.prototype.yaml_representers_types);\n        }\n        if (!this.prototype.hasOwnProperty('yaml_representers_handlers')) {\n          this.prototype.yaml_representers_handlers = [].concat(this.prototype.yaml_representers_handlers);\n        }\n        this.prototype.yaml_representers_types.push(data_type);\n        return this.prototype.yaml_representers_handlers.push(handler);\n      }\n\n      static add_multi_representer(data_type, handler) {\n        if (!this.prototype.hasOwnProperty('yaml_multi_representers_types')) {\n          this.prototype.yaml_multi_representers_types = [].concat(this.prototype.yaml_multi_representers_types);\n        }\n        if (!this.prototype.hasOwnProperty('yaml_multi_representers_handlers')) {\n          this.prototype.yaml_multi_representers_handlers = [].concat(this.prototype.yaml_multi_representers_handlers);\n        }\n        this.prototype.yaml_multi_representers_types.push(data_type);\n        return this.prototype.yaml_multi_representers_handlers.push(handler);\n      }\n\n      initialise({\n          default_style: default_style,\n          default_flow_style: default_flow_style\n        } = {}) {\n        this.default_style = default_style;\n        this.default_flow_style = default_flow_style;\n        this.represented_objects = {};\n        this.object_keeper = [];\n        return this.alias_key = null;\n      }\n\n      represent(data) {\n        var node;\n        node = this.represent_data(data);\n        this.serialize(node);\n        this.represented_objects = {};\n        this.object_keeper = [];\n        return this.alias_key = null;\n      }\n\n      represent_data(data) {\n        var data_type, i, j, len, ref, representer, type;\n        if (this.ignore_aliases(data)) {\n          this.alias_key = null;\n        } else if ((i = this.object_keeper.indexOf(data)) !== -1) {\n          this.alias_key = i;\n          if (this.alias_key in this.represented_objects) {\n            return this.represented_objects[this.alias_key];\n          }\n        } else {\n          this.alias_key = this.object_keeper.length;\n          this.object_keeper.push(data);\n        }\n        // Bit fiddly: we look into our non-multi representers using the JS type if `data` is not an\n        // object, otherwise we use the object's constructor.  For multi-representers we just use\n        // instanceof.  A representer for `undefined` can be called for any type.\n        representer = null;\n        data_type = data === null ? 'null' : typeof data;\n        if (data_type === 'object') {\n          data_type = data.constructor;\n        }\n        if ((i = this.yaml_representers_types.lastIndexOf(data_type)) !== -1) {\n          representer = this.yaml_representers_handlers[i];\n        }\n        if (representer == null) {\n          ref = this.yaml_multi_representers_types;\n          for (i = j = 0, len = ref.length; j < len; i = ++j) {\n            type = ref[i];\n            if (!(data instanceof type)) {\n              continue;\n            }\n            representer = this.yaml_multi_representers_handlers[i];\n            break;\n          }\n        }\n        if (representer == null) {\n          if ((i = this.yaml_multi_representers_types.lastIndexOf(void 0)) !== -1) {\n            representer = this.yaml_multi_representers_handlers[i];\n          } else if ((i = this.yaml_representers_types.lastIndexOf(void 0)) !== -1) {\n            representer = this.yaml_representers_handlers[i];\n          }\n        }\n        if (representer != null) {\n          return representer.call(this, data);\n        } else {\n          return new nodes.ScalarNode(null, `${data}`);\n        }\n      }\n\n      represent_scalar(tag, value, style = this.default_style) {\n        var node;\n        node = new nodes.ScalarNode(tag, value, null, null, style);\n        if (this.alias_key != null) {\n          this.represented_objects[this.alias_key] = node;\n        }\n        return node;\n      }\n\n      represent_sequence(tag, sequence, flow_style) {\n        var best_style, item, j, len, node, node_item, ref, value;\n        value = [];\n        node = new nodes.SequenceNode(tag, value, null, null, flow_style);\n        if (this.alias_key != null) {\n          this.represented_objects[this.alias_key] = node;\n        }\n        best_style = true;\n        for (j = 0, len = sequence.length; j < len; j++) {\n          item = sequence[j];\n          node_item = this.represent_data(item);\n          if (!(node_item instanceof nodes.ScalarNode || node_item.style)) {\n            best_style = false;\n          }\n          value.push(node_item);\n        }\n        if (flow_style == null) {\n          node.flow_style = (ref = this.default_flow_style) != null ? ref : best_style;\n        }\n        return node;\n      }\n\n      represent_mapping(tag, mapping, flow_style) {\n        var best_style, item_key, item_value, node, node_key, node_value, ref, value;\n        value = [];\n        node = new nodes.MappingNode(tag, value, flow_style);\n        if (this.alias_key) {\n          this.represented_objects[this.alias_key] = node;\n        }\n        best_style = true;\n        for (item_key in mapping) {\n          if (!hasProp.call(mapping, item_key)) continue;\n          item_value = mapping[item_key];\n          node_key = this.represent_data(item_key);\n          node_value = this.represent_data(item_value);\n          if (!(node_key instanceof nodes.ScalarNode || node_key.style)) {\n            best_style = false;\n          }\n          if (!(node_value instanceof nodes.ScalarNode || node_value.style)) {\n            best_style = false;\n          }\n          value.push([node_key, node_value]);\n        }\n        if (!flow_style) {\n          node.flow_style = (ref = this.default_flow_style) != null ? ref : best_style;\n        }\n        return node;\n      }\n\n      ignore_aliases(data) {\n        return false;\n      }\n\n    };\n\n    BaseRepresenter.prototype.yaml_representers_types = [];\n\n    BaseRepresenter.prototype.yaml_representers_handlers = [];\n\n    BaseRepresenter.prototype.yaml_multi_representers_types = [];\n\n    BaseRepresenter.prototype.yaml_multi_representers_handlers = [];\n\n    ctor = BaseRepresenter.prototype.initialise;\n\n    return BaseRepresenter;\n\n  }).call(this);\n\n  this.Representer = class Representer extends this.BaseRepresenter {\n    represent_boolean(data) {\n      return this.represent_scalar('tag:yaml.org,2002:bool', (data ? 'true' : 'false'));\n    }\n\n    represent_null(data) {\n      return this.represent_scalar('tag:yaml.org,2002:null', 'null');\n    }\n\n    represent_number(data) {\n      var tag, value;\n      tag = `tag:yaml.org,2002:${(data % 1 === 0 ? 'int' : 'float')}`;\n      value = data !== data ? '.nan' : data === 2e308 ? '.inf' : data === -2e308 ? '-.inf' : data.toString();\n      return this.represent_scalar(tag, value);\n    }\n\n    represent_string(data) {\n      return this.represent_scalar('tag:yaml.org,2002:str', data);\n    }\n\n    represent_array(data) {\n      return this.represent_sequence('tag:yaml.org,2002:seq', data);\n    }\n\n    represent_date(data) {\n      return this.represent_scalar('tag:yaml.org,2002:timestamp', data.toISOString());\n    }\n\n    represent_object(data) {\n      return this.represent_mapping('tag:yaml.org,2002:map', data);\n    }\n\n    represent_undefined(data) {\n      throw new exports.RepresenterError(`cannot represent an onbject: ${data}`);\n    }\n\n    ignore_aliases(data) {\n      var ref;\n      if (data == null) {\n        return true;\n      }\n      if ((ref = typeof data) === 'boolean' || ref === 'number' || ref === 'string') {\n        return true;\n      }\n      return false;\n    }\n\n  };\n\n  this.Representer.add_representer('boolean', this.Representer.prototype.represent_boolean);\n\n  this.Representer.add_representer('null', this.Representer.prototype.represent_null);\n\n  this.Representer.add_representer('number', this.Representer.prototype.represent_number);\n\n  this.Representer.add_representer('string', this.Representer.prototype.represent_string);\n\n  this.Representer.add_representer(Array, this.Representer.prototype.represent_array);\n\n  this.Representer.add_representer(Date, this.Representer.prototype.represent_date);\n\n  this.Representer.add_representer(Object, this.Representer.prototype.represent_object);\n\n  this.Representer.add_representer(null, this.Representer.prototype.represent_undefined);\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///832\n")},579:function(__unused_webpack_module,__unused_webpack_exports,__webpack_require__){eval("(function() {\n  var YAMLError, nodes, util,\n    indexOf = [].indexOf;\n\n  nodes = __webpack_require__(914);\n\n  util = __webpack_require__(823);\n\n  ({YAMLError} = __webpack_require__(372));\n\n  this.ResolverError = class ResolverError extends YAMLError {};\n\n  this.BaseResolver = (function() {\n    var DEFAULT_MAPPING_TAG, DEFAULT_SCALAR_TAG, DEFAULT_SEQUENCE_TAG, ctor;\n\n    class BaseResolver {\n      constructor() {\n        return ctor.apply(this, arguments);\n      }\n\n      static add_implicit_resolver(tag, regexp, first = [null]) {\n        var base, char, i, len, results;\n        if (!this.prototype.hasOwnProperty('yaml_implicit_resolvers')) {\n          this.prototype.yaml_implicit_resolvers = util.extend({}, this.prototype.yaml_implicit_resolvers);\n        }\n        results = [];\n        for (i = 0, len = first.length; i < len; i++) {\n          char = first[i];\n          results.push(((base = this.prototype.yaml_implicit_resolvers)[char] != null ? base[char] : base[char] = []).push([tag, regexp]));\n        }\n        return results;\n      }\n\n      initialise() {\n        this.resolver_exact_paths = [];\n        return this.resolver_prefix_paths = [];\n      }\n\n      descend_resolver(current_node, current_index) {\n        var depth, exact_paths, i, j, kind, len, len1, path, prefix_paths, ref, ref1;\n        if (util.is_empty(this.yaml_path_resolvers)) {\n          return;\n        }\n        exact_paths = {};\n        prefix_paths = [];\n        if (current_node) {\n          depth = this.resolver_prefix_paths.length;\n          ref = this.resolver_prefix_paths.slice(-1)[0];\n          for (i = 0, len = ref.length; i < len; i++) {\n            [path, kind] = ref[i];\n            if (this.check_resolver_prefix(depth, path, kind, current_node, current_index)) {\n              if (path.length > depth) {\n                prefix_paths.push([path, kind]);\n              } else {\n                exact_paths[kind] = this.yaml_path_resolvers[path][kind];\n              }\n            }\n          }\n        } else {\n          ref1 = this.yaml_path_resolvers;\n          for (j = 0, len1 = ref1.length; j < len1; j++) {\n            [path, kind] = ref1[j];\n            if (!path) {\n              exact_paths[kind] = this.yaml_path_resolvers[path][kind];\n            } else {\n              prefix_paths.push([path, kind]);\n            }\n          }\n        }\n        this.resolver_exact_paths.push(exact_paths);\n        return this.resolver_prefix_paths.push(prefix_paths);\n      }\n\n      ascend_resolver() {\n        if (util.is_empty(this.yaml_path_resolvers)) {\n          return;\n        }\n        this.resolver_exact_paths.pop();\n        return this.resolver_prefix_paths.pop();\n      }\n\n      check_resolver_prefix(depth, path, kind, current_node, current_index) {\n        var index_check, node_check;\n        [node_check, index_check] = path[depth - 1];\n        if (typeof node_check === 'string') {\n          if (current_node.tag !== node_check) {\n            return;\n          }\n        } else if (node_check !== null) {\n          if (!(current_node instanceof node_check)) {\n            return;\n          }\n        }\n        if (index_check === true && current_index !== null) {\n          return;\n        }\n        if ((index_check === false || index_check === null) && current_index === null) {\n          return;\n        }\n        if (typeof index_check === 'string') {\n          if (!(current_index instanceof nodes.ScalarNode) && index_check === current_index.value) {\n            return;\n          }\n        } else if (typeof index_check === 'number') {\n          if (index_check !== current_index) {\n            return;\n          }\n        }\n        return true;\n      }\n\n      resolve(kind, value, implicit) {\n        var empty, exact_paths, i, k, len, ref, ref1, ref2, regexp, resolvers, tag;\n        if (kind === nodes.ScalarNode && implicit[0]) {\n          if (value === '') {\n            resolvers = (ref = this.yaml_implicit_resolvers['']) != null ? ref : [];\n          } else {\n            resolvers = (ref1 = this.yaml_implicit_resolvers[value[0]]) != null ? ref1 : [];\n          }\n          resolvers = resolvers.concat((ref2 = this.yaml_implicit_resolvers[null]) != null ? ref2 : []);\n          for (i = 0, len = resolvers.length; i < len; i++) {\n            [tag, regexp] = resolvers[i];\n            if (value.match(regexp)) {\n              return tag;\n            }\n          }\n          implicit = implicit[1];\n        }\n        empty = true;\n        for (k in this.yaml_path_resolvers) {\n          if ({}[k] == null) {\n            empty = false;\n          }\n        }\n        if (!empty) {\n          exact_paths = this.resolver_exact_paths.slice(-1)[0];\n          if (indexOf.call(exact_paths, kind) >= 0) {\n            return exact_paths[kind];\n          }\n          if (indexOf.call(exact_paths, null) >= 0) {\n            return exact_paths[null];\n          }\n        }\n        if (kind === nodes.ScalarNode) {\n          return DEFAULT_SCALAR_TAG;\n        }\n        if (kind === nodes.SequenceNode) {\n          return DEFAULT_SEQUENCE_TAG;\n        }\n        if (kind === nodes.MappingNode) {\n          return DEFAULT_MAPPING_TAG;\n        }\n      }\n\n    };\n\n    DEFAULT_SCALAR_TAG = 'tag:yaml.org,2002:str';\n\n    DEFAULT_SEQUENCE_TAG = 'tag:yaml.org,2002:seq';\n\n    DEFAULT_MAPPING_TAG = 'tag:yaml.org,2002:map';\n\n    BaseResolver.prototype.yaml_implicit_resolvers = {};\n\n    BaseResolver.prototype.yaml_path_resolvers = {};\n\n    ctor = BaseResolver.prototype.initialise;\n\n    return BaseResolver;\n\n  }).call(this);\n\n  this.Resolver = class Resolver extends this.BaseResolver {};\n\n  this.Resolver.add_implicit_resolver('tag:yaml.org,2002:bool', /^(?:yes|Yes|YES|true|True|TRUE|on|On|ON|no|No|NO|false|False|FALSE|off|Off|OFF)$/, 'yYnNtTfFoO');\n\n  this.Resolver.add_implicit_resolver('tag:yaml.org,2002:float', /^(?:[-+]?(?:[0-9][0-9_]*)\\.[0-9_]*(?:[eE][-+][0-9]+)?|\\.[0-9_]+(?:[eE][-+][0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$/, '-+0123456789.');\n\n  this.Resolver.add_implicit_resolver('tag:yaml.org,2002:int', /^(?:[-+]?0b[01_]+|[-+]?0[0-7_]+|[-+]?(?:0|[1-9][0-9_]*)|[-+]?0x[0-9a-fA-F_]+|[-+]?0o[0-7_]+|[-+]?[1-9][0-9_]*(?::[0-5]?[0-9])+)$/, '-+0123456789');\n\n  this.Resolver.add_implicit_resolver('tag:yaml.org,2002:merge', /^(?:<<)$/, '<');\n\n  this.Resolver.add_implicit_resolver('tag:yaml.org,2002:null', /^(?:~|null|Null|NULL|)$/, ['~', 'n', 'N', '']);\n\n  this.Resolver.add_implicit_resolver('tag:yaml.org,2002:timestamp', /^(?:[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]|[0-9][0-9][0-9][0-9]-[0-9][0-9]?-[0-9][0-9]?(?:[Tt]|[\\x20\\t]+)[0-9][0-9]?:[0-9][0-9]:[0-9][0-9](?:\\.[0-9]*)?(?:[\\x20\\t]*(?:Z|[-+][0-9][0-9]?(?::[0-9][0-9])?))?)$/, '0123456789');\n\n  this.Resolver.add_implicit_resolver('tag:yaml.org,2002:value', /^(?:=)$/, '=');\n\n  // The following resolver is only for documentation purposes.  It cannot work\n  // because plain scalars cannot start with '!', '&' or '*'.\n  this.Resolver.add_implicit_resolver('tag:yaml.org,2002:yaml', /^(?:!|&|\\*)$/, '!&*');\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///579\n")},265:function(__unused_webpack_module,exports,__webpack_require__){eval("(function() {\n  var MarkedYAMLError, SimpleKey, tokens, util,\n    hasProp = {}.hasOwnProperty,\n    indexOf = [].indexOf;\n\n  ({MarkedYAMLError} = __webpack_require__(372));\n\n  tokens = __webpack_require__(902);\n\n  util = __webpack_require__(823);\n\n  /*\n  The Scanner throws these.\n  */\n  this.ScannerError = class ScannerError extends MarkedYAMLError {};\n\n  /*\n  Represents a possible simple key.\n  */\n  SimpleKey = class SimpleKey {\n    constructor(token_number1, required1, index, line, column1, mark1) {\n      this.token_number = token_number1;\n      this.required = required1;\n      this.index = index;\n      this.line = line;\n      this.column = column1;\n      this.mark = mark1;\n    }\n\n  };\n\n  /*\n  The Scanner class deals with converting a YAML stream into a token stream.\n  */\n  this.Scanner = (function() {\n    var C_LB, C_NUMBERS, C_WS, ESCAPE_CODES, ESCAPE_REPLACEMENTS, ctor;\n\n    class Scanner {\n      constructor() {\n        return ctor.apply(this, arguments);\n      }\n\n      /*\n      Initialise the Scanner\n      */\n      initialise() {\n        // Have we reached the end of the stream?\n        this.done = false;\n        // How many unclosed '{' or '[' have been seen. '0' implies block context.\n        this.flow_level = 0;\n        // List of processed tokens not yet emitted.\n        this.tokens = [];\n        // Add the STREAM-START token.\n        this.fetch_stream_start();\n        // Number of tokens emitted through the `get_token` method.\n        this.tokens_taken = 0;\n        // Current indentation level. '-1' means no indentation has been seen.\n        this.indent = -1;\n        // Previous indentation levels.\n        this.indents = [];\n        // Simple Key Treatment\n        //   A simple key is a key that is not denoted by the '?' indicator, e.g.\n        //     block simple key: value\n        //     ? not a simple key\n        //     : { flow simple key: value }\n        //   We emit the KEY token before all keys, so when we find a potential\n        //   simple key, we try to locate the corresponding ':' indicator.  Simple\n        //   keys should be limited to a single line and 1024 characters.\n\n        // Can a simple key start at the current position?  A simple key may\n        // start\n        //   at the beginning of the line, not counting indentation spaces\n        //     (block context)\n        //   after '{', '[', ',' (flow context)\n        //   after '?', ':', '-' (block context)\n        // In the block context, this flag also signifies if a block collection\n        // may start at the current position.\n        this.allow_simple_key = true;\n        // Keep track of possible simple keys.  This is an object.  The key is\n        // `flow_level`; there can be no more than one possible simple key for\n        // each level.  The value is a SimpleKey object. A simple key may start\n        // with ALIAS, ANCHOR, TAG, SCALAR (flow), '[' or '{' tokens.\n        return this.possible_simple_keys = {};\n      }\n\n      // API methods.\n      /*\n      Check if the next token is one of the given types.\n      */\n      check_token(...choices) {\n        var choice, i, len;\n        while (this.need_more_tokens()) {\n          this.fetch_more_tokens();\n        }\n        if (this.tokens.length !== 0) {\n          if (choices.length === 0) {\n            return true;\n          }\n          for (i = 0, len = choices.length; i < len; i++) {\n            choice = choices[i];\n            if (this.tokens[0] instanceof choice) {\n              return true;\n            }\n          }\n        }\n        return false;\n      }\n\n      /*\n      Return the next token, but do not delete it from the queue.\n      */\n      peek_token() {\n        while (this.need_more_tokens()) {\n          this.fetch_more_tokens();\n        }\n        if (this.tokens.length !== 0) {\n          return this.tokens[0];\n        }\n      }\n\n      /*\n      Return the next token, and remove it from the queue.\n      */\n      get_token() {\n        while (this.need_more_tokens()) {\n          this.fetch_more_tokens();\n        }\n        if (this.tokens.length !== 0) {\n          this.tokens_taken++;\n          return this.tokens.shift();\n        }\n      }\n\n      // Non-API methods.\n      need_more_tokens() {\n        if (this.done) {\n          return false;\n        }\n        if (this.tokens.length === 0) {\n          return true;\n        }\n        // The current token may be a potential simple key, so we need to look\n        // further.\n        this.stale_possible_simple_keys();\n        if (this.next_possible_simple_key() === this.tokens_taken) {\n          return true;\n        }\n        return false;\n      }\n\n      fetch_more_tokens() {\n        var char;\n        // Eat whitespace and comments until we reach the next token.\n        this.scan_to_next_token();\n        // Remove obsolete possible simple keys\n        this.stale_possible_simple_keys();\n        // Compare the current indentation and column. It may add some tokens and\n        // decrease the current indentation level.\n        this.unwind_indent(this.column);\n        // Peek the next character.\n        char = this.peek();\n        if (char === '\\x00') {\n          // Is it the end of stream?\n          return this.fetch_stream_end();\n        }\n        if (char === '%' && this.check_directive()) {\n          // Is it a directive?\n          return this.fetch_directive();\n        }\n        if (char === '-' && this.check_document_start()) {\n          // Is it the document start?\n          return this.fetch_document_start();\n        }\n        if (char === '.' && this.check_document_end()) {\n          // Is it the document end?\n          return this.fetch_document_end();\n        }\n        if (char === '[') {\n          // TODO: support for BOM within a stream.\n\n          // Is it the flow sequence start indicator?\n          return this.fetch_flow_sequence_start();\n        }\n        if (char === '{') {\n          // Is it the flow mapping start indicator?\n          return this.fetch_flow_mapping_start();\n        }\n        if (char === ']') {\n          // Is it the flow sequence end indicator?\n          return this.fetch_flow_sequence_end();\n        }\n        if (char === '}') {\n          // Is it the flow mapping end indicator?\n          return this.fetch_flow_mapping_end();\n        }\n        if (char === ',') {\n          // Is it the flow entry indicator?\n          return this.fetch_flow_entry();\n        }\n        if (char === '-' && this.check_block_entry()) {\n          // Is it the block entry indicator?\n          return this.fetch_block_entry();\n        }\n        if (char === '?' && this.check_key()) {\n          // Is it the key indicator?\n          return this.fetch_key();\n        }\n        if (char === ':' && this.check_value()) {\n          // Is it the value indicator?\n          return this.fetch_value();\n        }\n        if (char === '*') {\n          // Is it an alias?\n          return this.fetch_alias();\n        }\n        if (char === '&') {\n          // Is it an anchor?\n          return this.fetch_anchor();\n        }\n        if (char === '!') {\n          // Is it a tag?\n          return this.fetch_tag();\n        }\n        if (char === '|' && this.flow_level === 0) {\n          // Is it a literal scalar?\n          return this.fetch_literal();\n        }\n        if (char === '>' && this.flow_level === 0) {\n          // Is it a folded scalar?\n          return this.fetch_folded();\n        }\n        if (char === '\\'') {\n          // Is it a single quoted scalar?\n          return this.fetch_single();\n        }\n        if (char === '\"') {\n          // Is it a double quoted scalar?\n          return this.fetch_double();\n        }\n        if (this.check_plain()) {\n          // It must be a plain scalar then.\n          return this.fetch_plain();\n        }\n        // No? It's an error.\n        throw new exports.ScannerError('while scanning for the next token', null, `found character ${char} that cannot start any token`, this.get_mark());\n      }\n\n      // Simple keys treatment.\n      /*\n      Return the number of the nearest possible simple key.\n      */\n      next_possible_simple_key() {\n        var key, level, min_token_number, ref;\n        min_token_number = null;\n        ref = this.possible_simple_keys;\n        for (level in ref) {\n          if (!hasProp.call(ref, level)) continue;\n          key = ref[level];\n          if (min_token_number === null || key.token_number < min_token_number) {\n            min_token_number = key.token_number;\n          }\n        }\n        return min_token_number;\n      }\n\n      /*\n      Remove entries that are no longer possible simple keys.  According to the\n      YAML spec, simple keys:\n      should be limited to a single line\n      should be no longer than 1024 characters\n      Disabling this procedure will allow simple keys of any length and height\n      (may cause problems if indentation is broken though).\n      */\n      stale_possible_simple_keys() {\n        var key, level, ref, results;\n        ref = this.possible_simple_keys;\n        results = [];\n        for (level in ref) {\n          if (!hasProp.call(ref, level)) continue;\n          key = ref[level];\n          if (key.line === this.line && this.index - key.index <= 1024) {\n            continue;\n          }\n          if (!key.required) {\n            results.push(delete this.possible_simple_keys[level]);\n          } else {\n            throw new exports.ScannerError('while scanning a simple key', key.mark, 'could not find expected \\':\\'', this.get_mark());\n          }\n        }\n        return results;\n      }\n\n      /*\n      The next token may start a simple key.  We check if it's possible and save\n      its position.  This function is called for ALIAS, ANCHOR, TAG,\n      SCALAR (flow),'[' and '{'.\n      */\n      save_possible_simple_key() {\n        var required, token_number;\n        // Check if a simple key is required at the current position.\n        required = this.flow_level === 0 && this.indent === this.column;\n        if (required && !this.allow_simple_key) {\n          // A simple key is required only if it is the first token in the current\n          // line.  Therefore it is always allowed.\n          throw new Error('logic failure');\n        }\n        // If simple keys aren't allowed here we're done.\n        if (!this.allow_simple_key) {\n          return;\n        }\n        // The next token might be a simple key.  Let's save its number and\n        // position.\n        this.remove_possible_simple_key();\n        token_number = this.tokens_taken + this.tokens.length;\n        return this.possible_simple_keys[this.flow_level] = new SimpleKey(token_number, required, this.index, this.line, this.column, this.get_mark());\n      }\n\n      /*\n      Remove the saved possible simple key at the current flow level.\n      */\n      remove_possible_simple_key() {\n        var key;\n        if (!(key = this.possible_simple_keys[this.flow_level])) {\n          return;\n        }\n        if (!key.required) {\n          return delete this.possible_simple_keys[this.flow_level];\n        } else {\n          throw new exports.ScannerError('while scanning a simple key', key.mark, 'could not find expected \\':\\'', this.get_mark());\n        }\n      }\n\n      // Indentation functions\n      /*\n      In flow context, tokens should respect indentation.\n      Actually the condition should be `self.indent >= column` according to\n      the spec. But this condition will prohibit intuitively correct\n      constructions such as\n        key : {\n        }\n      */\n      unwind_indent(column) {\n        var mark, results;\n        // In the flow context, indentation is ignored.  We make the scanner less\n        // restrictive than the specification requires.\n        if (this.flow_level !== 0) {\n          return;\n        }\n        results = [];\n        // In block context we may need to issue the BLOCK-END tokens.\n        while (this.indent > column) {\n          mark = this.get_mark();\n          this.indent = this.indents.pop();\n          results.push(this.tokens.push(new tokens.BlockEndToken(mark, mark)));\n        }\n        return results;\n      }\n\n      /*\n      Check if we need to increase indentation.\n      */\n      add_indent(column) {\n        if (!(column > this.indent)) {\n          return false;\n        }\n        this.indents.push(this.indent);\n        this.indent = column;\n        return true;\n      }\n\n      // Fetchers.\n      fetch_stream_start() {\n        var mark;\n        mark = this.get_mark();\n        return this.tokens.push(new tokens.StreamStartToken(mark, mark, this.encoding));\n      }\n\n      fetch_stream_end() {\n        var mark;\n        // Set the current indentation to -1.\n        this.unwind_indent(-1);\n        // Reset simple keys.\n        this.remove_possible_simple_key();\n        this.allow_possible_simple_key = false;\n        this.possible_simple_keys = {};\n        mark = this.get_mark();\n        this.tokens.push(new tokens.StreamEndToken(mark, mark));\n        // The stream is finished.\n        return this.done = true;\n      }\n\n      fetch_directive() {\n        // Set the current indentation to -1.\n        this.unwind_indent(-1);\n        // Reset simple keys.\n        this.remove_possible_simple_key();\n        this.allow_simple_key = false;\n        // Scan and add DIRECTIVE\n        return this.tokens.push(this.scan_directive());\n      }\n\n      fetch_document_start() {\n        return this.fetch_document_indicator(tokens.DocumentStartToken);\n      }\n\n      fetch_document_end() {\n        return this.fetch_document_indicator(tokens.DocumentEndToken);\n      }\n\n      fetch_document_indicator(TokenClass) {\n        var start_mark;\n        // Set the current indentation to -1.\n        this.unwind_indent(-1);\n        // Reset simple keys.  Note that there would not be a block collection\n        // after '---'.\n        this.remove_possible_simple_key();\n        this.allow_simple_key = false;\n        // Add DOCUMENT-START or DOCUMENT-END.\n        start_mark = this.get_mark();\n        this.forward(3);\n        return this.tokens.push(new TokenClass(start_mark, this.get_mark()));\n      }\n\n      fetch_flow_sequence_start() {\n        return this.fetch_flow_collection_start(tokens.FlowSequenceStartToken);\n      }\n\n      fetch_flow_mapping_start() {\n        return this.fetch_flow_collection_start(tokens.FlowMappingStartToken);\n      }\n\n      fetch_flow_collection_start(TokenClass) {\n        var start_mark;\n        // '[' and '{' may start a simple key.\n        this.save_possible_simple_key();\n        // Increase flow level.\n        this.flow_level++;\n        // Simple keys are allowed after '[' and '{'\n        this.allow_simple_key = true;\n        // Add FLOW-SEQUENCE-START or FLOW-MAPPING-START.\n        start_mark = this.get_mark();\n        this.forward();\n        return this.tokens.push(new TokenClass(start_mark, this.get_mark()));\n      }\n\n      fetch_flow_sequence_end() {\n        return this.fetch_flow_collection_end(tokens.FlowSequenceEndToken);\n      }\n\n      fetch_flow_mapping_end() {\n        return this.fetch_flow_collection_end(tokens.FlowMappingEndToken);\n      }\n\n      fetch_flow_collection_end(TokenClass) {\n        var start_mark;\n        // Reset possible simple key on the current level.\n        this.remove_possible_simple_key();\n        // Decrease the flow level\n        this.flow_level--;\n        // No simple keys after ']' or '}'\n        this.allow_simple_key = false;\n        // Add FLOW-SEQUENCE-END or FLOW-MAPPING-END.\n        start_mark = this.get_mark();\n        this.forward();\n        return this.tokens.push(new TokenClass(start_mark, this.get_mark()));\n      }\n\n      fetch_flow_entry() {\n        var start_mark;\n        // Simple keys are allowed after ','.\n        this.allow_simple_key = true;\n        // Reset possible simple key on the current level.\n        this.remove_possible_simple_key();\n        // Add FLOW-ENTRY\n        start_mark = this.get_mark();\n        this.forward();\n        return this.tokens.push(new tokens.FlowEntryToken(start_mark, this.get_mark()));\n      }\n\n      fetch_block_entry() {\n        var mark, start_mark;\n        // Block context needs additional checks\n        if (this.flow_level === 0) {\n          // Are we allowed to start a new entry?\n          if (!this.allow_simple_key) {\n            throw new exports.ScannerError(null, null, 'sequence entries are not allowed here', this.get_mark());\n          }\n          // We may need to add BLOCK-SEQUENCE-START\n          if (this.add_indent(this.column)) {\n            mark = this.get_mark();\n            this.tokens.push(new tokens.BlockSequenceStartToken(mark, mark));\n          }\n        }\n        // It's an error for the block entry to occur in the flow context but we\n        // let the parser detect this.\n\n        // Simple keys are allowed after '-'\n        this.allow_simple_key = true;\n        // Reset possible simple key on the current level.\n        this.remove_possible_simple_key();\n        // Add BLOCK-ENTRY\n        start_mark = this.get_mark();\n        this.forward();\n        return this.tokens.push(new tokens.BlockEntryToken(start_mark, this.get_mark()));\n      }\n\n      fetch_key() {\n        var mark, start_mark;\n        // Block context needs additional checks.\n        if (this.flow_level === 0) {\n          // Are we allowed to start a key?\n          if (!this.allow_simple_key) {\n            throw new exports.ScannerError(null, null, 'mapping keys are not allowed here', this.get_mark());\n          }\n          // We may need to add BLOCK-MAPPING-START.\n          if (this.add_indent(this.column)) {\n            mark = this.get_mark();\n            this.tokens.push(new tokens.BlockMappingStartToken(mark, mark));\n          }\n        }\n        // Simple keys are allowed after '?' in the flow context.\n        this.allow_simple_key = !this.flow_level;\n        // Reset possible simple key on the current level.\n        this.remove_possible_simple_key();\n        // Add KEY.\n        start_mark = this.get_mark();\n        this.forward();\n        return this.tokens.push(new tokens.KeyToken(start_mark, this.get_mark()));\n      }\n\n      fetch_value() {\n        var key, mark, start_mark;\n        // Do we determine a simple key?\n        if (key = this.possible_simple_keys[this.flow_level]) {\n          // Add KEY.\n          delete this.possible_simple_keys[this.flow_level];\n          this.tokens.splice(key.token_number - this.tokens_taken, 0, new tokens.KeyToken(key.mark, key.mark));\n          // If this key starts a new block mapping we need to add\n          // BLOCK-MAPPING-START.\n          if (this.flow_level === 0) {\n            if (this.add_indent(key.column)) {\n              this.tokens.splice(key.token_number - this.tokens_taken, 0, new tokens.BlockMappingStartToken(key.mark, key.mark));\n            }\n          }\n          // There cannot be two simple keys one after the other.\n          this.allow_simple_key = false;\n        } else {\n          // Block context needs additional checks.\n          // TODO: do we really need them?  Parser will catch them anyway.\n          // It must be part of a complex key.\n          if (this.flow_level === 0) {\n            // We are allowed to start a complex value if and only if we can start\n            // a simple key.\n            if (!this.allow_simple_key) {\n              throw new exports.ScannerError(null, null, 'mapping values are not allowed here', this.get_mark());\n            }\n            // If this value starts a new block mapping we need to add\n            // BLOCK-MAPPING-START.  It will be detected as an error later by the\n            // parser.\n            if (this.add_indent(this.column)) {\n              mark = this.get_mark();\n              this.tokens.push(new tokens.BlockMappingStartToken(mark, mark));\n            }\n          }\n          // Simple keys are allowed after ':' in the block context.\n          this.allow_simple_key = !this.flow_level;\n          // Reset possible simple key on the current level.\n          this.remove_possible_simple_key();\n        }\n        // Add VALUE.\n        start_mark = this.get_mark();\n        this.forward();\n        return this.tokens.push(new tokens.ValueToken(start_mark, this.get_mark()));\n      }\n\n      fetch_alias() {\n        // ALIAS could be a simple key.\n        this.save_possible_simple_key();\n        // No simple keys after ALIAS.\n        this.allow_simple_key = false;\n        // Scan and add ALIAS.\n        return this.tokens.push(this.scan_anchor(tokens.AliasToken));\n      }\n\n      fetch_anchor() {\n        // ANCHOR could start a simple key.\n        this.save_possible_simple_key();\n        // No simple keys allowed after ANCHOR.\n        this.allow_simple_key = false;\n        // Scan and add ANCHOR.\n        return this.tokens.push(this.scan_anchor(tokens.AnchorToken));\n      }\n\n      fetch_tag() {\n        // TAG could start a simple key\n        this.save_possible_simple_key();\n        // No simple keys after TAG.\n        this.allow_simple_key = false;\n        // Scan and add TAG.\n        return this.tokens.push(this.scan_tag());\n      }\n\n      fetch_literal() {\n        return this.fetch_block_scalar('|');\n      }\n\n      fetch_folded() {\n        return this.fetch_block_scalar('>');\n      }\n\n      fetch_block_scalar(style) {\n        // A simple key may follow a block sclar.\n        this.allow_simple_key = true;\n        // Reset possible simple key on the current level.\n        this.remove_possible_simple_key();\n        // Scan and add SCALAR.\n        return this.tokens.push(this.scan_block_scalar(style));\n      }\n\n      fetch_single() {\n        return this.fetch_flow_scalar('\\'');\n      }\n\n      fetch_double() {\n        return this.fetch_flow_scalar('\"');\n      }\n\n      fetch_flow_scalar(style) {\n        // A flow scalar could be a simple key.\n        this.save_possible_simple_key();\n        // No simple keys after flow scalars.\n        this.allow_simple_key = false;\n        // Scan and add SCALAR.\n        return this.tokens.push(this.scan_flow_scalar(style));\n      }\n\n      fetch_plain() {\n        // A plain scalar could be a simple key.\n        this.save_possible_simple_key();\n        // No simple keys after plain scalars.  But note that `scan_plain` will\n        // change this flag if the scan is finished at the beginning of the line.\n        this.allow_simple_key = false;\n        // Scan and add SCALAR.  May change `allow_simple_key`.\n        return this.tokens.push(this.scan_plain());\n      }\n\n      // Checkers.\n      /*\n      DIRECTIVE: ^ '%'\n      */\n      check_directive() {\n        if (this.column === 0) {\n          // The % indicator has already been checked.\n          return true;\n        }\n        return false;\n      }\n\n      /*\n      DOCUMENT-START: ^ '---' (' '|'\\n')\n      */\n      check_document_start() {\n        var ref;\n        if (this.column === 0 && this.prefix(3) === '---' && (ref = this.peek(3), indexOf.call(C_LB + C_WS + '\\x00', ref) >= 0)) {\n          return true;\n        }\n        return false;\n      }\n\n      /*\n      DOCUMENT-END: ^ '...' (' '|'\\n')\n      */\n      check_document_end() {\n        var ref;\n        if (this.column === 0 && this.prefix(3) === '...' && (ref = this.peek(3), indexOf.call(C_LB + C_WS + '\\x00', ref) >= 0)) {\n          return true;\n        }\n        return false;\n      }\n\n      /*\n      BLOCK-ENTRY: '-' (' '|'\\n')\n      */\n      check_block_entry() {\n        var ref;\n        return ref = this.peek(1), indexOf.call(C_LB + C_WS + '\\x00', ref) >= 0;\n      }\n\n      /*\n      KEY (flow context):  '?'\n      KEY (block context): '?' (' '|'\\n')\n      */\n      check_key() {\n        var ref;\n        if (this.flow_level !== 0) {\n          // KEY (flow context)\n          return true;\n        }\n        // KEY (block context)\n        return ref = this.peek(1), indexOf.call(C_LB + C_WS + '\\x00', ref) >= 0;\n      }\n\n      /*\n      VALUE (flow context):  ':'\n      VALUE (block context): ':' (' '|'\\n')\n      */\n      check_value() {\n        var ref;\n        if (this.flow_level !== 0) {\n          // VALUE (flow context)\n          return true;\n        }\n        // VALUE (block context)\n        return ref = this.peek(1), indexOf.call(C_LB + C_WS + '\\x00', ref) >= 0;\n      }\n\n      /*\n      A plain scalar may start with any non-space character except:\n      '-', '?', ':', ',', '[', ']', '{', '}',\n      '#', '&', '*', '!', '|', '>', '\\'', '\"',\n      '%', '@', '`'.\n\n      It may also start with\n      '-', '?', ':'\n      if it is followed by a non-space character.\n\n      Note that we limit the last rule to the block context (except the '-'\n      character) because we want the flow context to be space independent.\n      */\n      check_plain() {\n        var char, ref;\n        char = this.peek();\n        return indexOf.call(C_LB + C_WS + '\\x00-?:,[]{}#&*!|>\\'\"%@`', char) < 0 || ((ref = this.peek(1), indexOf.call(C_LB + C_WS + '\\x00', ref) < 0) && (char === '-' || (this.flow_level === 0 && indexOf.call('?:', char) >= 0)));\n      }\n\n      // Scanners.\n      /*\n      We ignore spaces, line breaks and comments.\n      If we find a line break in the block context, we set the flag\n      `allow_simple_key` on.\n      The byte order mark is stripped if it's the first character in the stream.\n      We do not yet support BOM inside the stream as the specification requires.\n      Any such mark will be considered as a part of the document.\n\n      TODO: We need to make tab handling rules more sane.  A good rule is\n      Tabs cannot precede tokens BLOCK-SEQUENCE-START, BLOCK-MAPPING-START,\n      BLOCK-END, KEY (block context), VALUE (block context), BLOCK-ENTRY\n      So the tab checking code is\n      @allow_simple_key = off if <TAB>\n      We also need to add the check for `allow_simple_key is on` to\n      `unwind_indent` before issuing BLOCK-END.  Scanners for block, flow and\n      plain scalars need to be modified.\n      */\n      scan_to_next_token() {\n        var found, ref, results;\n        if (this.index === 0 && this.peek() === '\\uFEFF') {\n          this.forward();\n        }\n        found = false;\n        results = [];\n        while (!found) {\n          while (this.peek() === ' ') {\n            this.forward();\n          }\n          if (this.peek() === '#') {\n            while (ref = this.peek(), indexOf.call(C_LB + '\\x00', ref) < 0) {\n              this.forward();\n            }\n          }\n          if (this.scan_line_break()) {\n            if (this.flow_level === 0) {\n              results.push(this.allow_simple_key = true);\n            } else {\n              results.push(void 0);\n            }\n          } else {\n            results.push(found = true);\n          }\n        }\n        return results;\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_directive() {\n        var end_mark, name, ref, start_mark, value;\n        start_mark = this.get_mark();\n        this.forward();\n        name = this.scan_directive_name(start_mark);\n        value = null;\n        if (name === 'YAML') {\n          value = this.scan_yaml_directive_value(start_mark);\n          end_mark = this.get_mark();\n        } else if (name === 'TAG') {\n          value = this.scan_tag_directive_value(start_mark);\n          end_mark = this.get_mark();\n        } else {\n          end_mark = this.get_mark();\n          while (ref = this.peek(), indexOf.call(C_LB + '\\x00', ref) < 0) {\n            this.forward();\n          }\n        }\n        this.scan_directive_ignored_line(start_mark);\n        return new tokens.DirectiveToken(name, value, start_mark, end_mark);\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_directive_name(start_mark) {\n        var char, length, value;\n        length = 0;\n        char = this.peek(length);\n        while (('0' <= char && char <= '9') || ('A' <= char && char <= 'Z') || ('a' <= char && char <= 'z') || indexOf.call('-_', char) >= 0) {\n          length++;\n          char = this.peek(length);\n        }\n        if (length === 0) {\n          throw new exports.ScannerError('while scanning a directive', start_mark, `expected alphanumeric or numeric character but found ${char}`, this.get_mark());\n        }\n        value = this.prefix(length);\n        this.forward(length);\n        char = this.peek();\n        if (indexOf.call(C_LB + '\\x00 ', char) < 0) {\n          throw new exports.ScannerError('while scanning a directive', start_mark, `expected alphanumeric or numeric character but found ${char}`, this.get_mark());\n        }\n        return value;\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_yaml_directive_value(start_mark) {\n        var major, minor, ref;\n        while (this.peek() === ' ') {\n          this.forward();\n        }\n        major = this.scan_yaml_directive_number(start_mark);\n        if (this.peek() !== '.') {\n          throw new exports.ScannerError('while scanning a directive', start_mark, `expected a digit or '.' but found ${this.peek()}`, this.get_mark());\n        }\n        this.forward();\n        minor = this.scan_yaml_directive_number(start_mark);\n        if (ref = this.peek(), indexOf.call(C_LB + '\\x00 ', ref) < 0) {\n          throw new exports.ScannerError('while scanning a directive', start_mark, `expected a digit or ' ' but found ${this.peek()}`, this.get_mark());\n        }\n        return [major, minor];\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_yaml_directive_number(start_mark) {\n        var char, length, ref, value;\n        char = this.peek();\n        if (!(('0' <= char && char <= '9'))) {\n          throw new exports.ScannerError('while scanning a directive', start_mark, `expected a digit but found ${char}`, this.get_mark());\n        }\n        length = 0;\n        while (('0' <= (ref = this.peek(length)) && ref <= '9')) {\n          length++;\n        }\n        value = parseInt(this.prefix(length));\n        this.forward(length);\n        return value;\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_tag_directive_value(start_mark) {\n        var handle, prefix;\n        while (this.peek() === ' ') {\n          this.forward();\n        }\n        handle = this.scan_tag_directive_handle(start_mark);\n        while (this.peek() === ' ') {\n          this.forward();\n        }\n        prefix = this.scan_tag_directive_prefix(start_mark);\n        return [handle, prefix];\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_tag_directive_handle(start_mark) {\n        var char, value;\n        value = this.scan_tag_handle('directive', start_mark);\n        char = this.peek();\n        if (char !== ' ') {\n          throw new exports.ScannerError('while scanning a directive', start_mark, `expected ' ' but found ${char}`, this.get_mark());\n        }\n        return value;\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_tag_directive_prefix(start_mark) {\n        var char, value;\n        value = this.scan_tag_uri('directive', start_mark);\n        char = this.peek();\n        if (indexOf.call(C_LB + '\\x00 ', char) < 0) {\n          throw new exports.ScannerError('while scanning a directive', start_mark, `expected ' ' but found ${char}`, this.get_mark());\n        }\n        return value;\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_directive_ignored_line(start_mark) {\n        var char, ref;\n        while (this.peek() === ' ') {\n          this.forward();\n        }\n        if (this.peek() === '#') {\n          while (ref = this.peek(), indexOf.call(C_LB + '\\x00', ref) < 0) {\n            this.forward();\n          }\n        }\n        char = this.peek();\n        if (indexOf.call(C_LB + '\\x00', char) < 0) {\n          throw new exports.ScannerError('while scanning a directive', start_mark, `expected a comment or a line break but found ${char}`, this.get_mark());\n        }\n        return this.scan_line_break();\n      }\n\n      /*\n      The specification does not restrict characters for anchors and aliases.\n      This may lead to problems, for instance, the document:\n      [ *alias, value ]\n      can be interpteted in two ways, as\n      [ \"value\" ]\n      and\n      [ *alias , \"value\" ]\n      Therefore we restrict aliases to numbers and ASCII letters.\n      */\n      scan_anchor(TokenClass) {\n        var char, indicator, length, name, start_mark, value;\n        start_mark = this.get_mark();\n        indicator = this.peek();\n        if (indicator === '*') {\n          name = 'alias';\n        } else {\n          name = 'anchor';\n        }\n        this.forward();\n        length = 0;\n        char = this.peek(length);\n        while (('0' <= char && char <= '9') || ('A' <= char && char <= 'Z') || ('a' <= char && char <= 'z') || indexOf.call('-_', char) >= 0) {\n          length++;\n          char = this.peek(length);\n        }\n        if (length === 0) {\n          throw new exports.ScannerError(`while scanning an ${name}`, start_mark, `expected alphabetic or numeric character but found '${char}'`, this.get_mark());\n        }\n        value = this.prefix(length);\n        this.forward(length);\n        char = this.peek();\n        if (indexOf.call(C_LB + C_WS + '\\x00' + '?:,]}%@`', char) < 0) {\n          throw new exports.ScannerError(`while scanning an ${name}`, start_mark, `expected alphabetic or numeric character but found '${char}'`, this.get_mark());\n        }\n        return new TokenClass(value, start_mark, this.get_mark());\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_tag() {\n        var char, handle, length, start_mark, suffix, use_handle;\n        start_mark = this.get_mark();\n        char = this.peek(1);\n        if (char === '<') {\n          handle = null;\n          this.forward(2);\n          suffix = this.scan_tag_uri('tag', start_mark);\n          if (this.peek() !== '>') {\n            throw new exports.ScannerError('while parsing a tag', start_mark, `expected '>' but found ${this.peek()}`, this.get_mark());\n          }\n          this.forward();\n        } else if (indexOf.call(C_LB + C_WS + '\\x00', char) >= 0) {\n          handle = null;\n          suffix = '!';\n          this.forward();\n        } else {\n          length = 1;\n          use_handle = false;\n          while (indexOf.call(C_LB + '\\x00 ', char) < 0) {\n            if (char === '!') {\n              use_handle = true;\n              break;\n            }\n            length++;\n            char = this.peek(length);\n          }\n          if (use_handle) {\n            handle = this.scan_tag_handle('tag', start_mark);\n          } else {\n            handle = '!';\n            this.forward();\n          }\n          suffix = this.scan_tag_uri('tag', start_mark);\n        }\n        char = this.peek();\n        if (indexOf.call(C_LB + '\\x00 ', char) < 0) {\n          throw new exports.ScannerError('while scanning a tag', start_mark, `expected ' ' but found ${char}`, this.get_mark());\n        }\n        return new tokens.TagToken([handle, suffix], start_mark, this.get_mark());\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_block_scalar(style) {\n        var breaks, chomping, chunks, end_mark, folded, increment, indent, leading_non_space, length, line_break, max_indent, min_indent, ref, ref1, ref2, start_mark;\n        folded = style === '>';\n        chunks = [];\n        start_mark = this.get_mark();\n        // Scan the header.\n        this.forward();\n        [chomping, increment] = this.scan_block_scalar_indicators(start_mark);\n        this.scan_block_scalar_ignored_line(start_mark);\n        // Determine the indentation level and go to the first non-empty line.\n        min_indent = this.indent + 1;\n        if (min_indent < 1) {\n          min_indent = 1;\n        }\n        if (increment == null) {\n          [breaks, max_indent, end_mark] = this.scan_block_scalar_indentation();\n          indent = Math.max(min_indent, max_indent);\n        } else {\n          indent = min_indent + increment - 1;\n          [breaks, end_mark] = this.scan_block_scalar_breaks(indent);\n        }\n        line_break = '';\n        // Scan the inner part of the block scalar.\n        while (this.column === indent && this.peek() !== '\\x00') {\n          chunks = chunks.concat(breaks);\n          leading_non_space = (ref = this.peek(), indexOf.call(' \\t', ref) < 0);\n          length = 0;\n          while (ref1 = this.peek(length), indexOf.call(C_LB + '\\x00', ref1) < 0) {\n            length++;\n          }\n          chunks.push(this.prefix(length));\n          this.forward(length);\n          line_break = this.scan_line_break();\n          [breaks, end_mark] = this.scan_block_scalar_breaks(indent);\n          if (this.column === indent && this.peek() !== '\\x00') {\n            // Unfortunately, folding rules are ambiguous.  This is the folding\n            // according to the specification:\n            if (folded && line_break === '\\n' && leading_non_space && (ref2 = this.peek(), indexOf.call(' \\t', ref2) < 0)) {\n              if (util.is_empty(breaks)) {\n                chunks.push(' ');\n              }\n            } else {\n              chunks.push(line_break);\n            }\n          } else {\n            // This is Clark Evan's interpretation (also in the spec examples):\n            // if folded and line_break is '\\n'\n            //   if not breaks\n            //     if @peek() not in ' \\t'\n            //       chunks.push ' '\n            //     else\n            //       chunks.push line_break\n            // else\n            //   chunks.push line_break\n            break;\n          }\n        }\n        if (chomping !== false) {\n          // Chomp the tail\n          chunks.push(line_break);\n        }\n        if (chomping === true) {\n          chunks = chunks.concat(breaks);\n        }\n        // And we're done.\n        return new tokens.ScalarToken(chunks.join(''), false, start_mark, end_mark, style);\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_block_scalar_indicators(start_mark) {\n        var char, chomping, increment;\n        chomping = null;\n        increment = null;\n        char = this.peek();\n        if (indexOf.call('+-', char) >= 0) {\n          chomping = char === '+';\n          this.forward();\n          char = this.peek();\n          if (indexOf.call(C_NUMBERS, char) >= 0) {\n            increment = parseInt(char);\n            if (increment === 0) {\n              throw new exports.ScannerError('while scanning a block scalar', start_mark, 'expected indentation indicator in the range 1-9 but found 0', this.get_mark());\n            }\n            this.forward();\n          }\n        } else if (indexOf.call(C_NUMBERS, char) >= 0) {\n          increment = parseInt(char);\n          if (increment === 0) {\n            throw new exports.ScannerError('while scanning a block scalar', start_mark, 'expected indentation indicator in the range 1-9 but found 0', this.get_mark());\n          }\n          this.forward();\n          char = this.peek();\n          if (indexOf.call('+-', char) >= 0) {\n            chomping = char === '+';\n            this.forward();\n          }\n        }\n        char = this.peek();\n        if (indexOf.call(C_LB + '\\x00 ', char) < 0) {\n          throw new exports.ScannerError('while scanning a block scalar', start_mark, `expected chomping or indentation indicators, but found ${char}`, this.get_mark());\n        }\n        return [chomping, increment];\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_block_scalar_ignored_line(start_mark) {\n        var char, ref;\n        while (this.peek() === ' ') {\n          this.forward();\n        }\n        if (this.peek() === '#') {\n          while (ref = this.peek(), indexOf.call(C_LB + '\\x00', ref) < 0) {\n            this.forward();\n          }\n        }\n        char = this.peek();\n        if (indexOf.call(C_LB + '\\x00', char) < 0) {\n          throw new exports.ScannerError('while scanning a block scalar', start_mark, `expected a comment or a line break but found ${char}`, this.get_mark());\n        }\n        return this.scan_line_break();\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_block_scalar_indentation() {\n        var chunks, end_mark, max_indent, ref;\n        chunks = [];\n        max_indent = 0;\n        end_mark = this.get_mark();\n        while (ref = this.peek(), indexOf.call(C_LB + ' ', ref) >= 0) {\n          if (this.peek() !== ' ') {\n            chunks.push(this.scan_line_break());\n            end_mark = this.get_mark();\n          } else {\n            this.forward();\n            if (this.column > max_indent) {\n              max_indent = this.column;\n            }\n          }\n        }\n        return [chunks, max_indent, end_mark];\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_block_scalar_breaks(indent) {\n        var chunks, end_mark, ref;\n        chunks = [];\n        end_mark = this.get_mark();\n        while (this.column < indent && this.peek() === ' ') {\n          this.forward();\n        }\n        while (ref = this.peek(), indexOf.call(C_LB, ref) >= 0) {\n          chunks.push(this.scan_line_break());\n          end_mark = this.get_mark();\n          while (this.column < indent && this.peek() === ' ') {\n            this.forward();\n          }\n        }\n        return [chunks, end_mark];\n      }\n\n      /*\n      See the specification for details.\n      Note that we loose indentation rules for quoted scalars. Quoted scalars\n      don't need to adhere indentation because \" and ' clearly mark the beginning\n      and the end of them. Therefore we are less restrictive than the\n      specification requires. We only need to check that document separators are\n      not included in scalars.\n      */\n      scan_flow_scalar(style) {\n        var chunks, double, quote, start_mark;\n        double = style === '\"';\n        chunks = [];\n        start_mark = this.get_mark();\n        quote = this.peek();\n        this.forward();\n        chunks = chunks.concat(this.scan_flow_scalar_non_spaces(double, start_mark));\n        while (this.peek() !== quote) {\n          chunks = chunks.concat(this.scan_flow_scalar_spaces(double, start_mark));\n          chunks = chunks.concat(this.scan_flow_scalar_non_spaces(double, start_mark));\n        }\n        this.forward();\n        return new tokens.ScalarToken(chunks.join(''), false, start_mark, this.get_mark(), style);\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_flow_scalar_non_spaces(double, start_mark) {\n        var char, chunks, code, i, k, length, ref, ref1, ref2;\n        chunks = [];\n        while (true) {\n          length = 0;\n          while (ref = this.peek(length), indexOf.call(C_LB + C_WS + '\\'\"\\\\\\x00', ref) < 0) {\n            length++;\n          }\n          if (length !== 0) {\n            chunks.push(this.prefix(length));\n            this.forward(length);\n          }\n          char = this.peek();\n          if (!double && char === '\\'' && this.peek(1) === '\\'') {\n            chunks.push('\\'');\n            this.forward(2);\n          } else if ((double && char === '\\'') || (!double && indexOf.call('\"\\\\', char) >= 0)) {\n            chunks.push(char);\n            this.forward();\n          } else if (double && char === '\\\\') {\n            this.forward();\n            char = this.peek();\n            if (char in ESCAPE_REPLACEMENTS) {\n              chunks.push(ESCAPE_REPLACEMENTS[char]);\n              this.forward();\n            } else if (char in ESCAPE_CODES) {\n              length = ESCAPE_CODES[char];\n              this.forward();\n              for (k = i = 0, ref1 = length; 0 <= ref1 ? i < ref1 : i > ref1; k = 0 <= ref1 ? ++i : --i) {\n                if (ref2 = this.peek(k), indexOf.call(`${C_NUMBERS}ABCDEFabcdef`, ref2) < 0) {\n                  throw new exports.ScannerError('while scanning a double-quoted scalar', start_mark, `expected escape sequence of ${length} hexadecimal numbers, but found ${this.peek(k)}`, this.get_mark());\n                }\n              }\n              code = parseInt(this.prefix(length), 16);\n              chunks.push(String.fromCharCode(code));\n              this.forward(length);\n            } else if (indexOf.call(C_LB, char) >= 0) {\n              this.scan_line_break();\n              chunks = chunks.concat(this.scan_flow_scalar_breaks(double, start_mark));\n            } else {\n              throw new exports.ScannerError('while scanning a double-quoted scalar', start_mark, `found unknown escape character ${char}`, this.get_mark());\n            }\n          } else {\n            return chunks;\n          }\n        }\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_flow_scalar_spaces(double, start_mark) {\n        var breaks, char, chunks, length, line_break, ref, whitespaces;\n        chunks = [];\n        length = 0;\n        while (ref = this.peek(length), indexOf.call(C_WS, ref) >= 0) {\n          length++;\n        }\n        whitespaces = this.prefix(length);\n        this.forward(length);\n        char = this.peek();\n        if (char === '\\x00') {\n          throw new exports.ScannerError('while scanning a quoted scalar', start_mark, 'found unexpected end of stream', this.get_mark());\n        }\n        if (indexOf.call(C_LB, char) >= 0) {\n          line_break = this.scan_line_break();\n          breaks = this.scan_flow_scalar_breaks(double, start_mark);\n          if (line_break !== '\\n') {\n            chunks.push(line_break);\n          } else if (breaks.length === 0) {\n            chunks.push(' ');\n          }\n          chunks = chunks.concat(breaks);\n        } else {\n          chunks.push(whitespaces);\n        }\n        return chunks;\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_flow_scalar_breaks(double, start_mark) {\n        var chunks, prefix, ref, ref1, ref2;\n        chunks = [];\n        while (true) {\n          // Instead of checking for indentation, we check for document separators.\n          prefix = this.prefix(3);\n          if (prefix === '---' || prefix === '...' && (ref = this.peek(3), indexOf.call(C_LB + C_WS + '\\x00', ref) >= 0)) {\n            throw new exports.ScannerError('while scanning a quoted scalar', start_mark, 'found unexpected document separator', this.get_mark());\n          }\n          while (ref1 = this.peek(), indexOf.call(C_WS, ref1) >= 0) {\n            this.forward();\n          }\n          if (ref2 = this.peek(), indexOf.call(C_LB, ref2) >= 0) {\n            chunks.push(this.scan_line_break());\n          } else {\n            return chunks;\n          }\n        }\n      }\n\n      /*\n      See the specification for details.\n      We add an additional restriction for the flow context:\n        plain scalars in the flow context cannot contain ',', ':' and '?'.\n      We also keep track of the `allow_simple_key` flag here.\n      Indentation rules are loosed for the flow context.\n      */\n      scan_plain() {\n        var char, chunks, end_mark, indent, length, ref, ref1, spaces, start_mark;\n        chunks = [];\n        start_mark = end_mark = this.get_mark();\n        indent = this.indent + 1;\n        // We allow zero indentation for scalars, but then we need to check for\n        // document separators at the beginning of the line.\n        // indent = 1 if indent is 0\n        spaces = [];\n        while (true) {\n          length = 0;\n          if (this.peek() === '#') {\n            break;\n          }\n          while (true) {\n            char = this.peek(length);\n            if (indexOf.call(C_LB + C_WS + '\\x00', char) >= 0 || (this.flow_level === 0 && char === ':' && (ref = this.peek(length + 1), indexOf.call(C_LB + C_WS + '\\x00', ref) >= 0)) || (this.flow_level !== 0 && indexOf.call(',:?[]{}', char) >= 0)) {\n              break;\n            }\n            length++;\n          }\n          // It's not clear what we should do with ':' in the flow context.\n          if (this.flow_level !== 0 && char === ':' && (ref1 = this.peek(length + 1), indexOf.call(C_LB + C_WS + '\\x00,[]{}', ref1) < 0)) {\n            this.forward(length);\n            throw new exports.ScannerError('while scanning a plain scalar', start_mark, 'found unexpected \\':\\'', this.get_mark(), 'Please check http://pyyaml.org/wiki/YAMLColonInFlowContext');\n          }\n          if (length === 0) {\n            break;\n          }\n          this.allow_simple_key = false;\n          chunks = chunks.concat(spaces);\n          chunks.push(this.prefix(length));\n          this.forward(length);\n          end_mark = this.get_mark();\n          spaces = this.scan_plain_spaces(indent, start_mark);\n          if ((spaces == null) || spaces.length === 0 || this.peek() === '#' || (this.flow_level === 0 && this.column < indent)) {\n            break;\n          }\n        }\n        return new tokens.ScalarToken(chunks.join(''), true, start_mark, end_mark);\n      }\n\n      /*\n      See the specification for details.\n      The specification is really confusing about tabs in plain scalars.\n      We just forbid them completely. Do not use tabs in YAML!\n      */\n      scan_plain_spaces(indent, start_mark) {\n        var breaks, char, chunks, length, line_break, prefix, ref, ref1, ref2, ref3, whitespaces;\n        chunks = [];\n        length = 0;\n        while (ref = this.peek(length), indexOf.call(' ', ref) >= 0) {\n          length++;\n        }\n        whitespaces = this.prefix(length);\n        this.forward(length);\n        char = this.peek();\n        if (indexOf.call(C_LB, char) >= 0) {\n          line_break = this.scan_line_break();\n          this.allow_simple_key = true;\n          prefix = this.prefix(3);\n          if (prefix === '---' || prefix === '...' && (ref1 = this.peek(3), indexOf.call(C_LB + C_WS + '\\x00', ref1) >= 0)) {\n            return;\n          }\n          breaks = [];\n          while (ref3 = this.peek(), indexOf.call(C_LB + ' ', ref3) >= 0) {\n            if (this.peek() === ' ') {\n              this.forward();\n            } else {\n              breaks.push(this.scan_line_break());\n              prefix = this.prefix(3);\n              if (prefix === '---' || prefix === '...' && (ref2 = this.peek(3), indexOf.call(C_LB + C_WS + '\\x00', ref2) >= 0)) {\n                return;\n              }\n            }\n          }\n          if (line_break !== '\\n') {\n            chunks.push(line_break);\n          } else if (breaks.length === 0) {\n            chunks.push(' ');\n          }\n          chunks = chunks.concat(breaks);\n        } else if (whitespaces) {\n          chunks.push(whitespaces);\n        }\n        return chunks;\n      }\n\n      /*\n      See the specification for details.\n      For some strange reasons, the specification does not allow '_' in tag\n      handles. I have allowed it anyway.\n      */\n      scan_tag_handle(name, start_mark) {\n        var char, length, value;\n        char = this.peek();\n        if (char !== '!') {\n          throw new exports.ScannerError(`while scanning a ${name}`, start_mark, `expected '!' but found ${char}`, this.get_mark());\n        }\n        length = 1;\n        char = this.peek(length);\n        if (char !== ' ') {\n          while (('0' <= char && char <= '9') || ('A' <= char && char <= 'Z') || ('a' <= char && char <= 'z') || indexOf.call('-_', char) >= 0) {\n            length++;\n            char = this.peek(length);\n          }\n          if (char !== '!') {\n            this.forward(length);\n            throw new exports.ScannerError(`while scanning a ${name}`, start_mark, `expected '!' but found ${char}`, this.get_mark());\n          }\n          length++;\n        }\n        value = this.prefix(length);\n        this.forward(length);\n        return value;\n      }\n\n      /*\n      See the specification for details.\n      Note: we do not check if URI is well-formed.\n      */\n      scan_tag_uri(name, start_mark) {\n        var char, chunks, length;\n        chunks = [];\n        length = 0;\n        char = this.peek(length);\n        while (('0' <= char && char <= '9') || ('A' <= char && char <= 'Z') || ('a' <= char && char <= 'z') || indexOf.call('-;/?:@&=+$,_.!~*\\'()[]%', char) >= 0) {\n          if (char === '%') {\n            chunks.push(this.prefix(length));\n            this.forward(length);\n            length = 0;\n            chunks.push(this.scan_uri_escapes(name, start_mark));\n          } else {\n            length++;\n          }\n          char = this.peek(length);\n        }\n        if (length !== 0) {\n          chunks.push(this.prefix(length));\n          this.forward(length);\n          length = 0;\n        }\n        if (chunks.length === 0) {\n          throw new exports.ScannerError(`while parsing a ${name}`, start_mark, `expected URI but found ${char}`, this.get_mark());\n        }\n        return chunks.join('');\n      }\n\n      /*\n      See the specification for details.\n      */\n      scan_uri_escapes(name, start_mark) {\n        var bytes, i, k, mark;\n        bytes = [];\n        mark = this.get_mark();\n        while (this.peek() === '%') {\n          this.forward();\n          for (k = i = 0; i <= 2; k = ++i) {\n            throw new exports.ScannerError(`while scanning a ${name}`, start_mark, `expected URI escape sequence of 2 hexadecimal numbers but found ${this.peek(k)}`, this.get_mark());\n          }\n          bytes.push(String.fromCharCode(parseInt(this.prefix(2), 16)));\n          this.forward(2);\n        }\n        return bytes.join('');\n      }\n\n      /*\n      Transforms:\n      '\\r\\n'      :   '\\n'\n      '\\r'        :   '\\n'\n      '\\n'        :   '\\n'\n      '\\x85'      :   '\\n'\n      '\\u2028'    :   '\\u2028'\n      '\\u2029     :   '\\u2029'\n      default     :   ''\n      */\n      scan_line_break() {\n        var char;\n        char = this.peek();\n        if (indexOf.call('\\r\\n\\x85', char) >= 0) {\n          if (this.prefix(2) === '\\r\\n') {\n            this.forward(2);\n          } else {\n            this.forward();\n          }\n          return '\\n';\n        } else if (indexOf.call('\\u2028\\u2029', char) >= 0) {\n          this.forward();\n          return char;\n        }\n        return '';\n      }\n\n    };\n\n    C_LB = '\\r\\n\\x85\\u2028\\u2029';\n\n    C_WS = '\\t ';\n\n    C_NUMBERS = '0123456789';\n\n    ESCAPE_REPLACEMENTS = {\n      '0': '\\x00',\n      'a': '\\x07',\n      'b': '\\x08',\n      't': '\\x09',\n      '\\t': '\\x09',\n      'n': '\\x0A',\n      'v': '\\x0B',\n      'f': '\\x0C',\n      'r': '\\x0D',\n      'e': '\\x1B',\n      ' ': '\\x20',\n      '\"': '\"',\n      '\\\\': '\\\\',\n      'N': '\\x85',\n      '_': '\\xA0',\n      'L': '\\u2028',\n      'P': '\\u2029'\n    };\n\n    ESCAPE_CODES = {\n      'x': 2,\n      'u': 4,\n      'U': 8\n    };\n\n    ctor = Scanner.prototype.initialise;\n\n    return Scanner;\n\n  }).call(this);\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///265\n")},472:function(__unused_webpack_module,__unused_webpack_exports,__webpack_require__){eval("(function() {\n  var YAMLError, events, nodes, util;\n\n  events = __webpack_require__(63);\n\n  nodes = __webpack_require__(914);\n\n  util = __webpack_require__(823);\n\n  ({YAMLError} = __webpack_require__(372));\n\n  this.SerializerError = class SerializerError extends YAMLError {};\n\n  this.Serializer = (function() {\n    var ctor;\n\n    class Serializer {\n      constructor() {\n        return ctor.apply(this, arguments);\n      }\n\n      initialise({\n          encoding: encoding,\n          explicit_start: explicit_start,\n          explicit_end: explicit_end,\n          version: version,\n          tags: tags\n        } = {}) {\n        this.encoding = encoding;\n        this.explicit_start = explicit_start;\n        this.explicit_end = explicit_end;\n        this.version = version;\n        this.tags = tags;\n        this.serialized_nodes = {};\n        this.anchors = {};\n        this.last_anchor_id = 0;\n        return this.closed = null;\n      }\n\n      open() {\n        if (this.closed === null) {\n          this.emit(new events.StreamStartEvent(this.encoding));\n          return this.closed = false;\n        } else if (this.closed) {\n          throw new SerializerError('serializer is closed');\n        } else {\n          throw new SerializerError('serializer is already open');\n        }\n      }\n\n      close() {\n        if (this.closed === null) {\n          throw new SerializerError('serializer is not opened');\n        } else if (!this.closed) {\n          this.emit(new events.StreamEndEvent);\n          return this.closed = true;\n        }\n      }\n\n      serialize(node) {\n        if (this.closed === null) {\n          throw new SerializerError('serializer is not opened');\n        } else if (this.closed) {\n          throw new SerializerError('serializer is closed');\n        }\n        if (node != null) {\n          this.emit(new events.DocumentStartEvent(void 0, void 0, this.explicit_start, this.version, this.tags));\n          this.anchor_node(node);\n          this.serialize_node(node);\n          this.emit(new events.DocumentEndEvent(void 0, void 0, this.explicit_end));\n        }\n        this.serialized_nodes = {};\n        this.anchors = {};\n        return this.last_anchor_id = 0;\n      }\n\n      anchor_node(node) {\n        var base, i, item, j, key, len, len1, name, ref, ref1, results, results1, value;\n        if (node.unique_id in this.anchors) {\n          return (base = this.anchors)[name = node.unique_id] != null ? base[name] : base[name] = this.generate_anchor(node);\n        } else {\n          this.anchors[node.unique_id] = null;\n          if (node instanceof nodes.SequenceNode) {\n            ref = node.value;\n            results = [];\n            for (i = 0, len = ref.length; i < len; i++) {\n              item = ref[i];\n              results.push(this.anchor_node(item));\n            }\n            return results;\n          } else if (node instanceof nodes.MappingNode) {\n            ref1 = node.value;\n            results1 = [];\n            for (j = 0, len1 = ref1.length; j < len1; j++) {\n              [key, value] = ref1[j];\n              this.anchor_node(key);\n              results1.push(this.anchor_node(value));\n            }\n            return results1;\n          }\n        }\n      }\n\n      generate_anchor(node) {\n        return `id${util.pad_left(++this.last_anchor_id, '0', 4)}`;\n      }\n\n      serialize_node(node, parent, index) {\n        var alias, default_tag, detected_tag, i, implicit, item, j, key, len, len1, ref, ref1, value;\n        alias = this.anchors[node.unique_id];\n        if (node.unique_id in this.serialized_nodes) {\n          return this.emit(new events.AliasEvent(alias));\n        } else {\n          this.serialized_nodes[node.unique_id] = true;\n          this.descend_resolver(parent, index);\n          if (node instanceof nodes.ScalarNode) {\n            detected_tag = this.resolve(nodes.ScalarNode, node.value, [true, false]);\n            default_tag = this.resolve(nodes.ScalarNode, node.value, [false, true]);\n            implicit = [node.tag === detected_tag, node.tag === default_tag];\n            this.emit(new events.ScalarEvent(alias, node.tag, implicit, node.value, void 0, void 0, node.style));\n          } else if (node instanceof nodes.SequenceNode) {\n            implicit = node.tag === this.resolve(nodes.SequenceNode, node.value, true);\n            this.emit(new events.SequenceStartEvent(alias, node.tag, implicit, void 0, void 0, node.flow_style));\n            ref = node.value;\n            for (index = i = 0, len = ref.length; i < len; index = ++i) {\n              item = ref[index];\n              this.serialize_node(item, node, index);\n            }\n            this.emit(new events.SequenceEndEvent);\n          } else if (node instanceof nodes.MappingNode) {\n            implicit = node.tag === this.resolve(nodes.MappingNode, node.value, true);\n            this.emit(new events.MappingStartEvent(alias, node.tag, implicit, void 0, void 0, node.flow_style));\n            ref1 = node.value;\n            for (j = 0, len1 = ref1.length; j < len1; j++) {\n              [key, value] = ref1[j];\n              this.serialize_node(key, node, null);\n              this.serialize_node(value, node, key);\n            }\n            this.emit(new events.MappingEndEvent);\n          }\n          return this.ascend_resolver();\n        }\n      }\n\n    };\n\n    ctor = Serializer.prototype.initialise;\n\n    return Serializer;\n\n  }).call(this);\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///472\n")},902:function(){eval("(function() {\n  this.Token = class Token {\n    constructor(start_mark1, end_mark1) {\n      this.start_mark = start_mark1;\n      this.end_mark = end_mark1;\n    }\n\n  };\n\n  this.DirectiveToken = (function() {\n    class DirectiveToken extends this.Token {\n      constructor(name, value, start_mark, end_mark) {\n        super(start_mark, end_mark);\n        this.name = name;\n        this.value = value;\n      }\n\n    };\n\n    DirectiveToken.prototype.id = '<directive>';\n\n    return DirectiveToken;\n\n  }).call(this);\n\n  this.DocumentStartToken = (function() {\n    class DocumentStartToken extends this.Token {};\n\n    DocumentStartToken.prototype.id = '<document start>';\n\n    return DocumentStartToken;\n\n  }).call(this);\n\n  this.DocumentEndToken = (function() {\n    class DocumentEndToken extends this.Token {};\n\n    DocumentEndToken.prototype.id = '<document end>';\n\n    return DocumentEndToken;\n\n  }).call(this);\n\n  this.StreamStartToken = (function() {\n    class StreamStartToken extends this.Token {\n      constructor(start_mark, end_mark, encoding) {\n        super(start_mark, end_mark);\n        this.encoding = encoding;\n      }\n\n    };\n\n    StreamStartToken.prototype.id = '<stream start>';\n\n    return StreamStartToken;\n\n  }).call(this);\n\n  this.StreamEndToken = (function() {\n    class StreamEndToken extends this.Token {};\n\n    StreamEndToken.prototype.id = '<stream end>';\n\n    return StreamEndToken;\n\n  }).call(this);\n\n  this.BlockSequenceStartToken = (function() {\n    class BlockSequenceStartToken extends this.Token {};\n\n    BlockSequenceStartToken.prototype.id = '<block sequence start>';\n\n    return BlockSequenceStartToken;\n\n  }).call(this);\n\n  this.BlockMappingStartToken = (function() {\n    class BlockMappingStartToken extends this.Token {};\n\n    BlockMappingStartToken.prototype.id = '<block mapping end>';\n\n    return BlockMappingStartToken;\n\n  }).call(this);\n\n  this.BlockEndToken = (function() {\n    class BlockEndToken extends this.Token {};\n\n    BlockEndToken.prototype.id = '<block end>';\n\n    return BlockEndToken;\n\n  }).call(this);\n\n  this.FlowSequenceStartToken = (function() {\n    class FlowSequenceStartToken extends this.Token {};\n\n    FlowSequenceStartToken.prototype.id = '[';\n\n    return FlowSequenceStartToken;\n\n  }).call(this);\n\n  this.FlowMappingStartToken = (function() {\n    class FlowMappingStartToken extends this.Token {};\n\n    FlowMappingStartToken.prototype.id = '{';\n\n    return FlowMappingStartToken;\n\n  }).call(this);\n\n  this.FlowSequenceEndToken = (function() {\n    class FlowSequenceEndToken extends this.Token {};\n\n    FlowSequenceEndToken.prototype.id = ']';\n\n    return FlowSequenceEndToken;\n\n  }).call(this);\n\n  this.FlowMappingEndToken = (function() {\n    class FlowMappingEndToken extends this.Token {};\n\n    FlowMappingEndToken.prototype.id = '}';\n\n    return FlowMappingEndToken;\n\n  }).call(this);\n\n  this.KeyToken = (function() {\n    class KeyToken extends this.Token {};\n\n    KeyToken.prototype.id = '?';\n\n    return KeyToken;\n\n  }).call(this);\n\n  this.ValueToken = (function() {\n    class ValueToken extends this.Token {};\n\n    ValueToken.prototype.id = ':';\n\n    return ValueToken;\n\n  }).call(this);\n\n  this.BlockEntryToken = (function() {\n    class BlockEntryToken extends this.Token {};\n\n    BlockEntryToken.prototype.id = '-';\n\n    return BlockEntryToken;\n\n  }).call(this);\n\n  this.FlowEntryToken = (function() {\n    class FlowEntryToken extends this.Token {};\n\n    FlowEntryToken.prototype.id = ',';\n\n    return FlowEntryToken;\n\n  }).call(this);\n\n  this.AliasToken = (function() {\n    class AliasToken extends this.Token {\n      constructor(value, start_mark, end_mark) {\n        super(start_mark, end_mark);\n        this.value = value;\n      }\n\n    };\n\n    AliasToken.prototype.id = '<alias>';\n\n    return AliasToken;\n\n  }).call(this);\n\n  this.AnchorToken = (function() {\n    class AnchorToken extends this.Token {\n      constructor(value, start_mark, end_mark) {\n        super(start_mark, end_mark);\n        this.value = value;\n      }\n\n    };\n\n    AnchorToken.prototype.id = '<anchor>';\n\n    return AnchorToken;\n\n  }).call(this);\n\n  this.TagToken = (function() {\n    class TagToken extends this.Token {\n      constructor(value, start_mark, end_mark) {\n        super(start_mark, end_mark);\n        this.value = value;\n      }\n\n    };\n\n    TagToken.prototype.id = '<tag>';\n\n    return TagToken;\n\n  }).call(this);\n\n  this.ScalarToken = (function() {\n    class ScalarToken extends this.Token {\n      constructor(value, plain, start_mark, end_mark, style) {\n        super(start_mark, end_mark);\n        this.value = value;\n        this.plain = plain;\n        this.style = style;\n      }\n\n    };\n\n    ScalarToken.prototype.id = '<scalar>';\n\n    return ScalarToken;\n\n  }).call(this);\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///902\n")},823:function(__unused_webpack_module,__unused_webpack_exports,__webpack_require__){eval("(function() {\n  /*\n  A small class to stand-in for a stream when you simply want to write to a string.\n  */\n  var ref, ref1, ref2,\n    hasProp = {}.hasOwnProperty;\n\n  this.StringStream = class StringStream {\n    constructor() {\n      this.string = '';\n    }\n\n    write(chunk) {\n      return this.string += chunk;\n    }\n\n  };\n\n  this.clone = (obj) => {\n    return Object.assign({}, obj);\n  };\n\n  this.extend = function(destination, ...sources) {\n    var i, j, len, len1, name, ref, source;\n    for (i = 0, len = sources.length; i < len; i++) {\n      source = sources[i];\n      while (source !== Object.prototype) {\n        ref = Object.getOwnPropertyNames(source);\n        for (j = 0, len1 = ref.length; j < len1; j++) {\n          name = ref[j];\n          if (destination[name] == null) {\n            destination[name] = source[name];\n          }\n        }\n        source = Object.getPrototypeOf(source);\n      }\n    }\n    return destination;\n  };\n\n  this.is_empty = function(obj) {\n    var key;\n    if (Array.isArray(obj) || typeof obj === 'string') {\n      return obj.length === 0;\n    }\n    for (key in obj) {\n      if (!hasProp.call(obj, key)) continue;\n      return false;\n    }\n    return true;\n  };\n\n  this.inspect = (ref = (ref1 = (ref2 = __webpack_require__(539)) != null ? ref2.inspect : void 0) != null ? ref1 : __webpack_require__.g.inspect) != null ? ref : function(a) {\n    return `${a}`;\n  };\n\n  this.pad_left = function(str, char, length) {\n    str = String(str);\n    if (str.length >= length) {\n      return str;\n    } else if (str.length + 1 === length) {\n      return `${char}${str}`;\n    } else {\n      return `${new Array(length - str.length + 1).join(char)}${str}`;\n    }\n  };\n\n  this.to_hex = function(num) {\n    if (typeof num === 'string') {\n      num = num.charCodeAt(0);\n    }\n    return num.toString(16);\n  };\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODIzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLDJCQUEyQjtBQUMzQjs7QUFFQTtBQUNBO0FBQ0Esc0NBQXNDLFNBQVM7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLFVBQVU7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3Q0FBd0MsbUJBQU8sQ0FBQyxHQUFNLHFEQUFxRCxxQkFBTTtBQUNqSCxjQUFjLEVBQUU7QUFDaEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sZ0JBQWdCLEtBQUssRUFBRSxJQUFJO0FBQzNCLE1BQU07QUFDTixnQkFBZ0IsOENBQThDLEVBQUUsSUFBSTtBQUNwRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVsZW9weHl6Ly4vbm9kZV9tb2R1bGVzL3lhbWwtanMvbGliL3V0aWwuanM/ZGM1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG4gIC8qXG4gIEEgc21hbGwgY2xhc3MgdG8gc3RhbmQtaW4gZm9yIGEgc3RyZWFtIHdoZW4geW91IHNpbXBseSB3YW50IHRvIHdyaXRlIHRvIGEgc3RyaW5nLlxuICAqL1xuICB2YXIgcmVmLCByZWYxLCByZWYyLFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICB0aGlzLlN0cmluZ1N0cmVhbSA9IGNsYXNzIFN0cmluZ1N0cmVhbSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLnN0cmluZyA9ICcnO1xuICAgIH1cblxuICAgIHdyaXRlKGNodW5rKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJpbmcgKz0gY2h1bms7XG4gICAgfVxuXG4gIH07XG5cbiAgdGhpcy5jbG9uZSA9IChvYmopID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgb2JqKTtcbiAgfTtcblxuICB0aGlzLmV4dGVuZCA9IGZ1bmN0aW9uKGRlc3RpbmF0aW9uLCAuLi5zb3VyY2VzKSB7XG4gICAgdmFyIGksIGosIGxlbiwgbGVuMSwgbmFtZSwgcmVmLCBzb3VyY2U7XG4gICAgZm9yIChpID0gMCwgbGVuID0gc291cmNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgc291cmNlID0gc291cmNlc1tpXTtcbiAgICAgIHdoaWxlIChzb3VyY2UgIT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgICAgICAgcmVmID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlKTtcbiAgICAgICAgZm9yIChqID0gMCwgbGVuMSA9IHJlZi5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcbiAgICAgICAgICBuYW1lID0gcmVmW2pdO1xuICAgICAgICAgIGlmIChkZXN0aW5hdGlvbltuYW1lXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltuYW1lXSA9IHNvdXJjZVtuYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHNvdXJjZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZXN0aW5hdGlvbjtcbiAgfTtcblxuICB0aGlzLmlzX2VtcHR5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGtleTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopIHx8IHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gb2JqLmxlbmd0aCA9PT0gMDtcbiAgICB9XG4gICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoIWhhc1Byb3AuY2FsbChvYmosIGtleSkpIGNvbnRpbnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICB0aGlzLmluc3BlY3QgPSAocmVmID0gKHJlZjEgPSAocmVmMiA9IHJlcXVpcmUoJ3V0aWwnKSkgIT0gbnVsbCA/IHJlZjIuaW5zcGVjdCA6IHZvaWQgMCkgIT0gbnVsbCA/IHJlZjEgOiBnbG9iYWwuaW5zcGVjdCkgIT0gbnVsbCA/IHJlZiA6IGZ1bmN0aW9uKGEpIHtcbiAgICByZXR1cm4gYCR7YX1gO1xuICB9O1xuXG4gIHRoaXMucGFkX2xlZnQgPSBmdW5jdGlvbihzdHIsIGNoYXIsIGxlbmd0aCkge1xuICAgIHN0ciA9IFN0cmluZyhzdHIpO1xuICAgIGlmIChzdHIubGVuZ3RoID49IGxlbmd0aCkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9IGVsc2UgaWYgKHN0ci5sZW5ndGggKyAxID09PSBsZW5ndGgpIHtcbiAgICAgIHJldHVybiBgJHtjaGFyfSR7c3RyfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgJHtuZXcgQXJyYXkobGVuZ3RoIC0gc3RyLmxlbmd0aCArIDEpLmpvaW4oY2hhcil9JHtzdHJ9YDtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy50b19oZXggPSBmdW5jdGlvbihudW0pIHtcbiAgICBpZiAodHlwZW9mIG51bSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG51bSA9IG51bS5jaGFyQ29kZUF0KDApO1xuICAgIH1cbiAgICByZXR1cm4gbnVtLnRvU3RyaW5nKDE2KTtcbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///823\n")},740:function(__unused_webpack_module,exports,__webpack_require__){eval("(function() {\n  var composer, constructor, dumper, errors, events, loader, nodes, parser, reader, resolver, scanner, tokens, util;\n\n  composer = this.composer = __webpack_require__(391);\n\n  constructor = this.constructor = __webpack_require__(574);\n\n  dumper = this.dumper = __webpack_require__(190);\n\n  errors = this.errors = __webpack_require__(372);\n\n  events = this.events = __webpack_require__(63);\n\n  loader = this.loader = __webpack_require__(696);\n\n  nodes = this.nodes = __webpack_require__(914);\n\n  parser = this.parser = __webpack_require__(806);\n\n  reader = this.reader = __webpack_require__(26);\n\n  resolver = this.resolver = __webpack_require__(579);\n\n  scanner = this.scanner = __webpack_require__(265);\n\n  tokens = this.tokens = __webpack_require__(902);\n\n  util = __webpack_require__(823);\n\n  /*\n  Scan a YAML stream and produce scanning tokens.\n  */\n  this.scan = function(stream, Loader = loader.Loader) {\n    var _loader, results;\n    _loader = new Loader(stream);\n    results = [];\n    while (_loader.check_token()) {\n      results.push(_loader.get_token());\n    }\n    return results;\n  };\n\n  /*\n  Parse a YAML stream and produce parsing events.\n  */\n  this.parse = function(stream, Loader = loader.Loader) {\n    var _loader, results;\n    _loader = new Loader(stream);\n    results = [];\n    while (_loader.check_event()) {\n      results.push(_loader.get_event());\n    }\n    return results;\n  };\n\n  /*\n  Parse the first YAML document in a stream and produce the corresponding\n  representation tree.\n  */\n  this.compose = function(stream, Loader = loader.Loader) {\n    var _loader;\n    _loader = new Loader(stream);\n    return _loader.get_single_node();\n  };\n\n  /*\n  Parse all YAML documents in a stream and produce corresponding representation\n  trees.\n  */\n  this.compose_all = function(stream, Loader = loader.Loader) {\n    var _loader, results;\n    _loader = new Loader(stream);\n    results = [];\n    while (_loader.check_node()) {\n      results.push(_loader.get_node());\n    }\n    return results;\n  };\n\n  /*\n  Parse the first YAML document in a stream and produce the corresponding\n  Javascript object.\n  */\n  this.load = function(stream, Loader = loader.Loader) {\n    var _loader;\n    _loader = new Loader(stream);\n    return _loader.get_single_data();\n  };\n\n  /*\n  Parse all YAML documents in a stream and produce the corresponing Javascript\n  object.\n  */\n  this.load_all = function(stream, Loader = loader.Loader) {\n    var _loader, results;\n    _loader = new Loader(stream);\n    results = [];\n    while (_loader.check_data()) {\n      results.push(_loader.get_data());\n    }\n    return results;\n  };\n\n  /*\n  Emit YAML parsing events into a stream.\n  If stream is falsey, return the produced string instead.\n  */\n  this.emit = function(events, stream, Dumper = dumper.Dumper, options = {}) {\n    var _dumper, dest, event, i, len;\n    dest = stream || new util.StringStream;\n    _dumper = new Dumper(dest, options);\n    try {\n      for (i = 0, len = events.length; i < len; i++) {\n        event = events[i];\n        _dumper.emit(event);\n      }\n    } finally {\n      _dumper.dispose();\n    }\n    return stream || dest.string;\n  };\n\n  /*\n  Serialize a representation tree into a YAML stream.\n  If stream is falsey, return the produced string instead.\n  */\n  this.serialize = function(node, stream, Dumper = dumper.Dumper, options = {}) {\n    return exports.serialize_all([node], stream, Dumper, options);\n  };\n\n  /*\n  Serialize a sequence of representation tress into a YAML stream.\n  If stream is falsey, return the produced string instead.\n  */\n  this.serialize_all = function(nodes, stream, Dumper = dumper.Dumper, options = {}) {\n    var _dumper, dest, i, len, node;\n    dest = stream || new util.StringStream;\n    _dumper = new Dumper(dest, options);\n    try {\n      _dumper.open();\n      for (i = 0, len = nodes.length; i < len; i++) {\n        node = nodes[i];\n        _dumper.serialize(node);\n      }\n      _dumper.close();\n    } finally {\n      _dumper.dispose();\n    }\n    return stream || dest.string;\n  };\n\n  /*\n  Serialize a Javascript object into a YAML stream.\n  If stream is falsey, return the produced string instead.\n  */\n  this.dump = function(data, stream, Dumper = dumper.Dumper, options = {}) {\n    return exports.dump_all([data], stream, Dumper, options);\n  };\n\n  /*\n  Serialize a sequence of Javascript objects into a YAML stream.\n  If stream is falsey, return the produced string instead.\n  */\n  this.dump_all = function(documents, stream, Dumper = dumper.Dumper, options = {}) {\n    var _dumper, dest, document, i, len;\n    dest = stream || new util.StringStream;\n    _dumper = new Dumper(dest, options);\n    try {\n      _dumper.open();\n      for (i = 0, len = documents.length; i < len; i++) {\n        document = documents[i];\n        _dumper.represent(document);\n      }\n      _dumper.close();\n    } finally {\n      _dumper.dispose();\n    }\n    return stream || dest.string;\n  };\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///740\n")},291:module=>{eval("\nclass TfTree extends THREE.Object3D {\n  constructor({ros, tfClient, rootObject, frames, scale, showArrows, showAxes, showNames}){\n    super()\n    this.ros = ros\n    this.tfClient = tfClient\n    this.rootObject = rootObject\n    this.axisScale = scale || 1.0\n    this.frames = frames  //! Map of frameName to frameEnabled\n\n    this.sceneNodes = {}\n\n    this.tfSub = new ROSLIB.Topic({\n      ros: this.ros,\n      name: '/tf',\n      messageType: 'tf/tfMessage'\n    })\n\n    this.tfStaticSub = new ROSLIB.Topic({\n      ros: this.ros,\n      name: '/tf_static',\n      messageType: 'tf2_msgs/TFMessage'\n    })\n\n    this.listenForFrames()\n  }\n\n  listenForFrames(){\n    this.tfSub.subscribe(this.handleTfMessage.bind(this))\n    this.tfStaticSub.subscribe(this.handleTfMessage.bind(this))\n    setTimeout(this.stopListeningForFrames.bind(this), 2000)\n  }\n\n  handleTfMessage(msg){\n    for(let transform of msg.transforms){\n\n      if(this.frames[transform.header.frame_id] === undefined){\n        this.frames[transform.header.frame_id] = true\n      }\n\n      if(this.frames[transform.child_frame_id] === undefined){\n        this.frames[transform.child_frame_id] = true\n      }\n    }\n\n  }\n\n  stopListeningForFrames(){\n    this.tfSub.unsubscribe()\n    this.tfStaticSub.unsubscribe()\n\n    this.subscribe()\n  }\n\n  //! Subscribe to needed Tf frames\n  subscribe(){\n\n    for(const [frame, enabled] of Object.entries(this.frames)){\n\n      if(enabled){\n        //console.log('adding', frame)\n        let axis = new ROS3D.Axes({\n          shaftRadius: 0.03,\n          headRadius: 0.075,\n          headLength: 0.3,\n          scale: this.axisScale,\n          lineType: 'full',\n          lineDashLength: 0.1\n        })\n\n        this.sceneNodes[frame] = new ROS3D.SceneNode({\n          frameID: frame,\n          tfClient: this.tfClient,\n          object: axis\n        })\n\n        this.rootObject.add(this.sceneNodes[frame])\n      }\n    }\n  }\n\n}\n\nmodule.exports=TfTree;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkxLmpzIiwibWFwcGluZ3MiOiI7QUFDQTtBQUNBLGVBQWUsMEVBQTBFO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVsZW9weHl6Ly4vc3JjL1RmVHJlZS5qcz9lNzFmIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY2xhc3MgVGZUcmVlIGV4dGVuZHMgVEhSRUUuT2JqZWN0M0Qge1xuICBjb25zdHJ1Y3Rvcih7cm9zLCB0ZkNsaWVudCwgcm9vdE9iamVjdCwgZnJhbWVzLCBzY2FsZSwgc2hvd0Fycm93cywgc2hvd0F4ZXMsIHNob3dOYW1lc30pe1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnJvcyA9IHJvc1xuICAgIHRoaXMudGZDbGllbnQgPSB0ZkNsaWVudFxuICAgIHRoaXMucm9vdE9iamVjdCA9IHJvb3RPYmplY3RcbiAgICB0aGlzLmF4aXNTY2FsZSA9IHNjYWxlIHx8IDEuMFxuICAgIHRoaXMuZnJhbWVzID0gZnJhbWVzICAvLyEgTWFwIG9mIGZyYW1lTmFtZSB0byBmcmFtZUVuYWJsZWRcblxuICAgIHRoaXMuc2NlbmVOb2RlcyA9IHt9XG5cbiAgICB0aGlzLnRmU3ViID0gbmV3IFJPU0xJQi5Ub3BpYyh7XG4gICAgICByb3M6IHRoaXMucm9zLFxuICAgICAgbmFtZTogJy90ZicsXG4gICAgICBtZXNzYWdlVHlwZTogJ3RmL3RmTWVzc2FnZSdcbiAgICB9KVxuXG4gICAgdGhpcy50ZlN0YXRpY1N1YiA9IG5ldyBST1NMSUIuVG9waWMoe1xuICAgICAgcm9zOiB0aGlzLnJvcyxcbiAgICAgIG5hbWU6ICcvdGZfc3RhdGljJyxcbiAgICAgIG1lc3NhZ2VUeXBlOiAndGYyX21zZ3MvVEZNZXNzYWdlJ1xuICAgIH0pXG5cbiAgICB0aGlzLmxpc3RlbkZvckZyYW1lcygpXG4gIH1cblxuICBsaXN0ZW5Gb3JGcmFtZXMoKXtcbiAgICB0aGlzLnRmU3ViLnN1YnNjcmliZSh0aGlzLmhhbmRsZVRmTWVzc2FnZS5iaW5kKHRoaXMpKVxuICAgIHRoaXMudGZTdGF0aWNTdWIuc3Vic2NyaWJlKHRoaXMuaGFuZGxlVGZNZXNzYWdlLmJpbmQodGhpcykpXG4gICAgc2V0VGltZW91dCh0aGlzLnN0b3BMaXN0ZW5pbmdGb3JGcmFtZXMuYmluZCh0aGlzKSwgMjAwMClcbiAgfVxuXG4gIGhhbmRsZVRmTWVzc2FnZShtc2cpe1xuICAgIGZvcihsZXQgdHJhbnNmb3JtIG9mIG1zZy50cmFuc2Zvcm1zKXtcblxuICAgICAgaWYodGhpcy5mcmFtZXNbdHJhbnNmb3JtLmhlYWRlci5mcmFtZV9pZF0gPT09IHVuZGVmaW5lZCl7XG4gICAgICAgIHRoaXMuZnJhbWVzW3RyYW5zZm9ybS5oZWFkZXIuZnJhbWVfaWRdID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZih0aGlzLmZyYW1lc1t0cmFuc2Zvcm0uY2hpbGRfZnJhbWVfaWRdID09PSB1bmRlZmluZWQpe1xuICAgICAgICB0aGlzLmZyYW1lc1t0cmFuc2Zvcm0uY2hpbGRfZnJhbWVfaWRdID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICB9XG5cbiAgc3RvcExpc3RlbmluZ0ZvckZyYW1lcygpe1xuICAgIHRoaXMudGZTdWIudW5zdWJzY3JpYmUoKVxuICAgIHRoaXMudGZTdGF0aWNTdWIudW5zdWJzY3JpYmUoKVxuXG4gICAgdGhpcy5zdWJzY3JpYmUoKVxuICB9XG5cbiAgLy8hIFN1YnNjcmliZSB0byBuZWVkZWQgVGYgZnJhbWVzXG4gIHN1YnNjcmliZSgpe1xuXG4gICAgZm9yKGNvbnN0IFtmcmFtZSwgZW5hYmxlZF0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5mcmFtZXMpKXtcblxuICAgICAgaWYoZW5hYmxlZCl7XG4gICAgICAgIC8vY29uc29sZS5sb2coJ2FkZGluZycsIGZyYW1lKVxuICAgICAgICBsZXQgYXhpcyA9IG5ldyBST1MzRC5BeGVzKHtcbiAgICAgICAgICBzaGFmdFJhZGl1czogMC4wMyxcbiAgICAgICAgICBoZWFkUmFkaXVzOiAwLjA3NSxcbiAgICAgICAgICBoZWFkTGVuZ3RoOiAwLjMsXG4gICAgICAgICAgc2NhbGU6IHRoaXMuYXhpc1NjYWxlLFxuICAgICAgICAgIGxpbmVUeXBlOiAnZnVsbCcsXG4gICAgICAgICAgbGluZURhc2hMZW5ndGg6IDAuMVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMuc2NlbmVOb2Rlc1tmcmFtZV0gPSBuZXcgUk9TM0QuU2NlbmVOb2RlKHtcbiAgICAgICAgICBmcmFtZUlEOiBmcmFtZSxcbiAgICAgICAgICB0ZkNsaWVudDogdGhpcy50ZkNsaWVudCxcbiAgICAgICAgICBvYmplY3Q6IGF4aXNcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLnJvb3RPYmplY3QuYWRkKHRoaXMuc2NlbmVOb2Rlc1tmcmFtZV0pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHM9VGZUcmVlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///291\n")},138:(module,__unused_webpack_exports,__webpack_require__)=>{eval("const debug = __webpack_require__(227)('teleop')\nconst reach = __webpack_require__(329)\nconst yaml = __webpack_require__(740)\nconst path = __webpack_require__(470)\n\nconst TfTree = __webpack_require__(291)\n\nclass TeleOp {\n  constructor(){\n    debug('new TeleOp')\n\n    this.ros = null\n    this.host = null\n    this.fileContent = null\n    this.divId = null\n    this.viewer = null\n    this.tfClient = null\n    this.baseLink = null\n  }\n\n  async connectRos(){\n    return new Promise((resolve,reject)=>{\n\n      // Connect to ROS.\n      this.ros = new ROSLIB.Ros({\n        url : this.host\n      });\n\n      this.ros.on('error', (error) => {\n        debug('Connection error ' + this.host)\n        debug(error)\n        reject(error)\n      });\n      // Find out exactly when we made a connection.\n      this.ros.on('connection', () => {\n        debug('Connection open ' + this.host)\n        resolve()\n      })\n    })\n  }\n\n  async start(host, rvizFile, divId=\"viewer\"){\n    debug('start')\n\n    this.host = host\n    this.divId = divId\n    this.fileContent = yaml.load(rvizFile)\n\n    debug('fileContent', this.fileContent)\n\n    await this.connectRos()\n\n    let globalOptions = {\n      background: TeleOp.rvizColor2hex(reach(this.fileContent, 'Visualization Manager.Global Options.Background Color'), null),\n      fixedFrame: reach(this.fileContent, 'Visualization Manager.Global Options.Fixed Frame', '/base_link'),\n      frameRate: reach(this.fileContent, 'Visualization Manager.Global Options.Frame Rate', 30)\n    }\n\n    this.viewer = new ROS3D.Viewer({\n      divID: this.divId,\n      width: window.innerWidth,\n      height: window.innerHeight-70,\n      antialias: true,\n      background: globalOptions.background\n    });\n\n    window.onresize = (e)=>{this.onResize(e)}\n\n    /*this.viewer.addObject(new ROS3D.Grid({\n      color:'#0181c4',\n      cellSize: 1.0,\n      num_cells: 20\n    }));*/\n\n\n    console.log('Globals', { globalOptions })\n\n\n\n    this.tfClient = new ROSLIB.TFClient({\n      ros: this.ros,\n      serverName: `/tf2_web_republisher`,   //! Need to make configurable and autodetect correct one on the fly\n      angularThres: 0.03,\n      transThres: 0.01,\n      //rate: globalOptions.frameRate,\n      fixedFrame: globalOptions.fixedFrame\n    })\n\n    let displays = reach(this.fileContent, 'Visualization Manager.Displays', [])\n\n    for(let display of displays){\n      debug(`parsing display '${display.Class}'`, { display })\n\n      if(!display.Enabled){\n        debug(` not enabled`)\n        continue\n      }\n\n      let obj = undefined;\n      switch (display.Class) {\n        case 'rviz/Grid':\n          debug('display.color', display.Color)\n          obj=new ROS3D.Grid({\n            color: TeleOp.rvizColor2hex(display.Color, '#ff1010'),\n            cellSize: display['Cell Size'],\n            num_cells: display['Plane Cell Count']\n          })\n          this.viewer.addObject(obj)\n          break\n        case 'rviz/TF':\n          console.log(display)\n          const allEnabled = display.Frames['All Enabled'] || false\n\n          const frames = Object.fromEntries(\n            Object.entries(display.Frames)\n            .map(([key,value])=> {\n              return [key, allEnabled || value.Value && true]\n            })\n            .filter(([key, value]) => key != 'All Enabled')\n          )\n          \n          console.log('frames', frames)\n          obj = new TfTree({\n            frames,\n            ros: this.ros,\n            tfClient: this.tfClient,\n            rootObject: this.viewer.scene,\n            scale: display['Marker Scale'],\n            showAxes: display['Show Axes'],\n            showNames: display['Show Names'],\n            showArrows: display['Show Arrows']\n          })\n          break;\n        case 'rviz/LaserScan':\n         console.warn(display.Class, 'support is in development and untested')\n          obj = new ROS3D.LaserScan({\n            ros: this.ros,\n            topic: `${display.Topic}`,\n            tfClient: this.tfClient,\n            color: display.color, // need to check if this is in the right format\n            // texture: , // (optional) Image url for a texture to use for the points. Defaults to a single white pixel.\n            rootObject: this.viewer.scene,\n            material: {\n              size: display['Size (Pixels)'], // (optional) defaults to 0.05\n            },\n            max_pts: 50000 // (optional) defaults to 100\n          })\n          break\n        case 'rviz/PointCloud2':\n          obj = new ROS3D.PointCloud2({\n            ros: this.ros,\n            topic: `${display.Topic}`,\n            rootObject: this.viewer.scene,\n            tfClient: this.tfClient,\n            max_pts: 50000,\n            //colorsrc: display[\"Color Transformer\"],\n            material: { \n              size: 0.02\n            }\n          })\n\n          console.log('pt', display[\"Color Transformer\"])\n          break\n        case 'rviz/Marker':\n          obj = new ROS3D.MarkerClient({\n            ros: this.ros,\n            topic: `${display['Marker Topic']}`,\n            rootObject: this.viewer.scene,\n            tfClient: this.tfClient\n          })\n          break\n        case 'rviz/MarkerArray':\n          obj = new ROS3D.MarkerArrayClient({\n            ros: this.ros,\n            topic: `${display['Marker Topic']}`,\n            rootObject: this.viewer.scene,\n            tfClient: this.tfClient\n          })\n          break\n        case 'rviz/Map':\n          obj = new ROS3D.OccupancyGridClient({\n            ros: this.ros,\n            topic: `${display.Topic}`,\n            rootObject: this.viewer.scene,\n            tfClient: this.tfClient,\n            continuous: true\n          })\n          break\n        case 'rviz/Odometry':\n          debug(display.Class)\n          obj = new ROS3D.Odometry({\n            ros: this.ros,\n            topic: `${display.Topic}`,\n            rootObject: this.viewer.scene,\n            tfClient: this.tfClient,\n            keep: display.Keep,\n            length: reach(display, 'Shape.Axes Length'),\n            headlength: reach(display, 'Shape.Head Length'),\n            shaftLength: reach(display, 'Shape.Shaft Length'),\n            headDiameter: reach(display, 'Shape.Head Radius')*2.0,\n            shaftDiameter: reach(display, 'Shape.Shaft Radius')*2.0,\n            color: TeleOp.rvizColor2hex(reach(display,'Shape.Color'), '#cc00ff')\n          })\n          break\n        case 'rviz/Path':\n          debug(display.Class)\n          obj = new ROS3D.Path({\n            ros: this.ros,\n            topic: `${display.Topic}`,\n            rootObject: this.viewer.scene,\n            tfClient: this.tfClient,\n            color: TeleOp.rvizColor2hex(display.Color, '#cc00ff')\n          })\n          break\n        case 'rviz/RobotModel':\n          debug(display.Class)\n          console.log(display)\n\n          let paramPath = path.join('/', display['Robot Description'])\n\n          console.log(paramPath)\n\n          const urdfText = await new Promise((resolve,reject)=>{\n            let descParam = new ROSLIB.Param({\n              ros: this.ros, name: paramPath\n            })\n\n            descParam.get(val=>{ resolve(val) })\n          })\n\n          console.log('urdf', urdfText)\n\n          let publicModelPath = ''\n          if(urdfText.length > 0){\n            let parser = new DOMParser()\n            let xmlDoc = parser.parseFromString(urdfText, 'text/xml')\n\n            const robotTag = xmlDoc.getElementsByTagName('robot')[0]\n            const robotName = robotTag.getAttribute('name')\n            console.log('urdf robot name', robotName, robotName.indexOf('magni'))\n            if(robotName.indexOf('magni') != -1){\n              publicModelPath = 'https://raw.githubusercontent.com/UbiquityRobotics/magni_robot/noetic-devel'\n            }\n          }\n          \n\n          try{\n            obj = new ROS3D.UrdfClient({\n              path: publicModelPath,\n              ros: this.ros,\n              param: paramPath,\n              rootObject: this.viewer.scene,\n              tfClient: this.tfClient,\n              tfPrefix: display['TF Prefix']\n            })\n          }\n          catch(err){\n            console.log('urdf error', err)\n            //delete obj\n            obj = null\n          }\n          \n\n          console.log(obj)\n          break\n        default:\n          console.warn(`display class '${display.Class}' not supported`)\n          console.warn(display)\n          break\n      }\n\n      if (obj) {\n        debug(obj)\n      }\n    }\n\n  }\n\n  onResize(event) {\n    debug('resize')\n\n    this.viewer.resize(event.target.innerWidth, event.target.innerHeight-70)\n  }\n\n  disableViz() {\n    /** @todo */\n    debug('disable viz - not implemented')\n  }\n\n\n  static rvizColor2hex(color, defaultHex) {\n    if (!color) { return defaultHex }\n    return TeleOp.rgb2hex(color.replace(/;/g, ','))\n  }\n  \n  static rgb2hex(rgb) {\n    rgb = rgb.match(/[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n    return (rgb && rgb.length === 4) ? \"#\" +\n      (\"0\" + parseInt(rgb[1], 10).toString(16)).slice(-2) +\n      (\"0\" + parseInt(rgb[2], 10).toString(16)).slice(-2) +\n      (\"0\" + parseInt(rgb[3], 10).toString(16)).slice(-2) : '';\n  }\n}\n\nmodule.exports=TeleOp;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///138\n")},329:module=>{eval("module.exports = function(obj, path, defaultVal){\n  var tokens = path.split('.')\n  var val = obj;\n\n  try{\n    for(var i=0; i<tokens.length; i++){\n      val = val[tokens[i]]\n    }\n\n    if(val == undefined){ val = defaultVal }\n  }\n  catch(excp){\n    val = (defaultVal != undefined) ? defaultVal : null\n  }\n\n  return val;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3RlbGVvcHh5ei8uL3NyYy9yZWFjaC5qcz83ZjQ0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBwYXRoLCBkZWZhdWx0VmFsKXtcbiAgdmFyIHRva2VucyA9IHBhdGguc3BsaXQoJy4nKVxuICB2YXIgdmFsID0gb2JqO1xuXG4gIHRyeXtcbiAgICBmb3IodmFyIGk9MDsgaTx0b2tlbnMubGVuZ3RoOyBpKyspe1xuICAgICAgdmFsID0gdmFsW3Rva2Vuc1tpXV1cbiAgICB9XG5cbiAgICBpZih2YWwgPT0gdW5kZWZpbmVkKXsgdmFsID0gZGVmYXVsdFZhbCB9XG4gIH1cbiAgY2F0Y2goZXhjcCl7XG4gICAgdmFsID0gKGRlZmF1bHRWYWwgIT0gdW5kZWZpbmVkKSA/IGRlZmF1bHRWYWwgOiBudWxsXG4gIH1cblxuICByZXR1cm4gdmFsO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///329\n")},83:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar possibleNames = [\n\t'BigInt64Array',\n\t'BigUint64Array',\n\t'Float32Array',\n\t'Float64Array',\n\t'Int16Array',\n\t'Int32Array',\n\t'Int8Array',\n\t'Uint16Array',\n\t'Uint32Array',\n\t'Uint8Array',\n\t'Uint8ClampedArray'\n];\n\nvar g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;\n\nmodule.exports = function availableTypedArrays() {\n\tvar out = [];\n\tfor (var i = 0; i < possibleNames.length; i++) {\n\t\tif (typeof g[possibleNames[i]] === 'function') {\n\t\t\tout[out.length] = possibleNames[i];\n\t\t}\n\t}\n\treturn out;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNENBQTRDLHFCQUFNOztBQUVsRDtBQUNBO0FBQ0EsaUJBQWlCLDBCQUEwQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZWxlb3B4eXovLi9ub2RlX21vZHVsZXMvYXZhaWxhYmxlLXR5cGVkLWFycmF5cy9pbmRleC5qcz8wN2Q2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHBvc3NpYmxlTmFtZXMgPSBbXG5cdCdCaWdJbnQ2NEFycmF5Jyxcblx0J0JpZ1VpbnQ2NEFycmF5Jyxcblx0J0Zsb2F0MzJBcnJheScsXG5cdCdGbG9hdDY0QXJyYXknLFxuXHQnSW50MTZBcnJheScsXG5cdCdJbnQzMkFycmF5Jyxcblx0J0ludDhBcnJheScsXG5cdCdVaW50MTZBcnJheScsXG5cdCdVaW50MzJBcnJheScsXG5cdCdVaW50OEFycmF5Jyxcblx0J1VpbnQ4Q2xhbXBlZEFycmF5J1xuXTtcblxudmFyIGcgPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiBnbG9iYWxUaGlzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGF2YWlsYWJsZVR5cGVkQXJyYXlzKCkge1xuXHR2YXIgb3V0ID0gW107XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcG9zc2libGVOYW1lcy5sZW5ndGg7IGkrKykge1xuXHRcdGlmICh0eXBlb2YgZ1twb3NzaWJsZU5hbWVzW2ldXSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0b3V0W291dC5sZW5ndGhdID0gcG9zc2libGVOYW1lc1tpXTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG91dDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///83\n")},882:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar GetIntrinsic = __webpack_require__(210);\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\nif ($gOPD) {\n\ttry {\n\t\t$gOPD([], 'length');\n\t} catch (e) {\n\t\t// IE 8 has a broken gOPD\n\t\t$gOPD = null;\n\t}\n}\n\nmodule.exports = $gOPD;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODgyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLG1CQUFtQixtQkFBTyxDQUFDLEdBQWU7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVsZW9weHl6Ly4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLmpzPzE4NTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJGdPUEQgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJScsIHRydWUpO1xuaWYgKCRnT1BEKSB7XG5cdHRyeSB7XG5cdFx0JGdPUEQoW10sICdsZW5ndGgnKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIElFIDggaGFzIGEgYnJva2VuIGdPUERcblx0XHQkZ09QRCA9IG51bGw7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSAkZ09QRDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///882\n")}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var n=__webpack_module_cache__[g]={exports:{}};return __webpack_modules__[g].call(n.exports,n,n.exports,__webpack_require__),n.exports}__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(g){if("object"==typeof window)return window}}();var __webpack_exports__=__webpack_require__(138);teleopxyz=__webpack_exports__})();